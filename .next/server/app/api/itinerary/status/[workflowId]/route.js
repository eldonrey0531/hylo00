"use strict";(()=>{var r={};r.id=212,r.ids=[212],r.modules={399:r=>{r.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:r=>{r.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2048:r=>{r.exports=require("fs")},5315:r=>{r.exports=require("path")},6005:r=>{r.exports=require("node:crypto")},9416:(r,e,t)=>{t.r(e),t.d(e,{originalPathname:()=>y,patchFetch:()=>g,requestAsyncStorage:()=>p,routeModule:()=>c,serverHooks:()=>f,staticGenerationAsyncStorage:()=>w});var o={};t.r(o),t.d(o,{GET:()=>d});var s=t(9303),a=t(8716),n=t(670),i=t(7070),l=t(1202),u=t(3671);async function d(r,{params:e}){let t=Date.now(),{workflowId:o}=await e;try{if(l.k.log(1,"Status check request received","status/[workflowId]/route.ts","GET",{workflowId:o}),!o||!o.startsWith("workflow_"))return l.k.error(2,"Invalid workflow ID format","status/[workflowId]/route.ts","GET","ValidationError: Invalid workflow ID"),i.NextResponse.json({error:"Invalid workflow ID format",success:!1},{status:400});l.k.log(3,"Fetching workflow state from stateStore","status/[workflowId]/route.ts","GET",{workflowId:o});let r=await u.U.getItineraryState(o);if(!r)return l.k.error(4,"Workflow state not found","status/[workflowId]/route.ts","GET","Workflow not found in stateStore"),i.NextResponse.json({error:"Workflow not found",success:!1},{status:404});l.k.log(5,"Workflow state retrieved","status/[workflowId]/route.ts","GET",{status:r.status,hasItinerary:!!r.itinerary,hasLayout:!!r.layout,hasLayoutContent:!!r.layout?.content});let e=r.status,s="completed"===e?100:"processing"===e?50:10,a="completed"===e?"Itinerary generation complete":"processing"===e?"Generating AI itinerary content":"Initializing workflow",n=null,d=null,c=null;if(r.itinerary){d="string"==typeof r.itinerary?r.itinerary:JSON.stringify(r.itinerary);try{n=JSON.parse(d),console.log("✅ [STATUS API] Successfully parsed itinerary JSON:",{workflowId:o,hasIntro:!!n?.intro,dailyPlansCount:Array.isArray(n?.dailyPlans)?n.dailyPlans.length:0,originalStringLength:d.length})}catch(r){c=r instanceof Error?r.message:String(r),console.error("❌ [STATUS API] Failed to parse itinerary JSON:",{workflowId:o,error:c,originalStringPreview:d.slice(0,200)}),n=null}}else console.log("⚠️ [STATUS API] No itinerary data found in workflow state:",{workflowId:o,workflowStateKeys:Object.keys(r)});let p={success:!0,status:e,progress:s,currentStep:a,itinerary:n,rawItinerary:d,itineraryParseError:c,formData:r.formData||null,error:r.error||null,createdAt:r.createdAt,updatedAt:r.updatedAt};return l.k.log(6,"Status response prepared","status/[workflowId]/route.ts","GET",{status:e,progress:s,hasItinerary:!!p.itinerary,processingTimeMs:Date.now()-t}),i.NextResponse.json(p)}catch(r){return l.k.error(7,"Status check failed","status/[workflowId]/route.ts","GET",r instanceof Error?r.message:String(r),{workflowId:o,processingTimeMs:Date.now()-t}),i.NextResponse.json({success:!1,error:"Internal server error",status:"error",progress:0,currentStep:"Error occurred"},{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/itinerary/status/[workflowId]/route",pathname:"/api/itinerary/status/[workflowId]",filename:"route",bundlePath:"app/api/itinerary/status/[workflowId]/route"},resolvedPagePath:"C:\\Users\\raze0\\Documents\\vercel_deploy\\hylo00_original\\src\\app\\api\\itinerary\\status\\[workflowId]\\route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:p,staticGenerationAsyncStorage:w,serverHooks:f}=c,y="/api/itinerary/status/[workflowId]/route";function g(){return(0,n.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:w})}}};var e=require("../../../../../webpack-runtime.js");e.C(r);var t=r=>e(e.s=r),o=e.X(0,[948,972,343,671],()=>t(9416));module.exports=o})();