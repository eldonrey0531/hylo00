"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/inngest/route";
exports.ids = ["app/api/inngest/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:module":
/*!******************************!*\
  !*** external "node:module" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:module");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finngest%2Froute&page=%2Fapi%2Finngest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finngest%2Froute.ts&appDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finngest%2Froute&page=%2Fapi%2Finngest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finngest%2Froute.ts&appDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_raze0_Documents_hylo00_hylo00_src_app_api_inngest_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/inngest/route.ts */ \"(rsc)/./src/app/api/inngest/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/inngest/route\",\n        pathname: \"/api/inngest\",\n        filename: \"route\",\n        bundlePath: \"app/api/inngest/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\raze0\\\\Documents\\\\hylo00\\\\hylo00\\\\src\\\\app\\\\api\\\\inngest\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_raze0_Documents_hylo00_hylo00_src_app_api_inngest_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/inngest/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZpbm5nZXN0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZpbm5nZXN0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGaW5uZ2VzdCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNyYXplMCU1Q0RvY3VtZW50cyU1Q2h5bG8wMCU1Q2h5bG8wMCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDcmF6ZTAlNUNEb2N1bWVudHMlNUNoeWxvMDAlNUNoeWxvMDAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzZCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLz84MjY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXHJhemUwXFxcXERvY3VtZW50c1xcXFxoeWxvMDBcXFxcaHlsbzAwXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGlubmdlc3RcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2lubmdlc3Qvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9pbm5nZXN0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9pbm5nZXN0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxccmF6ZTBcXFxcRG9jdW1lbnRzXFxcXGh5bG8wMFxcXFxoeWxvMDBcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcaW5uZ2VzdFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvaW5uZ2VzdC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finngest%2Froute&page=%2Fapi%2Finngest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finngest%2Froute.ts&appDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/inngest/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/inngest/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var inngest_next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inngest/next */ \"(rsc)/./node_modules/inngest/next.js\");\n/* harmony import */ var _inngest_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/inngest/client */ \"(rsc)/./src/inngest/client.ts\");\n/* harmony import */ var _inngest_functions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/inngest/functions */ \"(rsc)/./src/inngest/functions/index.ts\");\n\n\n\n/**\r\n * Inngest API handler for Next.js App Router\r\n * This serves the Inngest functions for remote invocation\r\n */ // Export the HTTP methods for Inngest to handle\nconst { GET, POST, PUT } = (0,inngest_next__WEBPACK_IMPORTED_MODULE_2__.serve)({\n    client: _inngest_client__WEBPACK_IMPORTED_MODULE_0__.inngest,\n    functions: _inngest_functions__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9pbm5nZXN0L3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxQztBQUNNO0FBQ1E7QUFFbkQ7OztDQUdDLEdBRUQsZ0RBQWdEO0FBQ3pDLE1BQU0sRUFBRUcsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRSxHQUFHTCxtREFBS0EsQ0FBQztJQUN0Q00sUUFBUUwsb0RBQU9BO0lBQ2ZNLFdBQVdMLDBEQUFnQkE7QUFDN0IsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL3NyYy9hcHAvYXBpL2lubmdlc3Qvcm91dGUudHM/NTM4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXJ2ZSB9IGZyb20gXCJpbm5nZXN0L25leHRcIjtcclxuaW1wb3J0IHsgaW5uZ2VzdCB9IGZyb20gXCJAL2lubmdlc3QvY2xpZW50XCI7XHJcbmltcG9ydCBpbm5nZXN0RnVuY3Rpb25zIGZyb20gXCJAL2lubmdlc3QvZnVuY3Rpb25zXCI7XHJcblxyXG4vKipcclxuICogSW5uZ2VzdCBBUEkgaGFuZGxlciBmb3IgTmV4dC5qcyBBcHAgUm91dGVyXHJcbiAqIFRoaXMgc2VydmVzIHRoZSBJbm5nZXN0IGZ1bmN0aW9ucyBmb3IgcmVtb3RlIGludm9jYXRpb25cclxuICovXHJcblxyXG4vLyBFeHBvcnQgdGhlIEhUVFAgbWV0aG9kcyBmb3IgSW5uZ2VzdCB0byBoYW5kbGVcclxuZXhwb3J0IGNvbnN0IHsgR0VULCBQT1NULCBQVVQgfSA9IHNlcnZlKHtcclxuICBjbGllbnQ6IGlubmdlc3QsXHJcbiAgZnVuY3Rpb25zOiBpbm5nZXN0RnVuY3Rpb25zLFxyXG59KTsiXSwibmFtZXMiOlsic2VydmUiLCJpbm5nZXN0IiwiaW5uZ2VzdEZ1bmN0aW9ucyIsIkdFVCIsIlBPU1QiLCJQVVQiLCJjbGllbnQiLCJmdW5jdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/inngest/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/inngest/client.ts":
/*!*******************************!*\
  !*** ./src/inngest/client.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getInngestClient: () => (/* binding */ getInngestClient),\n/* harmony export */   inngest: () => (/* binding */ inngest)\n/* harmony export */ });\n/* harmony import */ var inngest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inngest */ \"(rsc)/./node_modules/inngest/components/Inngest.js\");\n/* harmony import */ var _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/console-logger */ \"(rsc)/./src/utils/console-logger.ts\");\n/* harmony import */ var _lib_config_itinerary_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/config/itinerary-config */ \"(rsc)/./src/lib/config/itinerary-config.ts\");\n\n\n\n/**\r\n * Inngest client bootstrap for AI-Generated Personalized Itinerary workflows\r\n * Initializes the Inngest client with configuration derived from our feature config helper.\r\n */ let inngestInstance = null;\nfunction getInngestClient() {\n    if (inngestInstance) {\n        return inngestInstance;\n    }\n    try {\n        const config = (0,_lib_config_itinerary_config__WEBPACK_IMPORTED_MODULE_1__.getItineraryConfig)();\n        inngestInstance = new inngest__WEBPACK_IMPORTED_MODULE_2__.Inngest({\n            id: \"hylo00-itinerary\",\n            name: \"Hylo00 AI Itinerary Generator\",\n            eventKey: config.inngest.eventKey,\n            signingKey: config.inngest.signingKey,\n            baseUrl: config.app.nodeEnv === \"development\" ? \"http://localhost:8288\" : undefined,\n            logger: {\n                debug: (message, ...args)=>{\n                    if (args.length > 0) {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_DEBUG: ${message}`, \"client.ts\", \"debug\", {\n                            args\n                        });\n                    } else {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_DEBUG: ${message}`, \"client.ts\", \"debug\");\n                    }\n                },\n                info: (message, ...args)=>{\n                    if (args.length > 0) {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_INFO: ${message}`, \"client.ts\", \"info\", {\n                            args\n                        });\n                    } else {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_INFO: ${message}`, \"client.ts\", \"info\");\n                    }\n                },\n                warn: (message, ...args)=>{\n                    if (args.length > 0) {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_WARN: ${message}`, \"client.ts\", \"warn\", {\n                            args\n                        });\n                    } else {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_WARN: ${message}`, \"client.ts\", \"warn\");\n                    }\n                },\n                error: (message, ...args)=>{\n                    if (args.length > 0) {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_ERROR: ${message}`, \"client.ts\", \"error\", {\n                            args\n                        });\n                    } else {\n                        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, `INNGEST_ERROR: ${message}`, \"client.ts\", \"error\");\n                    }\n                }\n            }\n        });\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(0, \"INNGEST_CLIENT_INITIALIZED\", \"client.ts\", \"getInngestClient\", {\n            clientId: \"hylo00-itinerary\",\n            hasEventKey: Boolean(config.inngest.eventKey),\n            hasSigningKey: Boolean(config.inngest.signingKey),\n            isDevelopment: config.app.nodeEnv === \"development\"\n        });\n        return inngestInstance;\n    } catch (error) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(0, \"INNGEST_CLIENT_INITIALIZATION_FAILED\", \"client.ts\", \"getInngestClient\", error instanceof Error ? error : String(error));\n        throw error;\n    }\n}\nconst inngest = getInngestClient();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (inngest);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvaW5uZ2VzdC9jbGllbnQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQ2M7QUFDbUI7QUFFbkU7OztDQUdDLEdBQ0QsSUFBSUcsa0JBQWtDO0FBRS9CLFNBQVNDO0lBQ2QsSUFBSUQsaUJBQWlCO1FBQ25CLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJO1FBQ0YsTUFBTUUsU0FBU0gsZ0ZBQWtCQTtRQUVqQ0Msa0JBQWtCLElBQUlILDRDQUFPQSxDQUFDO1lBQzVCTSxJQUFJO1lBQ0pDLE1BQU07WUFDTkMsVUFBVUgsT0FBT0ksT0FBTyxDQUFDRCxRQUFRO1lBQ2pDRSxZQUFZTCxPQUFPSSxPQUFPLENBQUNDLFVBQVU7WUFDckNDLFNBQVNOLE9BQU9PLEdBQUcsQ0FBQ0MsT0FBTyxLQUFLLGdCQUFnQiwwQkFBMEJDO1lBQzFFYixRQUFRO2dCQUNOYyxPQUFPLENBQUNDLFNBQWlCLEdBQUdDO29CQUMxQixJQUFJQSxLQUFLQyxNQUFNLEdBQUcsR0FBRzt3QkFDbkJqQix5REFBTUEsQ0FBQ2tCLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFSCxRQUFRLENBQUMsRUFBRSxhQUFhLFNBQVM7NEJBQUVDO3dCQUFLO29CQUMxRSxPQUFPO3dCQUNMaEIseURBQU1BLENBQUNrQixHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRUgsUUFBUSxDQUFDLEVBQUUsYUFBYTtvQkFDMUQ7Z0JBQ0Y7Z0JBQ0FJLE1BQU0sQ0FBQ0osU0FBaUIsR0FBR0M7b0JBQ3pCLElBQUlBLEtBQUtDLE1BQU0sR0FBRyxHQUFHO3dCQUNuQmpCLHlEQUFNQSxDQUFDa0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUVILFFBQVEsQ0FBQyxFQUFFLGFBQWEsUUFBUTs0QkFBRUM7d0JBQUs7b0JBQ3hFLE9BQU87d0JBQ0xoQix5REFBTUEsQ0FBQ2tCLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFSCxRQUFRLENBQUMsRUFBRSxhQUFhO29CQUN6RDtnQkFDRjtnQkFDQUssTUFBTSxDQUFDTCxTQUFpQixHQUFHQztvQkFDekIsSUFBSUEsS0FBS0MsTUFBTSxHQUFHLEdBQUc7d0JBQ25CakIseURBQU1BLENBQUNrQixHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRUgsUUFBUSxDQUFDLEVBQUUsYUFBYSxRQUFROzRCQUFFQzt3QkFBSztvQkFDeEUsT0FBTzt3QkFDTGhCLHlEQUFNQSxDQUFDa0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUVILFFBQVEsQ0FBQyxFQUFFLGFBQWE7b0JBQ3pEO2dCQUNGO2dCQUNBTSxPQUFPLENBQUNOLFNBQWlCLEdBQUdDO29CQUMxQixJQUFJQSxLQUFLQyxNQUFNLEdBQUcsR0FBRzt3QkFDbkJqQix5REFBTUEsQ0FBQ2tCLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFSCxRQUFRLENBQUMsRUFBRSxhQUFhLFNBQVM7NEJBQUVDO3dCQUFLO29CQUMxRSxPQUFPO3dCQUNMaEIseURBQU1BLENBQUNrQixHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRUgsUUFBUSxDQUFDLEVBQUUsYUFBYTtvQkFDMUQ7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUFmLHlEQUFNQSxDQUFDa0IsR0FBRyxDQUFDLEdBQUcsOEJBQThCLGFBQWEsb0JBQW9CO1lBQzNFSSxVQUFVO1lBQ1ZDLGFBQWFDLFFBQVFwQixPQUFPSSxPQUFPLENBQUNELFFBQVE7WUFDNUNrQixlQUFlRCxRQUFRcEIsT0FBT0ksT0FBTyxDQUFDQyxVQUFVO1lBQ2hEaUIsZUFBZXRCLE9BQU9PLEdBQUcsQ0FBQ0MsT0FBTyxLQUFLO1FBQ3hDO1FBRUEsT0FBT1Y7SUFDVCxFQUFFLE9BQU9tQixPQUFPO1FBQ2RyQix5REFBTUEsQ0FBQ3FCLEtBQUssQ0FBQyxHQUFHLHdDQUF3QyxhQUFhLG9CQUFvQkEsaUJBQWlCTSxRQUFRTixRQUFRTyxPQUFPUDtRQUNqSSxNQUFNQTtJQUNSO0FBQ0Y7QUFFTyxNQUFNYixVQUFVTCxtQkFBbUI7QUFFMUMsaUVBQWVLLE9BQU9BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9zcmMvaW5uZ2VzdC9jbGllbnQudHM/YmI0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbm5nZXN0IH0gZnJvbSAnaW5uZ2VzdCc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0AvdXRpbHMvY29uc29sZS1sb2dnZXInO1xyXG5pbXBvcnQgeyBnZXRJdGluZXJhcnlDb25maWcgfSBmcm9tICdAL2xpYi9jb25maWcvaXRpbmVyYXJ5LWNvbmZpZyc7XHJcblxyXG4vKipcclxuICogSW5uZ2VzdCBjbGllbnQgYm9vdHN0cmFwIGZvciBBSS1HZW5lcmF0ZWQgUGVyc29uYWxpemVkIEl0aW5lcmFyeSB3b3JrZmxvd3NcclxuICogSW5pdGlhbGl6ZXMgdGhlIElubmdlc3QgY2xpZW50IHdpdGggY29uZmlndXJhdGlvbiBkZXJpdmVkIGZyb20gb3VyIGZlYXR1cmUgY29uZmlnIGhlbHBlci5cclxuICovXHJcbmxldCBpbm5nZXN0SW5zdGFuY2U6IElubmdlc3QgfCBudWxsID0gbnVsbDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbm5nZXN0Q2xpZW50KCk6IElubmdlc3Qge1xyXG4gIGlmIChpbm5nZXN0SW5zdGFuY2UpIHtcclxuICAgIHJldHVybiBpbm5nZXN0SW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgY29uZmlnID0gZ2V0SXRpbmVyYXJ5Q29uZmlnKCk7XHJcblxyXG4gICAgaW5uZ2VzdEluc3RhbmNlID0gbmV3IElubmdlc3Qoe1xyXG4gICAgICBpZDogJ2h5bG8wMC1pdGluZXJhcnknLFxyXG4gICAgICBuYW1lOiAnSHlsbzAwIEFJIEl0aW5lcmFyeSBHZW5lcmF0b3InLFxyXG4gICAgICBldmVudEtleTogY29uZmlnLmlubmdlc3QuZXZlbnRLZXksXHJcbiAgICAgIHNpZ25pbmdLZXk6IGNvbmZpZy5pbm5nZXN0LnNpZ25pbmdLZXksXHJcbiAgICAgIGJhc2VVcmw6IGNvbmZpZy5hcHAubm9kZUVudiA9PT0gJ2RldmVsb3BtZW50JyA/ICdodHRwOi8vbG9jYWxob3N0OjgyODgnIDogdW5kZWZpbmVkLFxyXG4gICAgICBsb2dnZXI6IHtcclxuICAgICAgICBkZWJ1ZzogKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmxvZygwLCBgSU5OR0VTVF9ERUJVRzogJHttZXNzYWdlfWAsICdjbGllbnQudHMnLCAnZGVidWcnLCB7IGFyZ3MgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2dnZXIubG9nKDAsIGBJTk5HRVNUX0RFQlVHOiAke21lc3NhZ2V9YCwgJ2NsaWVudC50cycsICdkZWJ1ZycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5mbzogKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcclxuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmxvZygwLCBgSU5OR0VTVF9JTkZPOiAke21lc3NhZ2V9YCwgJ2NsaWVudC50cycsICdpbmZvJywgeyBhcmdzIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmxvZygwLCBgSU5OR0VTVF9JTkZPOiAke21lc3NhZ2V9YCwgJ2NsaWVudC50cycsICdpbmZvJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXJuOiAobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsb2dnZXIubG9nKDAsIGBJTk5HRVNUX1dBUk46ICR7bWVzc2FnZX1gLCAnY2xpZW50LnRzJywgJ3dhcm4nLCB7IGFyZ3MgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2dnZXIubG9nKDAsIGBJTk5HRVNUX1dBUk46ICR7bWVzc2FnZX1gLCAnY2xpZW50LnRzJywgJ3dhcm4nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yOiAobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsb2dnZXIubG9nKDAsIGBJTk5HRVNUX0VSUk9SOiAke21lc3NhZ2V9YCwgJ2NsaWVudC50cycsICdlcnJvcicsIHsgYXJncyB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5sb2coMCwgYElOTkdFU1RfRVJST1I6ICR7bWVzc2FnZX1gLCAnY2xpZW50LnRzJywgJ2Vycm9yJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGxvZ2dlci5sb2coMCwgJ0lOTkdFU1RfQ0xJRU5UX0lOSVRJQUxJWkVEJywgJ2NsaWVudC50cycsICdnZXRJbm5nZXN0Q2xpZW50Jywge1xyXG4gICAgICBjbGllbnRJZDogJ2h5bG8wMC1pdGluZXJhcnknLFxyXG4gICAgICBoYXNFdmVudEtleTogQm9vbGVhbihjb25maWcuaW5uZ2VzdC5ldmVudEtleSksXHJcbiAgICAgIGhhc1NpZ25pbmdLZXk6IEJvb2xlYW4oY29uZmlnLmlubmdlc3Quc2lnbmluZ0tleSksXHJcbiAgICAgIGlzRGV2ZWxvcG1lbnQ6IGNvbmZpZy5hcHAubm9kZUVudiA9PT0gJ2RldmVsb3BtZW50JyxcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBpbm5nZXN0SW5zdGFuY2U7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGxvZ2dlci5lcnJvcigwLCAnSU5OR0VTVF9DTElFTlRfSU5JVElBTElaQVRJT05fRkFJTEVEJywgJ2NsaWVudC50cycsICdnZXRJbm5nZXN0Q2xpZW50JywgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogU3RyaW5nKGVycm9yKSk7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpbm5nZXN0ID0gZ2V0SW5uZ2VzdENsaWVudCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5uZ2VzdDtcclxuIl0sIm5hbWVzIjpbIklubmdlc3QiLCJsb2dnZXIiLCJnZXRJdGluZXJhcnlDb25maWciLCJpbm5nZXN0SW5zdGFuY2UiLCJnZXRJbm5nZXN0Q2xpZW50IiwiY29uZmlnIiwiaWQiLCJuYW1lIiwiZXZlbnRLZXkiLCJpbm5nZXN0Iiwic2lnbmluZ0tleSIsImJhc2VVcmwiLCJhcHAiLCJub2RlRW52IiwidW5kZWZpbmVkIiwiZGVidWciLCJtZXNzYWdlIiwiYXJncyIsImxlbmd0aCIsImxvZyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJjbGllbnRJZCIsImhhc0V2ZW50S2V5IiwiQm9vbGVhbiIsImhhc1NpZ25pbmdLZXkiLCJpc0RldmVsb3BtZW50IiwiRXJyb3IiLCJTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/inngest/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/inngest/functions/index.ts":
/*!****************************************!*\
  !*** ./src/inngest/functions/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   inngestFunctions: () => (/* binding */ inngestFunctions),\n/* harmony export */   itineraryWorkflow: () => (/* reexport safe */ _itinerary__WEBPACK_IMPORTED_MODULE_0__.itineraryWorkflow)\n/* harmony export */ });\n/* harmony import */ var _itinerary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./itinerary */ \"(rsc)/./src/inngest/functions/itinerary.ts\");\n\nconst inngestFunctions = [\n    _itinerary__WEBPACK_IMPORTED_MODULE_0__.itineraryWorkflow\n];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (inngestFunctions);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvaW5uZ2VzdC9mdW5jdGlvbnMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRDtBQUV6QyxNQUFNQyxtQkFBbUI7SUFBQ0QseURBQWlCQTtDQUFDLENBQUM7QUFFdkI7QUFFN0IsaUVBQWVDLGdCQUFnQkEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL3NyYy9pbm5nZXN0L2Z1bmN0aW9ucy9pbmRleC50cz84YjFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGl0aW5lcmFyeVdvcmtmbG93IH0gZnJvbSAnLi9pdGluZXJhcnknO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlubmdlc3RGdW5jdGlvbnMgPSBbaXRpbmVyYXJ5V29ya2Zsb3ddO1xyXG5cclxuZXhwb3J0IHsgaXRpbmVyYXJ5V29ya2Zsb3cgfTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGlubmdlc3RGdW5jdGlvbnM7XHJcbiJdLCJuYW1lcyI6WyJpdGluZXJhcnlXb3JrZmxvdyIsImlubmdlc3RGdW5jdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/inngest/functions/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/inngest/functions/itinerary.ts":
/*!********************************************!*\
  !*** ./src/inngest/functions/itinerary.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   functions: () => (/* binding */ functions),\n/* harmony export */   itineraryWorkflow: () => (/* binding */ itineraryWorkflow)\n/* harmony export */ });\n/* harmony import */ var _lib_vector_vectorStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/vector/vectorStore */ \"(rsc)/./src/lib/vector/vectorStore.ts\");\n/* harmony import */ var _lib_redis_stateStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/redis/stateStore */ \"(rsc)/./src/lib/redis/stateStore.ts\");\n/* harmony import */ var _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/console-logger */ \"(rsc)/./src/utils/console-logger.ts\");\n/* harmony import */ var _lib_ai_architectAI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/ai/architectAI */ \"(rsc)/./src/lib/ai/architectAI.ts\");\n/* harmony import */ var _inngest_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/inngest/client */ \"(rsc)/./src/inngest/client.ts\");\n\n\n\n\n\n/**\r\n * Itinerary generation workflow using Inngest\r\n * Orchestrates AI calls, research, logging, and Redis persistence\r\n */ const itineraryWorkflow = _inngest_client__WEBPACK_IMPORTED_MODULE_4__.inngest.createFunction({\n    id: \"itinerary.generate\",\n    name: \"Generate AI Itinerary\",\n    retries: 3\n}, {\n    event: \"itinerary.generate.requested\"\n}, async ({ event, step })=>{\n    const { formData, sessionId, workflowId } = event.data;\n    _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(14, \"INNGEST_WORKFLOW_STARTED\", \"inngest/functions/itinerary.ts\", \"itineraryWorkflow\", {\n        workflowId,\n        sessionId,\n        location: formData.location,\n        adults: formData.adults\n    });\n    // Store initial workflow state\n    await _lib_redis_stateStore__WEBPACK_IMPORTED_MODULE_1__.stateStore.storeItineraryState({\n        workflowId,\n        sessionId,\n        status: \"processing\",\n        formData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n    });\n    // Step 1: AI Itinerary Architect (Grok-4-fast-reasoning)\n    const aiArchitectResult = await step.run(\"ai-itinerary-architect\", async ()=>{\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(15, \"AI_ARCHITECT_STARTED\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n            workflowId,\n            destination: formData.location,\n            adults: formData.adults,\n            children: formData.children ?? 0\n        });\n        const prompt = (0,_lib_ai_architectAI__WEBPACK_IMPORTED_MODULE_3__.buildGrokItineraryPrompt)(formData);\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(15, \"AI_PROMPT_PREVIEW\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n            workflowId,\n            promptLength: prompt.length,\n            promptPreview: prompt.slice(0, 1200)\n        });\n        const modelName = \"grok-4-fast-reasoning\";\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(15, \"XAI_MODEL_INITIALIZED\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n            workflowId,\n            model: modelName,\n            apiKeyPresent: Boolean(process.env.XAI_API_KEY),\n            apiKeyLength: process.env.XAI_API_KEY?.length ?? 0\n        });\n        const startedAt = Date.now();\n        try {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(15, \"XAI_REQUEST_DISPATCHED\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n                workflowId,\n                model: modelName,\n                promptCharacters: prompt.length\n            });\n            const draft = await (0,_lib_ai_architectAI__WEBPACK_IMPORTED_MODULE_3__.generateGrokItineraryDraft)({\n                prompt,\n                model: modelName\n            });\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(16, \"XAI_RESPONSE_METADATA\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n                workflowId,\n                model: modelName,\n                finishReason: draft.metadata.finishReason,\n                warnings: draft.metadata.warnings,\n                usage: draft.metadata.usage,\n                responseStatus: draft.metadata.responseStatus,\n                hasResponse: typeof draft.metadata.responseStatus !== \"undefined\",\n                latencyMs: draft.metadata.latencyMs,\n                responseBodyPreview: draft.metadata.responseBodyPreview\n            });\n            if (draft.metadata.fallbackSource !== \"none\") {\n                _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(16, \"XAI_RESPONSE_FALLBACK_USED\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n                    workflowId,\n                    model: modelName,\n                    fallbackSource: draft.metadata.fallbackSource\n                });\n            }\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(16, \"AI_RESPONSE_OUTPUT\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n                aiResponse: draft.rawOutput\n            });\n            const itinerary = draft.itinerary;\n            const vectorResult = await (0,_lib_vector_vectorStore__WEBPACK_IMPORTED_MODULE_0__.storeItineraryVector)({\n                workflowId,\n                sessionId,\n                destination: formData.location,\n                rawContent: draft.cleanedJson,\n                itinerary,\n                model: modelName,\n                formData\n            });\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(16, \"AI_ARCHITECT_COMPLETED\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", {\n                workflowId,\n                durationMs: Date.now() - startedAt,\n                generatedDays: Array.isArray(itinerary?.dailyPlans) ? itinerary.dailyPlans.length : Array.isArray(itinerary?.dailyItinerary) ? itinerary.dailyItinerary.length : Array.isArray(itinerary?.days) ? itinerary.days.length : 0,\n                storedInVector: vectorResult.stored,\n                vectorIds: vectorResult.vectorIds,\n                vectorFailures: vectorResult.failures?.length ?? 0,\n                usage: draft.metadata.usage,\n                reasoningCharacters: 0\n            });\n            return {\n                itinerary,\n                rawOutput: draft.cleanedJson,\n                vectorResult,\n                model: modelName,\n                usage: draft.metadata.usage,\n                reasoning: null\n            };\n        } catch (error) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(17, \"AI_ARCHITECT_FAILED\", \"inngest/functions/itinerary.ts\", \"aiItineraryArchitect\", error instanceof Error ? error : String(error), {\n                workflowId\n            });\n            throw error;\n        }\n    });\n    // Store final result in Redis\n    await step.run(\"store-itinerary\", async ()=>{\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(20, \"REDIS_STORAGE_STARTED\", \"inngest/functions/itinerary.ts\", \"storeItinerary\", {\n            workflowId,\n            vectorCount: aiArchitectResult.vectorResult.vectorIds.length,\n            vectorFailures: aiArchitectResult.vectorResult.failures?.length ?? 0\n        });\n        const stored = await _lib_redis_stateStore__WEBPACK_IMPORTED_MODULE_1__.stateStore.storeItineraryState({\n            workflowId,\n            sessionId,\n            status: \"completed\",\n            formData,\n            itinerary: aiArchitectResult.itinerary,\n            research: {},\n            vector: aiArchitectResult.vectorResult,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        });\n        if (!stored) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn(21, \"REDIS_STORAGE_FAILED\", \"inngest/functions/itinerary.ts\", \"storeItinerary\", \"Failed to store itinerary in Redis\", {\n                workflowId\n            });\n        }\n        return {\n            stored\n        };\n    });\n    _utils_console_logger__WEBPACK_IMPORTED_MODULE_2__.logger.log(21, \"INNGEST_WORKFLOW_COMPLETED\", \"inngest/functions/itinerary.ts\", \"itineraryWorkflow\", {\n        workflowId,\n        status: \"completed\"\n    });\n    return {\n        success: true,\n        workflowId,\n        itinerary: aiArchitectResult.itinerary,\n        rawAiOutput: aiArchitectResult.rawOutput,\n        vector: aiArchitectResult.vectorResult,\n        usage: aiArchitectResult.usage,\n        reasoning: aiArchitectResult.reasoning\n    };\n});\nconst functions = [\n    itineraryWorkflow\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/inngest/functions/itinerary.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai/architectAI.ts":
/*!***********************************!*\
  !*** ./src/lib/ai/architectAI.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildGrokItineraryPrompt: () => (/* binding */ buildGrokItineraryPrompt),\n/* harmony export */   generateGrokItineraryDraft: () => (/* binding */ generateGrokItineraryDraft)\n/* harmony export */ });\n/* harmony import */ var _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/console-logger */ \"(rsc)/./src/utils/console-logger.ts\");\n\nconst GROK_MODEL = \"grok-4-fast-reasoning\";\nconst XAI_ENDPOINT = \"https://api.x.ai/v1/responses\";\nfunction buildGrokItineraryPrompt(formData) {\n    const promptLines = [];\n    const indicatorCandidate = formData.indicator;\n    const queryCandidate = formData.query;\n    const indicator = typeof indicatorCandidate === \"string\" && indicatorCandidate.trim() ? indicatorCandidate : typeof queryCandidate === \"string\" && queryCandidate.trim() ? queryCandidate : \"general\";\n    promptLines.push(\"You are Hylo's AI Itinerary Architect. Craft a detailed, actionable itinerary aligned with the indicator focus.\");\n    promptLines.push(`Indicator: ${indicator}`);\n    promptLines.push(`Destination: ${formData.location ?? \"Unknown destination\"}`);\n    if (formData.flexibleDates === true) {\n        promptLines.push(`Dates: Flexible, target ${formData.plannedDays ?? \"unspecified\"} days.`);\n    } else {\n        promptLines.push(`Dates: ${formData.departDate ?? \"unspecified\"} – ${formData.returnDate ?? \"unspecified\"}.`);\n    }\n    const adultCount = formData.adults ?? 1;\n    const childCount = formData.children ?? 0;\n    if (childCount > 0) {\n        const describeChildAge = (age)=>{\n            if (typeof age !== \"number\" || Number.isNaN(age)) {\n                return null;\n            }\n            if (age < 2) return `Infant (${age})`;\n            if (age < 5) return `Toddler (${age})`;\n            if (age < 13) return `Child (${age})`;\n            if (age < 18) return `Teen (${age})`;\n            return `Young traveler (${age})`;\n        };\n        const childAgesArray = Array.isArray(formData.childrenAges) ? formData.childrenAges : [];\n        const childAgeLabels = childAgesArray.map(describeChildAge).filter((label)=>Boolean(label));\n        const ageDetails = childAgeLabels.length > 0 ? ` Age breakdown: ${childAgeLabels.join(\", \")}.` : \"\";\n        promptLines.push(`Travel party: ${adultCount} adult(s), ${childCount} child(ren).${ageDetails} Keep pacing family-friendly with rest time, flexible dining, and safety cues.`);\n    } else {\n        promptLines.push(`Travel party: ${adultCount} adult(s). Trip is adults-only; highlight late-night, intimate, or adventurous options when appropriate.`);\n    }\n    if (formData.flexibleBudget === true) {\n        promptLines.push(\"Budget: Flexible. Offer tiered recommendations (value, mid, premium) when relevant.\");\n    } else if (typeof formData.budget === \"number\") {\n        promptLines.push(`Budget: Roughly ${formData.currency ?? \"USD\"} ${formData.budget}. Keep suggestions within range unless an upgrade is justified.`);\n    }\n    const travelStyleAnswers = formData.travelStyleAnswers ?? {};\n    const travelStyleDetails = [];\n    const appendArrayDetail = (label, value)=>{\n        if (Array.isArray(value) && value.length > 0) {\n            travelStyleDetails.push(`${label}: ${value.join(\"; \")}`);\n        }\n    };\n    appendArrayDetail(\"Experience level\", travelStyleAnswers.experience);\n    appendArrayDetail(\"Desired vibes\", travelStyleAnswers.vibes);\n    appendArrayDetail(\"Ideal day patterns\", travelStyleAnswers.sampleDays);\n    appendArrayDetail(\"Dinner preferences\", travelStyleAnswers.dinnerChoices);\n    if (Array.isArray(travelStyleAnswers.vibes) && travelStyleAnswers.vibes.includes(\"other\") && travelStyleAnswers.vibesOther) {\n        const vibesIndex = travelStyleDetails.findIndex((item)=>item.startsWith(\"Desired vibes:\"));\n        if (vibesIndex !== -1) {\n            travelStyleDetails[vibesIndex] = travelStyleDetails[vibesIndex].replace(\"other\", travelStyleAnswers.vibesOther.trim());\n        }\n    }\n    if (typeof travelStyleAnswers.customVibesText === \"string\" && travelStyleAnswers.customVibesText.trim()) {\n        travelStyleDetails.push(`Custom vibe notes: ${travelStyleAnswers.customVibesText.trim()}`);\n    }\n    if (typeof travelStyleAnswers.otherDinnerChoiceText === \"string\" && travelStyleAnswers.otherDinnerChoiceText.trim()) {\n        travelStyleDetails.push(`Custom dining notes: ${travelStyleAnswers.otherDinnerChoiceText.trim()}`);\n    }\n    if (travelStyleDetails.length > 0) {\n        promptLines.push(\"Detailed travel style signals:\\n\" + travelStyleDetails.map((item)=>`- ${item}`).join(\"\\n\"));\n    } else if (formData.travelStyleChoice === \"answer-questions\") {\n        promptLines.push(\"Detailed travel style questionnaire submitted without specific selections; infer from other context.\");\n    } else if (formData.travelStyleChoice === \"skip-to-details\") {\n        promptLines.push(\"Traveler skipped the style questionnaire. Infer tone from core preferences, interests, and inclusions.\");\n    }\n    if (Array.isArray(formData.selectedGroups) && formData.selectedGroups.length > 0) {\n        let groupsText = formData.selectedGroups.join(\", \");\n        if (formData.selectedGroups.includes(\"other\") && formData.customGroupText) {\n            groupsText = groupsText.replace(\"other\", formData.customGroupText.trim());\n        }\n        promptLines.push(`Travel group: ${groupsText}.`);\n    }\n    if (Array.isArray(formData.selectedInterests) && formData.selectedInterests.length > 0) {\n        let interestsText = formData.selectedInterests.join(\", \");\n        if (formData.selectedInterests.includes(\"other\") && formData.customInterestsText) {\n            interestsText = interestsText.replace(\"other\", formData.customInterestsText.trim());\n        }\n        promptLines.push(`Key interests: ${interestsText}.`);\n    }\n    if (Array.isArray(formData.selectedInclusions) && formData.selectedInclusions.length > 0) {\n        promptLines.push(\"Must-have inclusions:\");\n        formData.selectedInclusions.forEach((inclusion)=>{\n            if (typeof inclusion === \"string\" && inclusion.trim()) {\n                let inclusionText = inclusion.trim();\n                if (inclusionText === \"other\" && formData.customInclusionsText) {\n                    inclusionText = formData.customInclusionsText.trim();\n                }\n                promptLines.push(`- Ensure planning covers: ${inclusionText}`);\n            }\n        });\n    }\n    if (typeof formData.tripNickname === \"string\" && formData.tripNickname.trim()) {\n        promptLines.push(`Trip nickname: ${formData.tripNickname.trim()}. Use this nickname in the intro.`);\n    }\n    if (typeof formData.tripVibe === \"string\" && formData.tripVibe.trim()) {\n        promptLines.push(`Primary vibe: ${formData.tripVibe.trim()}. Reinforce this tone throughout.`);\n    }\n    if (formData.diningPreferences) {\n        promptLines.push(`Dining preferences: ${JSON.stringify(formData.diningPreferences)}.`);\n    }\n    if (formData.sampleDays) {\n        promptLines.push(`Ideal day structure: ${JSON.stringify(formData.sampleDays)}.`);\n    }\n    if (typeof formData.additionalNotes === \"string\" && formData.additionalNotes.trim()) {\n        promptLines.push(`Traveler notes: ${formData.additionalNotes.trim()}`);\n    }\n    promptLines.push(\"Execution requirements:\");\n    promptLines.push(\"- Produce an intro paragraph that feels concierge-written, 2-3 sentences.\");\n    promptLines.push(\"- Build `dailyPlans` array with one entry per day, preserving date order.\");\n    promptLines.push(\"- Each day must include morning, afternoon, evening anchors and a signature highlight.\");\n    promptLines.push(\"- If transportation is required, include `transportation` notes with time estimates.\");\n    promptLines.push(\"- Add `dining` suggestions that match the traveler vibe and any dietary notes.\");\n    promptLines.push(\"- Reference the trip nickname if provided.\");\n    promptLines.push(\"- End with `keyTakeaways` summarizing highlights and `nextSteps` for concierge actions.\");\n    promptLines.push(\"Output requirements: Respond with a single JSON object containing `dailyPlans` where each entry represents one day. Each day should include activities, meals, and transportation details.\");\n    promptLines.push(`Form data JSON:\\n${JSON.stringify(formData, null, 2)}`);\n    return promptLines.join(\"\\n\\n\");\n}\nasync function generateGrokItineraryDraft({ prompt, model = GROK_MODEL, maxTokens = 4000, temperature = 0.4 }) {\n    if (!process.env.XAI_API_KEY) {\n        throw new Error(\"XAI_API_KEY is not configured.\");\n    }\n    const startedAt = Date.now();\n    const response = await fetch(XAI_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${process.env.XAI_API_KEY}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            model,\n            input: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            max_output_tokens: maxTokens,\n            temperature\n        })\n    });\n    const responseStatus = response.status;\n    const responseBody = await response.text();\n    if (!response.ok) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(17, \"XAI_REQUEST_FAILED\", \"lib/ai/architectAI.ts\", \"generateGrokItineraryDraft\", responseBody, {\n            responseStatus\n        });\n        throw new Error(`xAI request failed (${responseStatus})`);\n    }\n    let parsedResponse;\n    try {\n        parsedResponse = responseBody ? JSON.parse(responseBody) : {};\n    } catch (error) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(17, \"XAI_INVALID_JSON\", \"lib/ai/architectAI.ts\", \"generateGrokItineraryDraft\", \"Failed to parse xAI JSON response\", {\n            responseStatus,\n            responseBodyPreview: responseBody.slice(0, 600)\n        });\n        throw new Error(\"Failed to parse xAI JSON response\");\n    }\n    const { text: resolvedText, fallbackSource } = resolveXaiText(parsedResponse);\n    _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(16, \"XAI_RAW_RESULT\", \"lib/ai/architectAI.ts\", \"generateGrokItineraryDraft\", {\n        finishReason: extractFinishReason(parsedResponse),\n        warnings: parsedResponse?.warnings,\n        usage: parsedResponse?.usage,\n        hasText: Boolean(resolvedText?.trim?.()),\n        responseKeys: parsedResponse ? Object.keys(parsedResponse) : null\n    });\n    if (!resolvedText || !resolvedText.trim()) {\n        if (parsedResponse?.error?.message) {\n            throw new Error(`xAI error: ${parsedResponse.error.message}`);\n        }\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(17, \"XAI_EMPTY_RESPONSE\", \"lib/ai/architectAI.ts\", \"generateGrokItineraryDraft\", \"xAI returned empty text after parsing\", {\n            responseStatus,\n            responseBodyPreview: responseBody.slice(0, 600),\n            parsedKeys: parsedResponse ? Object.keys(parsedResponse) : null\n        });\n        throw new Error(\"xAI returned empty text\");\n    }\n    const cleanedJson = extractJsonBlock(resolvedText);\n    let itinerary;\n    try {\n        itinerary = JSON.parse(cleanedJson);\n    } catch (error) {\n        throw new Error(\"Failed to parse Grok itinerary JSON\");\n    }\n    return {\n        rawOutput: resolvedText,\n        cleanedJson,\n        itinerary,\n        metadata: {\n            model,\n            latencyMs: Date.now() - startedAt,\n            finishReason: extractFinishReason(parsedResponse),\n            usage: mapUsage(parsedResponse?.usage),\n            warnings: parsedResponse?.warnings,\n            responseStatus,\n            responseBodyPreview: responseBody.slice(0, 600),\n            fallbackSource\n        }\n    };\n}\nfunction resolveXaiText(payload) {\n    if (!payload) {\n        return {\n            text: null,\n            fallbackSource: \"none\"\n        };\n    }\n    const outputs = payload.output ?? payload.outputs;\n    if (Array.isArray(outputs)) {\n        const parts = [];\n        for (const item of outputs){\n            const content = item?.content ?? item?.contents;\n            if (Array.isArray(content)) {\n                for (const entry of content){\n                    if (typeof entry?.text === \"string\" && entry.text.trim()) {\n                        parts.push(entry.text.trim());\n                    }\n                }\n            } else if (typeof content?.text === \"string\" && content.text.trim()) {\n                parts.push(content.text.trim());\n            }\n        }\n        if (parts.length > 0) {\n            return {\n                text: parts.join(\"\\n\\n\"),\n                fallbackSource: \"none\"\n            };\n        }\n    }\n    const choicesContent = payload?.choices?.[0]?.message?.content;\n    const coercedChoice = coerceToString(choicesContent);\n    if (coercedChoice) {\n        return {\n            text: coercedChoice,\n            fallbackSource: \"parsed-content\"\n        };\n    }\n    const toolArguments = payload?.choices?.[0]?.message?.tool_calls?.[0]?.function?.arguments;\n    if (typeof toolArguments === \"string\" && toolArguments.trim()) {\n        return {\n            text: toolArguments,\n            fallbackSource: \"tool-call\"\n        };\n    }\n    if (toolArguments && typeof toolArguments === \"object\") {\n        const serialized = JSON.stringify(toolArguments);\n        if (serialized.trim()) {\n            return {\n                text: serialized,\n                fallbackSource: \"tool-call\"\n            };\n        }\n    }\n    const reasoningContent = payload?.choices?.[0]?.message?.reasoning_content;\n    const coercedReasoning = coerceToString(reasoningContent);\n    if (coercedReasoning) {\n        return {\n            text: coercedReasoning,\n            fallbackSource: \"reasoning\"\n        };\n    }\n    const outputText = payload?.response?.output_text ?? payload?.text;\n    if (typeof outputText === \"string\" && outputText.trim()) {\n        return {\n            text: outputText.trim(),\n            fallbackSource: \"parsed-content\"\n        };\n    }\n    const fallbackText = coerceToString(payload);\n    if (fallbackText) {\n        return {\n            text: fallbackText,\n            fallbackSource: \"parsed-content\"\n        };\n    }\n    return {\n        text: null,\n        fallbackSource: \"none\"\n    };\n}\nfunction coerceToString(input) {\n    if (!input) {\n        return null;\n    }\n    if (typeof input === \"string\") {\n        const trimmed = input.trim();\n        return trimmed ? trimmed : null;\n    }\n    if (Array.isArray(input)) {\n        const parts = input.map((item)=>coerceToString(item)).filter((part)=>Boolean(part));\n        if (parts.length > 0) {\n            return parts.join(\" \").trim();\n        }\n        return null;\n    }\n    if (typeof input === \"object\") {\n        if (input === null) {\n            return null;\n        }\n        if (typeof input.text === \"string\") {\n            return input.text.trim() || null;\n        }\n        if (typeof input.content === \"string\") {\n            return input.content.trim() || null;\n        }\n        try {\n            const serialized = JSON.stringify(input);\n            return serialized.trim() ? serialized : null;\n        } catch  {\n            return null;\n        }\n    }\n    return null;\n}\nfunction extractFinishReason(payload) {\n    return payload?.output?.[0]?.finish_reason ?? payload?.output?.[0]?.stopReason ?? payload?.finish_reason ?? payload?.finishReason;\n}\nfunction mapUsage(usage) {\n    if (!usage || typeof usage !== \"object\") {\n        return undefined;\n    }\n    const mapped = {};\n    if (typeof usage.input_tokens === \"number\") {\n        mapped.promptTokens = usage.input_tokens;\n    }\n    if (typeof usage.output_tokens === \"number\") {\n        mapped.completionTokens = usage.output_tokens;\n    }\n    if (typeof usage.total_tokens === \"number\") {\n        mapped.totalTokens = usage.total_tokens;\n    }\n    if (Object.keys(mapped).length === 0) {\n        return undefined;\n    }\n    return mapped;\n}\nfunction extractJsonBlock(raw) {\n    if (!raw || !raw.trim()) {\n        throw new Error(\"AI response was empty\");\n    }\n    const codeBlockMatch = raw.match(/```json([\\s\\S]*?)```/i) || raw.match(/```([\\s\\S]*?)```/i);\n    const candidate = codeBlockMatch ? codeBlockMatch[1] : raw;\n    const startCandidates = [\n        candidate.indexOf(\"{\"),\n        candidate.indexOf(\"[\")\n    ].filter((index)=>index >= 0);\n    const endCandidates = [\n        candidate.lastIndexOf(\"}\"),\n        candidate.lastIndexOf(\"]\")\n    ].filter((index)=>index >= 0);\n    if (startCandidates.length === 0 || endCandidates.length === 0) {\n        throw new Error(\"Unable to locate JSON payload in AI response\");\n    }\n    const startIndex = Math.min(...startCandidates);\n    const endIndex = Math.max(...endCandidates);\n    if (!Number.isFinite(startIndex) || !Number.isFinite(endIndex) || startIndex < 0 || endIndex < startIndex) {\n        throw new Error(\"Unable to locate JSON payload in AI response\");\n    }\n    return candidate.slice(startIndex, endIndex + 1).trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai/architectAI.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/ai/jinaEmbeddings.ts":
/*!**************************************!*\
  !*** ./src/lib/ai/jinaEmbeddings.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateJinaEmbeddings: () => (/* binding */ generateJinaEmbeddings)\n/* harmony export */ });\nconst JINA_ENDPOINT = \"https://api.jina.ai/v1/embeddings\";\nasync function generateJinaEmbeddings(inputs, { model = \"jina-embeddings-v3\", task = \"text-matching\", inputType = \"text\" } = {}) {\n    if (!inputs || inputs.length === 0) {\n        throw new Error(\"Jina embeddings require at least one input string.\");\n    }\n    const apiKey = process.env.JINA_API_KEY;\n    if (!apiKey) {\n        throw new Error(\"JINA_API_KEY is not configured.\");\n    }\n    const body = {\n        model,\n        task,\n        input_type: inputType,\n        input: inputs\n    };\n    const response = await fetch(JINA_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${apiKey}`\n        },\n        body: JSON.stringify(body)\n    });\n    const responseText = await response.text();\n    if (!response.ok) {\n        throw new Error(`Jina embeddings request failed (${response.status}): ${responseText}`);\n    }\n    let parsed;\n    try {\n        parsed = responseText ? JSON.parse(responseText) : {};\n    } catch (error) {\n        throw new Error(\"Failed to parse Jina embeddings response.\");\n    }\n    const data = Array.isArray(parsed?.data) ? parsed.data : [];\n    if (data.length === 0 || !Array.isArray(data[0]?.embedding)) {\n        throw new Error(\"Jina embeddings response missing embedding vector.\");\n    }\n    return {\n        embeddings: data.map((entry)=>entry.embedding),\n        usage: parsed?.usage,\n        model: parsed?.model ?? model\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2FpL2ppbmFFbWJlZGRpbmdzLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxnQkFBZ0I7QUFrQmYsZUFBZUMsdUJBQ3BCQyxNQUFnQixFQUNoQixFQUFFQyxRQUFRLG9CQUFvQixFQUFFQyxPQUFPLGVBQWUsRUFBRUMsWUFBWSxNQUFNLEVBQXdCLEdBQUcsQ0FBQyxDQUFDO0lBRXZHLElBQUksQ0FBQ0gsVUFBVUEsT0FBT0ksTUFBTSxLQUFLLEdBQUc7UUFDbEMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBRUEsTUFBTUMsU0FBU0MsUUFBUUMsR0FBRyxDQUFDQyxZQUFZO0lBQ3ZDLElBQUksQ0FBQ0gsUUFBUTtRQUNYLE1BQU0sSUFBSUQsTUFBTTtJQUNsQjtJQUVBLE1BQU1LLE9BQU87UUFDWFQ7UUFDQUM7UUFDQVMsWUFBWVI7UUFDWlMsT0FBT1o7SUFDVDtJQUVBLE1BQU1hLFdBQVcsTUFBTUMsTUFBTWhCLGVBQWU7UUFDMUNpQixRQUFRO1FBQ1JDLFNBQVM7WUFDUCxnQkFBZ0I7WUFDaEJDLGVBQWUsQ0FBQyxPQUFPLEVBQUVYLE9BQU8sQ0FBQztRQUNuQztRQUNBSSxNQUFNUSxLQUFLQyxTQUFTLENBQUNUO0lBQ3ZCO0lBRUEsTUFBTVUsZUFBZSxNQUFNUCxTQUFTUSxJQUFJO0lBQ3hDLElBQUksQ0FBQ1IsU0FBU1MsRUFBRSxFQUFFO1FBQ2hCLE1BQU0sSUFBSWpCLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRVEsU0FBU1UsTUFBTSxDQUFDLEdBQUcsRUFBRUgsYUFBYSxDQUFDO0lBQ3hGO0lBRUEsSUFBSUk7SUFDSixJQUFJO1FBQ0ZBLFNBQVNKLGVBQWVGLEtBQUtPLEtBQUssQ0FBQ0wsZ0JBQWdCLENBQUM7SUFDdEQsRUFBRSxPQUFPTSxPQUFPO1FBQ2QsTUFBTSxJQUFJckIsTUFBTTtJQUNsQjtJQUVBLE1BQU1zQixPQUFPQyxNQUFNQyxPQUFPLENBQUNMLFFBQVFHLFFBQVFILE9BQU9HLElBQUksR0FBRyxFQUFFO0lBQzNELElBQUlBLEtBQUt2QixNQUFNLEtBQUssS0FBSyxDQUFDd0IsTUFBTUMsT0FBTyxDQUFDRixJQUFJLENBQUMsRUFBRSxFQUFFRyxZQUFZO1FBQzNELE1BQU0sSUFBSXpCLE1BQU07SUFDbEI7SUFFQSxPQUFPO1FBQ0wwQixZQUFZSixLQUFLSyxHQUFHLENBQUMsQ0FBQ0MsUUFBZUEsTUFBTUgsU0FBUztRQUNwREksT0FBT1YsUUFBUVU7UUFDZmpDLE9BQU91QixRQUFRdkIsU0FBU0E7SUFDMUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL3NyYy9saWIvYWkvamluYUVtYmVkZGluZ3MudHM/YTM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBKSU5BX0VORFBPSU5UID0gJ2h0dHBzOi8vYXBpLmppbmEuYWkvdjEvZW1iZWRkaW5ncyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEppbmFFbWJlZGRpbmdPcHRpb25zIHtcclxuICBtb2RlbD86IHN0cmluZztcclxuICB0YXNrPzogJ3RleHQtc2VhcmNoJyB8ICd0ZXh0LW1hdGNoaW5nJyB8ICdjbHVzdGVyaW5nJyB8ICdjbGFzc2lmaWNhdGlvbic7XHJcbiAgaW5wdXRUeXBlPzogJ3NlYXJjaF9kb2N1bWVudCcgfCAnc2VhcmNoX3F1ZXJ5JyB8ICd0ZXh0JztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKaW5hRW1iZWRkaW5nUmVzcG9uc2Uge1xyXG4gIGVtYmVkZGluZ3M6IG51bWJlcltdW107XHJcbiAgdXNhZ2U/OiB7XHJcbiAgICB0b3RhbFRva2Vucz86IG51bWJlcjtcclxuICAgIHByb21wdFRva2Vucz86IG51bWJlcjtcclxuICAgIGVtYmVkZGluZ1Rva2Vucz86IG51bWJlcjtcclxuICB9O1xyXG4gIG1vZGVsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUppbmFFbWJlZGRpbmdzKFxyXG4gIGlucHV0czogc3RyaW5nW10sXHJcbiAgeyBtb2RlbCA9ICdqaW5hLWVtYmVkZGluZ3MtdjMnLCB0YXNrID0gJ3RleHQtbWF0Y2hpbmcnLCBpbnB1dFR5cGUgPSAndGV4dCcgfTogSmluYUVtYmVkZGluZ09wdGlvbnMgPSB7fSxcclxuKTogUHJvbWlzZTxKaW5hRW1iZWRkaW5nUmVzcG9uc2U+IHtcclxuICBpZiAoIWlucHV0cyB8fCBpbnB1dHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ppbmEgZW1iZWRkaW5ncyByZXF1aXJlIGF0IGxlYXN0IG9uZSBpbnB1dCBzdHJpbmcuJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBhcGlLZXkgPSBwcm9jZXNzLmVudi5KSU5BX0FQSV9LRVk7XHJcbiAgaWYgKCFhcGlLZXkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignSklOQV9BUElfS0VZIGlzIG5vdCBjb25maWd1cmVkLicpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYm9keSA9IHtcclxuICAgIG1vZGVsLFxyXG4gICAgdGFzayxcclxuICAgIGlucHV0X3R5cGU6IGlucHV0VHlwZSxcclxuICAgIGlucHV0OiBpbnB1dHMsXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChKSU5BX0VORFBPSU5ULCB7XHJcbiAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgIGhlYWRlcnM6IHtcclxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2FwaUtleX1gLFxyXG4gICAgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBKaW5hIGVtYmVkZGluZ3MgcmVxdWVzdCBmYWlsZWQgKCR7cmVzcG9uc2Uuc3RhdHVzfSk6ICR7cmVzcG9uc2VUZXh0fWApO1xyXG4gIH1cclxuXHJcbiAgbGV0IHBhcnNlZDogYW55O1xyXG4gIHRyeSB7XHJcbiAgICBwYXJzZWQgPSByZXNwb25zZVRleHQgPyBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCkgOiB7fTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcGFyc2UgSmluYSBlbWJlZGRpbmdzIHJlc3BvbnNlLicpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZGF0YSA9IEFycmF5LmlzQXJyYXkocGFyc2VkPy5kYXRhKSA/IHBhcnNlZC5kYXRhIDogW107XHJcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwIHx8ICFBcnJheS5pc0FycmF5KGRhdGFbMF0/LmVtYmVkZGluZykpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignSmluYSBlbWJlZGRpbmdzIHJlc3BvbnNlIG1pc3NpbmcgZW1iZWRkaW5nIHZlY3Rvci4nKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBlbWJlZGRpbmdzOiBkYXRhLm1hcCgoZW50cnk6IGFueSkgPT4gZW50cnkuZW1iZWRkaW5nIGFzIG51bWJlcltdKSxcclxuICAgIHVzYWdlOiBwYXJzZWQ/LnVzYWdlLFxyXG4gICAgbW9kZWw6IHBhcnNlZD8ubW9kZWwgPz8gbW9kZWwsXHJcbiAgfTtcclxufVxyXG4iXSwibmFtZXMiOlsiSklOQV9FTkRQT0lOVCIsImdlbmVyYXRlSmluYUVtYmVkZGluZ3MiLCJpbnB1dHMiLCJtb2RlbCIsInRhc2siLCJpbnB1dFR5cGUiLCJsZW5ndGgiLCJFcnJvciIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJKSU5BX0FQSV9LRVkiLCJib2R5IiwiaW5wdXRfdHlwZSIsImlucHV0IiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlVGV4dCIsInRleHQiLCJvayIsInN0YXR1cyIsInBhcnNlZCIsInBhcnNlIiwiZXJyb3IiLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwiZW1iZWRkaW5nIiwiZW1iZWRkaW5ncyIsIm1hcCIsImVudHJ5IiwidXNhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/ai/jinaEmbeddings.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/config/itinerary-config.ts":
/*!********************************************!*\
  !*** ./src/lib/config/itinerary-config.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getItineraryConfig: () => (/* binding */ getItineraryConfig),\n/* harmony export */   resetItineraryConfig: () => (/* binding */ resetItineraryConfig)\n/* harmony export */ });\n/* harmony import */ var _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/console-logger */ \"(rsc)/./src/utils/console-logger.ts\");\n\n/**\r\n * Validates that all required environment variables are present (logs warnings for missing ones)\r\n */ function validateRequiredEnvVars() {\n    const requiredVars = [\n        \"GROQ_API_KEY\",\n        \"XAI_API_KEY\",\n        \"TAVILY_API_KEY\",\n        \"EXA_API_KEY\",\n        \"SERP_API_KEY\",\n        \"INNGEST_EVENT_KEY\",\n        \"INNGEST_SIGNING_KEY\",\n        \"UPSTASH_REDIS_REST_URL\",\n        \"UPSTASH_REDIS_REST_TOKEN\"\n    ];\n    const missingVars = requiredVars.filter((varName)=>!process.env[varName]);\n    if (missingVars.length > 0) {\n        const warningMessage = `Missing environment variables (using fallbacks): ${missingVars.join(\", \")}`;\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(23, \"Configuration validation failed\", \"itinerary-config.ts\", \"validateRequiredEnvVars\", warningMessage);\n    // Don't throw error, just log warning - we'll use fallbacks\n    } else {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(23, \"Required environment variables validated\", \"itinerary-config.ts\", \"validateRequiredEnvVars\");\n    }\n}\n/**\r\n * Parses and validates NODE_ENV\r\n */ function parseNodeEnv(env) {\n    const validEnvs = [\n        \"development\",\n        \"preview\",\n        \"production\"\n    ];\n    const defaultEnv = \"development\";\n    if (!env || !validEnvs.includes(env)) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(23, \"Invalid NODE_ENV, using default\", \"itinerary-config.ts\", \"parseNodeEnv\", `Invalid value: ${env}, using: ${defaultEnv}`);\n        return defaultEnv;\n    }\n    return env;\n}\n/**\r\n * Parses and validates log level\r\n */ function parseLogLevel(level) {\n    const validLevels = [\n        \"silent\",\n        \"error\",\n        \"warn\",\n        \"info\",\n        \"debug\"\n    ];\n    const defaultLevel = \"info\";\n    if (!level || !validLevels.includes(level)) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(23, \"Invalid ITINERARY_LOG_LEVEL, using default\", \"itinerary-config.ts\", \"parseLogLevel\", `Invalid value: ${level}, using: ${defaultLevel}`);\n        return defaultLevel;\n    }\n    return level;\n}\n/**\r\n * Parses cache TTL minutes with validation\r\n */ function parseCacheTtl(ttl) {\n    const defaultTtl = 120;\n    const minTtl = 5;\n    const maxTtl = 1440; // 24 hours\n    if (!ttl) {\n        return defaultTtl;\n    }\n    const parsed = parseInt(ttl, 10);\n    if (isNaN(parsed) || parsed < minTtl || parsed > maxTtl) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(23, \"Invalid ITINERARY_CACHE_TTL_MINUTES, using default\", \"itinerary-config.ts\", \"parseCacheTtl\", `Invalid value: ${ttl}, using: ${defaultTtl}`);\n        return defaultTtl;\n    }\n    return parsed;\n}\n/**\r\n * Parses maps fallback mode\r\n */ function parseMapsFallbackMode(mode) {\n    const validModes = [\n        \"static\",\n        \"placeholder\",\n        \"hidden\"\n    ];\n    const defaultMode = \"static\";\n    if (!mode || !validModes.includes(mode)) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(23, \"Invalid maps fallback mode, using default\", \"itinerary-config.ts\", \"parseMapsFallbackMode\", `Invalid value: ${mode}, using: ${defaultMode}`);\n        return defaultMode;\n    }\n    return mode;\n}\n/**\r\n * Singleton configuration instance\r\n */ let configInstance = null;\n/**\r\n * Gets the itinerary configuration, loading from environment variables on first access\r\n */ function getItineraryConfig() {\n    if (configInstance) {\n        return configInstance;\n    }\n    try {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(23, \"Loading itinerary configuration\", \"itinerary-config.ts\", \"getItineraryConfig\");\n        // Validate required environment variables\n        validateRequiredEnvVars();\n        // Build configuration object\n        configInstance = {\n            groq: {\n                apiKey: process.env.GROQ_API_KEY\n            },\n            xai: {\n                apiKey: process.env.XAI_API_KEY\n            },\n            tavily: {\n                apiKey: process.env.TAVILY_API_KEY\n            },\n            exa: {\n                apiKey: process.env.EXA_API_KEY\n            },\n            serp: {\n                apiKey: process.env.SERP_API_KEY\n            },\n            inngest: {\n                eventKey: process.env.INNGEST_EVENT_KEY,\n                signingKey: process.env.INNGEST_SIGNING_KEY\n            },\n            redis: {\n                restUrl: process.env.UPSTASH_REDIS_REST_URL,\n                restToken: process.env.UPSTASH_REDIS_REST_TOKEN\n            },\n            app: {\n                nodeEnv: parseNodeEnv(\"development\"),\n                logLevel: parseLogLevel(process.env.ITINERARY_LOG_LEVEL),\n                cacheTtlMinutes: parseCacheTtl(process.env.ITINERARY_CACHE_TTL_MINUTES)\n            },\n            flags: {\n                enableDetailedLogging: true,\n                enableDataCleansing: true,\n                allowPdfExport: true,\n                allowEmailDraft: true,\n                mapsFallbackMode: parseMapsFallbackMode(process.env.ITINERARY_MAPS_FALLBACK_MODE)\n            }\n        };\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(23, \"Itinerary configuration loaded successfully\", \"itinerary-config.ts\", \"getItineraryConfig\", {\n            nodeEnv: configInstance.app.nodeEnv,\n            logLevel: configInstance.app.logLevel,\n            cacheTtlMinutes: configInstance.app.cacheTtlMinutes,\n            mapsFallbackMode: configInstance.flags.mapsFallbackMode\n        });\n        return configInstance;\n    } catch (error) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(23, \"Failed to load itinerary configuration\", \"itinerary-config.ts\", \"getItineraryConfig\", error instanceof Error ? error : String(error));\n        throw error;\n    }\n}\n/**\r\n * Resets the configuration instance (useful for testing)\r\n */ function resetItineraryConfig() {\n    configInstance = null;\n    _utils_console_logger__WEBPACK_IMPORTED_MODULE_0__.logger.log(23, \"Itinerary configuration reset\", \"itinerary-config.ts\", \"resetItineraryConfig\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/config/itinerary-config.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/redis/stateStore.ts":
/*!*************************************!*\
  !*** ./src/lib/redis/stateStore.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stateStore: () => (/* binding */ stateStore)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.mjs\");\n/* harmony import */ var _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/console-logger */ \"(rsc)/./src/utils/console-logger.ts\");\n/* harmony import */ var _lib_config_itinerary_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/config/itinerary-config */ \"(rsc)/./src/lib/config/itinerary-config.ts\");\n\n\n\nclass StateStore {\n    redis = null;\n    initialized = false;\n    constructor(){\n        this.initialize();\n    }\n    initialize() {\n        try {\n            const config = (0,_lib_config_itinerary_config__WEBPACK_IMPORTED_MODULE_2__.getItineraryConfig)();\n            if (!config.redis.restUrl || !config.redis.restToken) {\n                _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(0, \"REDIS_CONFIG_MISSING\", \"stateStore.ts\", \"initialize\", \"Redis configuration incomplete, using mock mode\", {\n                    hasRestUrl: !!config.redis.restUrl,\n                    hasRestToken: !!config.redis.restToken\n                });\n                return;\n            }\n            this.redis = new _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis({\n                url: config.redis.restUrl,\n                token: config.redis.restToken\n            });\n            this.initialized = true;\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(0, \"REDIS_CLIENT_INITIALIZED\", \"stateStore.ts\", \"initialize\", {\n                restUrlConfigured: !!config.redis.restUrl\n            });\n        } catch (error) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(0, \"REDIS_INITIALIZATION_FAILED\", \"stateStore.ts\", \"initialize\", error instanceof Error ? error : String(error));\n        }\n    }\n    /**\r\n   * Store itinerary state in Redis\r\n   */ async storeItineraryState(state) {\n        if (!this.initialized || !this.redis) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(101, \"REDIS_NOT_INITIALIZED\", \"stateStore.ts\", \"storeItineraryState\", \"Redis not available, skipping storage\", {\n                workflowId: state.workflowId\n            });\n            return false;\n        }\n        const key = `itinerary:${state.workflowId}`;\n        const startedAt = Date.now();\n        try {\n            await this.redis.set(key, JSON.stringify({\n                ...state,\n                updatedAt: new Date().toISOString()\n            }));\n            // Set TTL for completed/error states (7 days), processing states (1 day)\n            const ttlSeconds = state.status === \"completed\" || state.status === \"error\" ? 604800 : 86400;\n            await this.redis.expire(key, ttlSeconds);\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(102, \"ITINERARY_STATE_STORED\", \"stateStore.ts\", \"storeItineraryState\", {\n                workflowId: state.workflowId,\n                status: state.status,\n                durationMs: Date.now() - startedAt,\n                ttlSeconds\n            });\n            return true;\n        } catch (error) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(103, \"ITINERARY_STATE_STORE_FAILED\", \"stateStore.ts\", \"storeItineraryState\", error instanceof Error ? error : String(error), {\n                workflowId: state.workflowId,\n                status: state.status\n            });\n            return false;\n        }\n    }\n    /**\r\n   * Retrieve itinerary state from Redis\r\n   */ async getItineraryState(workflowId) {\n        if (!this.initialized || !this.redis) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(104, \"REDIS_NOT_INITIALIZED\", \"stateStore.ts\", \"getItineraryState\", \"Redis not available, returning null\", {\n                workflowId\n            });\n            return null;\n        }\n        const key = `itinerary:${workflowId}`;\n        const startedAt = Date.now();\n        try {\n            const data = await this.redis.get(key);\n            if (!data) {\n                _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(105, \"ITINERARY_STATE_NOT_FOUND\", \"stateStore.ts\", \"getItineraryState\", {\n                    workflowId,\n                    durationMs: Date.now() - startedAt\n                });\n                return null;\n            }\n            const state = JSON.parse(data);\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(106, \"ITINERARY_STATE_RETRIEVED\", \"stateStore.ts\", \"getItineraryState\", {\n                workflowId,\n                status: state.status,\n                durationMs: Date.now() - startedAt\n            });\n            return state;\n        } catch (error) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(107, \"ITINERARY_STATE_RETRIEVE_FAILED\", \"stateStore.ts\", \"getItineraryState\", error instanceof Error ? error : String(error), {\n                workflowId\n            });\n            return null;\n        }\n    }\n    /**\r\n   * Update itinerary status\r\n   */ async updateItineraryStatus(workflowId, status, error) {\n        const existingState = await this.getItineraryState(workflowId);\n        if (!existingState) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(108, \"ITINERARY_STATE_UPDATE_FAILED_NO_EXISTING\", \"stateStore.ts\", \"updateItineraryStatus\", \"No existing state found\", {\n                workflowId,\n                newStatus: status\n            });\n            return false;\n        }\n        const updatedState = {\n            ...existingState,\n            status,\n            ...error && {\n                error\n            },\n            updatedAt: new Date().toISOString()\n        };\n        return this.storeItineraryState(updatedState);\n    }\n    /**\r\n   * Cache data with TTL\r\n   */ async setCache(key, data, ttlMinutes = 60) {\n        if (!this.initialized || !this.redis) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(109, \"REDIS_NOT_INITIALIZED\", \"stateStore.ts\", \"setCache\", \"Redis not available, skipping cache\", {\n                key,\n                ttlMinutes\n            });\n            return false;\n        }\n        const cacheKey = `cache:${key}`;\n        const startedAt = Date.now();\n        try {\n            const entry = {\n                data,\n                expiresAt: Date.now() + ttlMinutes * 60 * 1000,\n                createdAt: new Date().toISOString()\n            };\n            await this.redis.set(cacheKey, JSON.stringify(entry));\n            await this.redis.expire(cacheKey, ttlMinutes * 60);\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(110, \"CACHE_ENTRY_STORED\", \"stateStore.ts\", \"setCache\", {\n                key,\n                ttlMinutes,\n                durationMs: Date.now() - startedAt\n            });\n            return true;\n        } catch (error) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(111, \"CACHE_STORE_FAILED\", \"stateStore.ts\", \"setCache\", error instanceof Error ? error : String(error), {\n                key,\n                ttlMinutes\n            });\n            return false;\n        }\n    }\n    /**\r\n   * Get cached data\r\n   */ async getCache(key) {\n        if (!this.initialized || !this.redis) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(112, \"REDIS_NOT_INITIALIZED\", \"stateStore.ts\", \"getCache\", \"Redis not available, returning null\", {\n                key\n            });\n            return null;\n        }\n        const cacheKey = `cache:${key}`;\n        const startedAt = Date.now();\n        try {\n            const data = await this.redis.get(cacheKey);\n            if (!data) {\n                _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(113, \"CACHE_MISS\", \"stateStore.ts\", \"getCache\", {\n                    key,\n                    durationMs: Date.now() - startedAt\n                });\n                return null;\n            }\n            const entry = JSON.parse(data);\n            // Check if expired\n            if (Date.now() > entry.expiresAt) {\n                _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(114, \"CACHE_EXPIRED\", \"stateStore.ts\", \"getCache\", {\n                    key,\n                    durationMs: Date.now() - startedAt\n                });\n                await this.redis.del(cacheKey);\n                return null;\n            }\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(115, \"CACHE_HIT\", \"stateStore.ts\", \"getCache\", {\n                key,\n                durationMs: Date.now() - startedAt\n            });\n            return entry.data;\n        } catch (error) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(116, \"CACHE_RETRIEVE_FAILED\", \"stateStore.ts\", \"getCache\", error instanceof Error ? error : String(error), {\n                key\n            });\n            return null;\n        }\n    }\n    /**\r\n   * Delete cached data\r\n   */ async deleteCache(key) {\n        if (!this.initialized || !this.redis) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(117, \"REDIS_NOT_INITIALIZED\", \"stateStore.ts\", \"deleteCache\", \"Redis not available, skipping delete\", {\n                key\n            });\n            return false;\n        }\n        const cacheKey = `cache:${key}`;\n        const startedAt = Date.now();\n        try {\n            await this.redis.del(cacheKey);\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(118, \"CACHE_DELETED\", \"stateStore.ts\", \"deleteCache\", {\n                key,\n                durationMs: Date.now() - startedAt\n            });\n            return true;\n        } catch (error) {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(119, \"CACHE_DELETE_FAILED\", \"stateStore.ts\", \"deleteCache\", error instanceof Error ? error : String(error), {\n                key\n            });\n            return false;\n        }\n    }\n    /**\r\n   * Health check for Redis connection\r\n   */ async healthCheck() {\n        if (!this.initialized || !this.redis) {\n            return {\n                healthy: false,\n                message: \"Redis client not initialized\"\n            };\n        }\n        try {\n            const ping = await this.redis.ping();\n            return {\n                healthy: ping === \"PONG\",\n                message: ping === \"PONG\" ? \"Redis connection healthy\" : \"Redis ping failed\"\n            };\n        } catch (error) {\n            return {\n                healthy: false,\n                message: `Redis health check failed: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    }\n}\n// Export singleton instance\nconst stateStore = new StateStore();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/redis/stateStore.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/vector/vectorStore.ts":
/*!***************************************!*\
  !*** ./src/lib/vector/vectorStore.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storeItineraryVector: () => (/* binding */ storeItineraryVector)\n/* harmony export */ });\n/* harmony import */ var _lib_ai_jinaEmbeddings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/ai/jinaEmbeddings */ \"(rsc)/./src/lib/ai/jinaEmbeddings.ts\");\n/* harmony import */ var _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/console-logger */ \"(rsc)/./src/utils/console-logger.ts\");\n\n\nconst VECTOR_ENDPOINT = process.env.VECTOR_DB_ENDPOINT || process.env.VECTOR_DB_WRITE_URL;\nconst VECTOR_API_KEY = process.env.VECTOR_DB_API_KEY || process.env.VECTOR_DB_TOKEN;\nasync function storeItineraryVector(params) {\n    const { workflowId, sessionId, destination, itinerary, model, formData } = params;\n    if (!VECTOR_ENDPOINT) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(201, \"VECTOR_DB_ENDPOINT_MISSING\", \"vectorStore.ts\", \"storeItineraryVector\", \"Vector endpoint environment variable not set\", {\n            workflowId,\n            sessionId\n        });\n        return {\n            stored: false,\n            vectorIds: [],\n            message: \"Vector endpoint not configured\"\n        };\n    }\n    const keyFacts = extractKeyFacts(itinerary, destination, formData);\n    _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug(200, \"VECTOR_KEY_FACTS_EXTRACTED\", \"vectorStore.ts\", \"storeItineraryVector\", {\n        workflowId,\n        keyFacts\n    });\n    const entries = buildVectorEntries({\n        workflowId,\n        keyFacts\n    });\n    if (entries.length === 0) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(202, \"VECTOR_NO_ENTRIES\", \"vectorStore.ts\", \"storeItineraryVector\", \"No vector entries were generated for itinerary\", {\n            workflowId\n        });\n        return {\n            stored: false,\n            vectorIds: [],\n            message: \"No vector entries generated\"\n        };\n    }\n    let embeddingModel = \"jina-embeddings-v3\";\n    let embeddingUsage;\n    let embeddings;\n    try {\n        const embeddingResult = await (0,_lib_ai_jinaEmbeddings__WEBPACK_IMPORTED_MODULE_0__.generateJinaEmbeddings)(entries.map((entry)=>entry.text), {\n            task: \"text-matching\",\n            inputType: \"text\"\n        });\n        embeddings = embeddingResult.embeddings;\n        embeddingModel = embeddingResult.model;\n        embeddingUsage = embeddingResult.usage;\n        if (!Array.isArray(embeddings) || embeddings.length !== entries.length) {\n            throw new Error(\"Embedding count mismatch for itinerary entries.\");\n        }\n    } catch (error) {\n        _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(203, \"VECTOR_EMBEDDING_FAILED\", \"vectorStore.ts\", \"storeItineraryVector\", error instanceof Error ? error.message : String(error), {\n            workflowId\n        });\n        return {\n            stored: false,\n            vectorIds: [],\n            message: error instanceof Error ? error.message : String(error)\n        };\n    }\n    const sharedMetadata = {\n        workflowId,\n        sessionId,\n        model,\n        embeddingModel,\n        generatedAt: new Date().toISOString(),\n        destination: keyFacts.destination,\n        budget: keyFacts.budget,\n        dates: keyFacts.dates,\n        travelPartyFirstSentence: keyFacts.travelPartyFirstSentence,\n        embeddingUsage\n    };\n    const successes = [];\n    const failures = [];\n    for(let index = 0; index < entries.length; index += 1){\n        const entry = entries[index];\n        const vector = embeddings[index];\n        if (!Array.isArray(vector) || vector.length === 0) {\n            failures.push({\n                id: entry.id,\n                error: \"Received empty vector from embeddings API\"\n            });\n            continue;\n        }\n        const payload = {\n            id: entry.id,\n            values: vector,\n            metadata: {\n                ...sharedMetadata,\n                ...entry.metadata\n            },\n            document: entry.document\n        };\n        try {\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.debug(204, \"VECTOR_DB_REQUEST\", \"vectorStore.ts\", \"storeItineraryVector\", {\n                endpoint: VECTOR_ENDPOINT,\n                workflowId,\n                entryId: entry.id,\n                hasApiKey: Boolean(VECTOR_API_KEY),\n                embeddingModel,\n                category: entry.metadata?.category\n            });\n            const response = await fetch(VECTOR_ENDPOINT, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...VECTOR_API_KEY ? {\n                        Authorization: `Bearer ${VECTOR_API_KEY}`\n                    } : {}\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                const errorBody = await response.text();\n                failures.push({\n                    id: entry.id,\n                    error: `HTTP ${response.status}: ${errorBody}`\n                });\n                _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(205, \"VECTOR_DB_REQUEST_FAILED\", \"vectorStore.ts\", \"storeItineraryVector\", `HTTP ${response.status}`, {\n                    workflowId,\n                    entryId: entry.id,\n                    status: response.status,\n                    body: errorBody\n                });\n                continue;\n            }\n            const result = await response.json().catch(()=>({\n                    id: entry.id\n                }));\n            const storedId = result?.id || entry.id;\n            successes.push(storedId);\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.log(206, \"VECTOR_DB_REQUEST_SUCCEEDED\", \"vectorStore.ts\", \"storeItineraryVector\", {\n                workflowId,\n                entryId: entry.id,\n                storedId,\n                category: entry.metadata?.category\n            });\n        } catch (error) {\n            const message = error instanceof Error ? error.message : String(error);\n            failures.push({\n                id: entry.id,\n                error: message\n            });\n            _utils_console_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(207, \"VECTOR_DB_REQUEST_ERROR\", \"vectorStore.ts\", \"storeItineraryVector\", message, {\n                workflowId,\n                entryId: entry.id\n            });\n        }\n    }\n    return {\n        stored: failures.length === 0 && successes.length > 0,\n        vectorIds: successes,\n        failures: failures.length > 0 ? failures : undefined,\n        message: failures.length > 0 ? \"Some vector entries failed to store\" : undefined\n    };\n}\nfunction buildVectorEntries({ workflowId, keyFacts }) {\n    const overviewText = buildOverviewText(keyFacts);\n    if (!overviewText) {\n        return [];\n    }\n    return [\n        {\n            id: `${workflowId}:facts`,\n            text: overviewText,\n            metadata: {\n                category: \"facts\"\n            },\n            document: {\n                destination: keyFacts.destination ?? null,\n                budget: keyFacts.budget ?? null,\n                dates: keyFacts.dates ?? null,\n                travelPartyFirstSentence: keyFacts.travelPartyFirstSentence ?? null\n            }\n        }\n    ];\n}\nfunction buildOverviewText(keyFacts) {\n    const lines = [];\n    if (keyFacts.destination) {\n        lines.push(`Destination: ${keyFacts.destination}`);\n    }\n    if (keyFacts.dates) {\n        lines.push(`Dates: ${keyFacts.dates}`);\n    }\n    if (keyFacts.budget) {\n        lines.push(`Budget: ${keyFacts.budget}`);\n    }\n    const travelPartyLine = keyFacts.travelPartyFirstSentence ?? keyFacts.travelParty;\n    if (travelPartyLine) {\n        lines.push(`Travel Party: ${travelPartyLine}`);\n    }\n    return lines.join(\"\\n\");\n}\nfunction extractKeyFacts(itinerary, fallbackDestination, formData) {\n    const facts = {};\n    const data = typeof itinerary === \"object\" && itinerary !== null ? itinerary : {};\n    const tripSummary = typeof data.tripSummary === \"object\" && data.tripSummary !== null ? data.tripSummary : {};\n    const keyDetails = typeof data.keyDetails === \"object\" && data.keyDetails !== null ? data.keyDetails : {};\n    const summary = typeof data.summary === \"object\" && data.summary !== null ? data.summary : {};\n    facts.destination = sanitizeString(keyDetails.destination) || sanitizeString(tripSummary.destination) || sanitizeString(data.destination) || sanitizeString(data.location) || sanitizeString(summary.destination) || sanitizeString(fallbackDestination) || sanitizeString(formData?.location);\n    facts.budget = sanitizeString(keyDetails.budget) || sanitizeString(tripSummary.budgetDisplay) || sanitizeString(data.budget) || sanitizeString(summary.budget) || formatBudgetFromFormData(formData);\n    const dates = sanitizeString(keyDetails.dates) || sanitizeString(keyDetails.dateDisplay) || sanitizeString(tripSummary.dateDisplay) || sanitizeString(data.dates) || sanitizeString(summary.dates) || formatDatesFromFormData(formData);\n    facts.dates = dates || undefined;\n    const travelParty = sanitizeString(keyDetails.travelers) || sanitizeString(keyDetails.travelParty) || sanitizeString(tripSummary.travelerCount) || sanitizeString(tripSummary.travelers) || sanitizeString(data.travelParty) || sanitizeString(summary.travelParty) || buildTravelPartyFromFormData(formData);\n    facts.travelParty = travelParty;\n    facts.travelPartyFirstSentence = travelParty ? firstSentence(travelParty) : undefined;\n    return facts;\n}\nfunction formatBudgetFromFormData(formData) {\n    if (!formData) {\n        return undefined;\n    }\n    if (formData.flexibleBudget === true) {\n        return \"Flexible budget\";\n    }\n    if (typeof formData.budget === \"number\" && Number.isFinite(formData.budget)) {\n        const currency = sanitizeString(formData.currency) ?? \"USD\";\n        return `${currency} ${formData.budget}`;\n    }\n    return sanitizeString(formData.budgetDisplay);\n}\nfunction formatDatesFromFormData(formData) {\n    if (!formData) {\n        return undefined;\n    }\n    const depart = sanitizeString(formData.departDate);\n    const ret = sanitizeString(formData.returnDate);\n    const plannedDays = typeof formData.plannedDays === \"number\" && Number.isFinite(formData.plannedDays) ? formData.plannedDays : undefined;\n    if (depart && ret) {\n        return `${depart} – ${ret}`;\n    }\n    if (depart && plannedDays) {\n        return `${depart} for ${plannedDays} days`;\n    }\n    if (depart) {\n        return `Departing ${depart}`;\n    }\n    if (plannedDays) {\n        return `${plannedDays} day itinerary (flexible dates)`;\n    }\n    if (formData.flexibleDates === true) {\n        return \"Flexible dates\";\n    }\n    return undefined;\n}\nfunction buildTravelPartyFromFormData(formData) {\n    if (!formData) {\n        return undefined;\n    }\n    const adults = typeof formData.adults === \"number\" && formData.adults >= 0 ? formData.adults : undefined;\n    const children = typeof formData.children === \"number\" && formData.children >= 0 ? formData.children : undefined;\n    if (adults == null && children == null) {\n        return undefined;\n    }\n    const parts = [];\n    if (typeof adults === \"number\") {\n        parts.push(`${adults} adult${adults === 1 ? \"\" : \"s\"}`);\n    }\n    if (typeof children === \"number\" && children > 0) {\n        parts.push(`${children} child${children === 1 ? \"\" : \"ren\"}`);\n    }\n    return parts.join(\", \");\n}\nfunction sanitizeString(value) {\n    if (typeof value === \"string\") {\n        const trimmed = value.trim();\n        return trimmed.length > 0 ? trimmed : undefined;\n    }\n    if (typeof value === \"number\" && Number.isFinite(value)) {\n        return String(value);\n    }\n    return undefined;\n}\nfunction firstSentence(value) {\n    const trimmed = value.trim();\n    const periodIndex = trimmed.indexOf(\".\");\n    if (periodIndex === -1) {\n        return trimmed;\n    }\n    return trimmed.slice(0, periodIndex + 1).trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/vector/vectorStore.ts\n");

/***/ }),

/***/ "(rsc)/./src/types/itinerary/enums.ts":
/*!**************************************!*\
  !*** ./src/types/itinerary/enums.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BudgetMode: () => (/* binding */ BudgetMode),\n/* harmony export */   Currency: () => (/* binding */ Currency),\n/* harmony export */   ItineraryStatus: () => (/* binding */ ItineraryStatus),\n/* harmony export */   LogStatus: () => (/* binding */ LogStatus),\n/* harmony export */   Priority: () => (/* binding */ Priority)\n/* harmony export */ });\nvar Currency;\n(function(Currency) {\n    Currency[\"USD\"] = \"USD\";\n    Currency[\"EUR\"] = \"EUR\";\n    Currency[\"GBP\"] = \"GBP\";\n    Currency[\"CAD\"] = \"CAD\";\n    Currency[\"AUD\"] = \"AUD\";\n})(Currency || (Currency = {}));\nvar BudgetMode;\n(function(BudgetMode) {\n    BudgetMode[\"TOTAL\"] = \"total\";\n    BudgetMode[\"PER_PERSON\"] = \"per-person\";\n})(BudgetMode || (BudgetMode = {}));\nvar ItineraryStatus;\n(function(ItineraryStatus) {\n    ItineraryStatus[\"PENDING\"] = \"pending\";\n    ItineraryStatus[\"PROCESSING\"] = \"processing\";\n    ItineraryStatus[\"COMPLETE\"] = \"complete\";\n    ItineraryStatus[\"ERROR\"] = \"error\";\n})(ItineraryStatus || (ItineraryStatus = {}));\nvar LogStatus;\n(function(LogStatus) {\n    LogStatus[\"SUCCESS\"] = \"Success\";\n    LogStatus[\"ERROR\"] = \"Error\";\n    LogStatus[\"WARNING\"] = \"Warning\";\n})(LogStatus || (LogStatus = {}));\nvar Priority;\n(function(Priority) {\n    Priority[\"HIGH\"] = \"High\";\n    Priority[\"MEDIUM\"] = \"Medium\";\n    Priority[\"LOW\"] = \"Low\";\n})(Priority || (Priority = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdHlwZXMvaXRpbmVyYXJ5L2VudW1zLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztVQUFZQTs7Ozs7O0dBQUFBLGFBQUFBOztVQVFBQzs7O0dBQUFBLGVBQUFBOztVQUtBQzs7Ozs7R0FBQUEsb0JBQUFBOztVQU9BQzs7OztHQUFBQSxjQUFBQTs7VUFNQUM7Ozs7R0FBQUEsYUFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9zcmMvdHlwZXMvaXRpbmVyYXJ5L2VudW1zLnRzPzA3ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gQ3VycmVuY3kge1xyXG4gIFVTRCA9ICdVU0QnLFxyXG4gIEVVUiA9ICdFVVInLFxyXG4gIEdCUCA9ICdHQlAnLFxyXG4gIENBRCA9ICdDQUQnLFxyXG4gIEFVRCA9ICdBVUQnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEJ1ZGdldE1vZGUge1xyXG4gIFRPVEFMID0gJ3RvdGFsJyxcclxuICBQRVJfUEVSU09OID0gJ3Blci1wZXJzb24nXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEl0aW5lcmFyeVN0YXR1cyB7XHJcbiAgUEVORElORyA9ICdwZW5kaW5nJyxcclxuICBQUk9DRVNTSU5HID0gJ3Byb2Nlc3NpbmcnLFxyXG4gIENPTVBMRVRFID0gJ2NvbXBsZXRlJyxcclxuICBFUlJPUiA9ICdlcnJvcidcclxufVxyXG5cclxuZXhwb3J0IGVudW0gTG9nU3RhdHVzIHtcclxuICBTVUNDRVNTID0gJ1N1Y2Nlc3MnLFxyXG4gIEVSUk9SID0gJ0Vycm9yJyxcclxuICBXQVJOSU5HID0gJ1dhcm5pbmcnXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFByaW9yaXR5IHtcclxuICBISUdIID0gJ0hpZ2gnLFxyXG4gIE1FRElVTSA9ICdNZWRpdW0nLFxyXG4gIExPVyA9ICdMb3cnXHJcbn1cclxuIl0sIm5hbWVzIjpbIkN1cnJlbmN5IiwiQnVkZ2V0TW9kZSIsIkl0aW5lcmFyeVN0YXR1cyIsIkxvZ1N0YXR1cyIsIlByaW9yaXR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/types/itinerary/enums.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/console-logger.ts":
/*!*************************************!*\
  !*** ./src/utils/console-logger.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _types_itinerary_enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/itinerary/enums */ \"(rsc)/./src/types/itinerary/enums.ts\");\n\nclass ConsoleLogger {\n    static instance;\n    logLevel;\n    logs = [];\n    maxLogs = 1000;\n    constructor(){\n        this.logLevel = process.env.ITINERARY_LOG_LEVEL || \"info\";\n    }\n    static getInstance() {\n        if (!ConsoleLogger.instance) {\n            ConsoleLogger.instance = new ConsoleLogger();\n        }\n        return ConsoleLogger.instance;\n    }\n    shouldLog(level) {\n        const levels = [\n            \"silent\",\n            \"error\",\n            \"warn\",\n            \"info\",\n            \"debug\"\n        ];\n        const currentIndex = levels.indexOf(this.logLevel);\n        const messageIndex = levels.indexOf(level);\n        return messageIndex <= currentIndex;\n    }\n    log(stepNumber, action, fileName, functionName, data = {}, duration, status = _types_itinerary_enums__WEBPACK_IMPORTED_MODULE_0__.LogStatus.SUCCESS) {\n        if (!this.shouldLog(\"info\")) return;\n        const logData = {\n            stepNumber,\n            action,\n            fileName,\n            functionName,\n            timestamp: new Date().toISOString(),\n            data,\n            ...duration !== undefined && {\n                duration\n            },\n            status\n        };\n        // Store log\n        this.logs.push(logData);\n        if (this.logs.length > this.maxLogs) {\n            this.logs.shift(); // Remove oldest\n        }\n        try {\n            console.log(`Step ${stepNumber}: ${action} in ${fileName} - ${functionName}`, logData);\n        } catch (error) {\n            // Fallback logging if JSON serialization fails\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            console.error(`Step ${stepNumber}: Logging failed for ${action}`, {\n                error: errorMessage\n            });\n        }\n    }\n    error(stepNumber, action, fileName, functionName, error, data = {}) {\n        if (!this.shouldLog(\"error\")) return;\n        const errorMessage = error instanceof Error ? error.message : error;\n        this.log(stepNumber, action, fileName, functionName, {\n            ...data,\n            error: errorMessage\n        }, undefined, _types_itinerary_enums__WEBPACK_IMPORTED_MODULE_0__.LogStatus.ERROR);\n    }\n    warn(stepNumber, action, fileName, functionName, message, data = {}) {\n        if (!this.shouldLog(\"warn\")) return;\n        this.log(stepNumber, action, fileName, functionName, {\n            ...data,\n            warning: message\n        }, undefined, _types_itinerary_enums__WEBPACK_IMPORTED_MODULE_0__.LogStatus.WARNING);\n    }\n    debug(stepNumber, action, fileName, functionName, data = {}) {\n        if (!this.shouldLog(\"debug\")) return;\n        this.log(stepNumber, `DEBUG: ${action}`, fileName, functionName, data, undefined, _types_itinerary_enums__WEBPACK_IMPORTED_MODULE_0__.LogStatus.SUCCESS);\n    }\n    getLogs() {\n        return [\n            ...this.logs\n        ];\n    }\n    clearLogs() {\n        this.logs = [];\n    }\n}\nconst logger = ConsoleLogger.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/console-logger.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry","vendor-chunks/inngest","vendor-chunks/@inngest","vendor-chunks/hash.js","vendor-chunks/debug","vendor-chunks/color-convert","vendor-chunks/chalk","vendor-chunks/@upstash","vendor-chunks/serialize-error-cjs","vendor-chunks/inherits","vendor-chunks/uncrypto","vendor-chunks/supports-color","vendor-chunks/ms","vendor-chunks/minimalistic-assert","vendor-chunks/json-stringify-safe","vendor-chunks/has-flag","vendor-chunks/color-name","vendor-chunks/canonicalize","vendor-chunks/ansi-styles"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Finngest%2Froute&page=%2Fapi%2Finngest%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finngest%2Froute.ts&appDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Craze0%5CDocuments%5Chylo00%5Chylo00&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();