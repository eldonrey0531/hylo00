"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/inngest";
exports.ids = ["vendor-chunks/inngest"];
exports.modules = {

/***/ "(rsc)/./node_modules/inngest/node_modules/ansi-regex/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/node_modules/ansi-regex/index.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (options)=>{\n    options = Object.assign({\n        onlyFirst: false\n    }, options);\n    const pattern = [\n        \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n        \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n    ].join(\"|\");\n    return new RegExp(pattern, options.onlyFirst ? undefined : \"g\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCQSxVQUFVQyxPQUFPQyxNQUFNLENBQUM7UUFDdkJDLFdBQVc7SUFDWixHQUFHSDtJQUVILE1BQU1JLFVBQVU7UUFDZjtRQUNBO0tBQ0EsQ0FBQ0MsSUFBSSxDQUFDO0lBRVAsT0FBTyxJQUFJQyxPQUFPRixTQUFTSixRQUFRRyxTQUFTLEdBQUdJLFlBQVk7QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcz8xYmNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBvcHRpb25zID0+IHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdG9ubHlGaXJzdDogZmFsc2Vcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3QgcGF0dGVybiA9IFtcblx0XHQnW1xcXFx1MDAxQlxcXFx1MDA5Ql1bW1xcXFxdKCkjOz9dKig/Oig/Oig/Oig/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSspKnxbYS16QS1aXFxcXGRdKyg/OjtbLWEtekEtWlxcXFxkXFxcXC8jJi46PT8lQH5fXSopKik/XFxcXHUwMDA3KScsXG5cdFx0Jyg/Oig/OlxcXFxkezEsNH0oPzo7XFxcXGR7MCw0fSkqKT9bXFxcXGRBLVBSLVRaY2YtbnRxcnk9Pjx+XSkpJ1xuXHRdLmpvaW4oJ3wnKTtcblxuXHRyZXR1cm4gbmV3IFJlZ0V4cChwYXR0ZXJuLCBvcHRpb25zLm9ubHlGaXJzdCA/IHVuZGVmaW5lZCA6ICdnJyk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwib25seUZpcnN0IiwicGF0dGVybiIsImpvaW4iLCJSZWdFeHAiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/ansi-regex/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/strip-ansi/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/node_modules/strip-ansi/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ansiRegex = __webpack_require__(/*! ansi-regex */ \"(rsc)/./node_modules/inngest/node_modules/ansi-regex/index.js\");\nconst stripAnsi = (string)=>typeof string === \"string\" ? string.replace(ansiRegex(), \"\") : string;\nmodule.exports = stripAnsi;\nmodule.exports[\"default\"] = stripAnsi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBRTFCLE1BQU1DLFlBQVlDLENBQUFBLFNBQVUsT0FBT0EsV0FBVyxXQUFXQSxPQUFPQyxPQUFPLENBQUNKLGFBQWEsTUFBTUc7QUFFM0ZFLE9BQU9DLE9BQU8sR0FBR0o7QUFDakJHLHlCQUFzQixHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzPzAxMjYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgYW5zaVJlZ2V4ID0gcmVxdWlyZSgnYW5zaS1yZWdleCcpO1xuXG5jb25zdCBzdHJpcEFuc2kgPSBzdHJpbmcgPT4gdHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycgPyBzdHJpbmcucmVwbGFjZShhbnNpUmVnZXgoKSwgJycpIDogc3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmlwQW5zaTtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBzdHJpcEFuc2k7XG4iXSwibmFtZXMiOlsiYW5zaVJlZ2V4IiwicmVxdWlyZSIsInN0cmlwQW5zaSIsInN0cmluZyIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/strip-ansi/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js":
/*!***********************************************************!*\
  !*** ./node_modules/inngest/_virtual/rolldown_runtime.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __export: () => (/* binding */ __export),\n/* harmony export */   __require: () => (/* binding */ __require)\n/* harmony export */ });\n/* harmony import */ var node_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:module */ \"node:module\");\n\n\n//#region rolldown:runtime\nvar __defProp = Object.defineProperty;\nvar __export = (all) => {\n\tlet target = {};\n\tfor (var name in all) __defProp(target, name, {\n\t\tget: all[name],\n\t\tenumerable: true\n\t});\n\treturn target;\n};\nvar __require = /* @__PURE__ */ (0,node_module__WEBPACK_IMPORTED_MODULE_0__.createRequire)(\"file:///C:/Users/raze0/Documents/hylo00/hylo00/node_modules/inngest/_virtual/rolldown_runtime.js\");\n\n//#endregion\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9fdmlydHVhbC9yb2xsZG93bl9ydW50aW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0Qzs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLGdDQUFnQywwREFBYSxDQUFDLGtHQUFlOztBQUU3RCIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L192aXJ0dWFsL3JvbGxkb3duX3J1bnRpbWUuanM/YTJlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZXF1aXJlIH0gZnJvbSBcIm5vZGU6bW9kdWxlXCI7XG5cbi8vI3JlZ2lvbiByb2xsZG93bjpydW50aW1lXG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKGFsbCkgPT4ge1xuXHRsZXQgdGFyZ2V0ID0ge307XG5cdGZvciAodmFyIG5hbWUgaW4gYWxsKSBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7XG5cdFx0Z2V0OiBhbGxbbmFtZV0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHR9KTtcblx0cmV0dXJuIHRhcmdldDtcbn07XG52YXIgX19yZXF1aXJlID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVJlcXVpcmUoaW1wb3J0Lm1ldGEudXJsKTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBfX2V4cG9ydCwgX19yZXF1aXJlIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/api/api.js":
/*!*****************************************!*\
  !*** ./node_modules/inngest/api/api.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InngestApi: () => (/* binding */ InngestApi)\n/* harmony export */ });\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _helpers_strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/* harmony import */ var _helpers_devserver_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\n/* harmony import */ var _helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/inngest/api/schema.js\");\n/* harmony import */ var _helpers_net_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/net.js */ \"(rsc)/./node_modules/inngest/helpers/net.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n\n\n\n\n\n\n\n\n\n//#region src/api/api.ts\nconst realtimeSubscriptionTokenSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ jwt: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string() });\nconst sendSignalSuccessResponseSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ data: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ run_id: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1) }) });\nvar InngestApi = class {\n\tapiBaseUrl;\n\tsigningKey;\n\tsigningKeyFallback;\n\tfetch;\n\tmode;\n\tconstructor({ baseUrl, signingKey, signingKeyFallback, fetch, mode }) {\n\t\tthis.apiBaseUrl = baseUrl;\n\t\tthis.signingKey = signingKey;\n\t\tthis.signingKeyFallback = signingKeyFallback;\n\t\tthis.fetch = fetch;\n\t\tthis.mode = mode;\n\t}\n\tget hashedKey() {\n\t\treturn (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_1__.hashSigningKey)(this.signingKey);\n\t}\n\tget hashedFallbackKey() {\n\t\tif (!this.signingKeyFallback) return;\n\t\treturn (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_1__.hashSigningKey)(this.signingKeyFallback);\n\t}\n\tsetSigningKey(key) {\n\t\tif (typeof key === \"string\" && this.signingKey === \"\") this.signingKey = key;\n\t}\n\tsetSigningKeyFallback(key) {\n\t\tif (typeof key === \"string\" && !this.signingKeyFallback) this.signingKeyFallback = key;\n\t}\n\tasync getTargetUrl(path) {\n\t\tif (this.apiBaseUrl) return new URL(path, this.apiBaseUrl);\n\t\tlet url = new URL(path, _helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.defaultInngestApiBaseUrl);\n\t\tif (this.mode.isDev && this.mode.isInferred && !this.apiBaseUrl) {\n\t\t\tif (await (0,_helpers_devserver_js__WEBPACK_IMPORTED_MODULE_3__.devServerAvailable)(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.defaultDevServerHost, this.fetch)) url = new URL(path, _helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.defaultDevServerHost);\n\t\t}\n\t\treturn url;\n\t}\n\tasync getRunSteps(runId, version) {\n\t\treturn (0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_4__.fetchWithAuthFallback)({\n\t\t\tauthToken: this.hashedKey,\n\t\t\tauthTokenFallback: this.hashedFallbackKey,\n\t\t\tfetch: this.fetch,\n\t\t\turl: await this.getTargetUrl(`/v0/runs/${runId}/actions`)\n\t\t}).then(async (resp) => {\n\t\t\tconst data = await resp.json();\n\t\t\tif (resp.ok) return (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.ok)(_schema_js__WEBPACK_IMPORTED_MODULE_6__.stepsSchemas[version].parse(data));\n\t\t\telse return (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)(_schema_js__WEBPACK_IMPORTED_MODULE_6__.errorSchema.parse(data));\n\t\t}).catch((error) => {\n\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)({\n\t\t\t\terror: (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.getErrorMessage)(error, \"Unknown error retrieving step data\"),\n\t\t\t\tstatus: 500\n\t\t\t});\n\t\t});\n\t}\n\tasync getRunBatch(runId) {\n\t\treturn (0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_4__.fetchWithAuthFallback)({\n\t\t\tauthToken: this.hashedKey,\n\t\t\tauthTokenFallback: this.hashedFallbackKey,\n\t\t\tfetch: this.fetch,\n\t\t\turl: await this.getTargetUrl(`/v0/runs/${runId}/batch`)\n\t\t}).then(async (resp) => {\n\t\t\tconst data = await resp.json();\n\t\t\tif (resp.ok) return (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.ok)(_schema_js__WEBPACK_IMPORTED_MODULE_6__.batchSchema.parse(data));\n\t\t\telse return (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)(_schema_js__WEBPACK_IMPORTED_MODULE_6__.errorSchema.parse(data));\n\t\t}).catch((error) => {\n\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)({\n\t\t\t\terror: (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.getErrorMessage)(error, \"Unknown error retrieving event batch\"),\n\t\t\t\tstatus: 500\n\t\t\t});\n\t\t});\n\t}\n\tasync publish(publishOptions, data) {\n\t\tconst isStream = data instanceof ReadableStream;\n\t\tconst url = await this.getTargetUrl(\"/v1/realtime/publish\");\n\t\turl.searchParams.set(\"channel\", publishOptions.channel || \"\");\n\t\tif (publishOptions.runId) url.searchParams.set(\"run_id\", publishOptions.runId);\n\t\tpublishOptions.topics.forEach((topic) => {\n\t\t\turl.searchParams.append(\"topic\", topic);\n\t\t});\n\t\treturn (0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_4__.fetchWithAuthFallback)({\n\t\t\tauthToken: this.hashedKey,\n\t\t\tauthTokenFallback: this.hashedFallbackKey,\n\t\t\tfetch: this.fetch,\n\t\t\turl,\n\t\t\toptions: {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: isStream ? data : typeof data === \"string\" ? data : JSON.stringify(data),\n\t\t\t\theaders: { \"Content-Type\": isStream ? \"text/stream\" : \"application/json\" },\n\t\t\t\t...isStream ? { duplex: \"half\" } : {}\n\t\t\t}\n\t\t}).then((res) => {\n\t\t\tif (!res.ok) throw new Error(`Failed to publish event: ${res.status} ${res.statusText}`);\n\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.ok)(void 0);\n\t\t}).catch((error) => {\n\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)({\n\t\t\t\terror: (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.getErrorMessage)(error, \"Unknown error publishing event\"),\n\t\t\t\tstatus: 500\n\t\t\t});\n\t\t});\n\t}\n\tasync sendSignal(signalOptions, options) {\n\t\tconst url = await this.getTargetUrl(\"/v1/signals\");\n\t\tconst body = {\n\t\t\tsignal: signalOptions.signal,\n\t\t\tdata: signalOptions.data\n\t\t};\n\t\treturn (0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_4__.fetchWithAuthFallback)({\n\t\t\tauthToken: this.hashedKey,\n\t\t\tauthTokenFallback: this.hashedFallbackKey,\n\t\t\tfetch: this.fetch,\n\t\t\turl,\n\t\t\toptions: {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t...options?.headers\n\t\t\t\t}\n\t\t\t}\n\t\t}).then(async (res) => {\n\t\t\tif (res.status === 404) return (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.ok)({ runId: void 0 });\n\t\t\tconst resClone = res.clone();\n\t\t\tlet json;\n\t\t\ttry {\n\t\t\t\tjson = await res.json();\n\t\t\t} catch {\n\t\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)({\n\t\t\t\t\terror: `Failed to send signal: ${res.status} ${res.statusText} - ${await resClone.text()}`,\n\t\t\t\t\tstatus: res.status\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (!res.ok) try {\n\t\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)(_schema_js__WEBPACK_IMPORTED_MODULE_6__.errorSchema.parse(json));\n\t\t\t} catch {\n\t\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)({\n\t\t\t\t\terror: `Failed to send signal: ${res.status} ${res.statusText} - ${await res.text()}`,\n\t\t\t\t\tstatus: res.status\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst parseRes = sendSignalSuccessResponseSchema.safeParse(json);\n\t\t\tif (!parseRes.success) return (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)({\n\t\t\t\terror: `Successfully sent signal, but response parsing failed: ${res.status} ${res.statusText} - ${await resClone.text()}`,\n\t\t\t\tstatus: res.status\n\t\t\t});\n\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.ok)({ runId: parseRes.data.data.run_id });\n\t\t}).catch((error) => {\n\t\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.err)({\n\t\t\t\terror: (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.getErrorMessage)(error, \"Unknown error sending signal\"),\n\t\t\t\tstatus: 500\n\t\t\t});\n\t\t});\n\t}\n\tasync getSubscriptionToken(channel, topics) {\n\t\tconst url = await this.getTargetUrl(\"/v1/realtime/token\");\n\t\tconst body = topics.map((topic) => ({\n\t\t\tchannel,\n\t\t\tname: topic,\n\t\t\tkind: \"run\"\n\t\t}));\n\t\treturn (0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_4__.fetchWithAuthFallback)({\n\t\t\tauthToken: this.hashedKey,\n\t\t\tauthTokenFallback: this.hashedFallbackKey,\n\t\t\tfetch: this.fetch,\n\t\t\turl,\n\t\t\toptions: {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" }\n\t\t\t}\n\t\t}).then(async (res) => {\n\t\t\tif (!res.ok) throw new Error(`Failed to get subscription token: ${res.status} ${res.statusText} - ${await res.text()}`);\n\t\t\treturn realtimeSubscriptionTokenSchema.parse(await res.json()).jwt;\n\t\t}).catch((error) => {\n\t\t\tthrow new Error((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.getErrorMessage)(error, \"Unknown error getting subscription token\"));\n\t\t});\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/api/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/api/schema.js":
/*!********************************************!*\
  !*** ./node_modules/inngest/api/schema.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchSchema: () => (/* binding */ batchSchema),\n/* harmony export */   errorSchema: () => (/* binding */ errorSchema),\n/* harmony export */   stepsSchemas: () => (/* binding */ stepsSchemas)\n/* harmony export */ });\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n\n\n\n\n//#region src/api/schema.ts\nconst errorSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\terror: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\tstatus: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number()\n});\nconst v0StepSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().refine((v) => typeof v !== \"undefined\", { message: \"Values in steps must be defined\" })).optional().nullable();\nconst v1StepSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\ttype: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"data\").optional().default(\"data\"),\n\tdata: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().refine((v) => typeof v !== \"undefined\", { message: \"Data in steps must be defined\" })\n}).strict().or(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\ttype: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"error\").optional().default(\"error\"),\n\terror: _types_js__WEBPACK_IMPORTED_MODULE_1__.jsonErrorSchema\n}).strict()).or(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\ttype: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"input\").optional().default(\"input\"),\n\tinput: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().refine((v) => typeof v !== \"undefined\", { message: \"If input is present it must not be `undefined`\" })\n}).strict()).or(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().transform((v) => ({\n\ttype: \"data\",\n\tdata: v\n})))).default({});\nconst v2StepSchema = v1StepSchema;\nconst stepsSchemas = {\n\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V0]: v0StepSchema,\n\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V1]: v1StepSchema,\n\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V2]: v2StepSchema\n};\nconst batchSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).transform((v) => v));\n\n//#endregion\n\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9hcGkvc2NoZW1hLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF3RDtBQUNWO0FBQ25COztBQUUzQjtBQUNBLG9CQUFvQiw0Q0FBUTtBQUM1QixRQUFRLDRDQUFRO0FBQ2hCLFNBQVMsNENBQVE7QUFDakIsQ0FBQztBQUNELHFCQUFxQiw0Q0FBUSxDQUFDLHlDQUFLLDZDQUE2Qyw0Q0FBNEM7QUFDNUgscUJBQXFCLDRDQUFRLENBQUMsNENBQVE7QUFDdEMsT0FBTyw2Q0FBUztBQUNoQixPQUFPLHlDQUFLLDZDQUE2QywwQ0FBMEM7QUFDbkcsQ0FBQyxjQUFjLDRDQUFRO0FBQ3ZCLE9BQU8sNkNBQVM7QUFDaEIsUUFBUSxzREFBZTtBQUN2QixDQUFDLGVBQWUsNENBQVE7QUFDeEIsT0FBTyw2Q0FBUztBQUNoQixRQUFRLHlDQUFLLDZDQUE2QywyREFBMkQ7QUFDckgsQ0FBQyxlQUFlLHlDQUFLO0FBQ3JCO0FBQ0E7QUFDQSxDQUFDLGVBQWU7QUFDaEI7QUFDQTtBQUNBLEVBQUUsZ0VBQWdCO0FBQ2xCLEVBQUUsZ0VBQWdCO0FBQ2xCLEVBQUUsZ0VBQWdCO0FBQ2xCO0FBQ0Esb0JBQW9CLDJDQUFPLENBQUMsNENBQVEsQ0FBQyx5Q0FBSzs7QUFFMUM7QUFDa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9hcGkvc2NoZW1hLmpzPzM3MTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhlY3V0aW9uVmVyc2lvbiB9IGZyb20gXCIuLi9oZWxwZXJzL2NvbnN0cy5qc1wiO1xuaW1wb3J0IHsganNvbkVycm9yU2NoZW1hIH0gZnJvbSBcIi4uL3R5cGVzLmpzXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZC92M1wiO1xuXG4vLyNyZWdpb24gc3JjL2FwaS9zY2hlbWEudHNcbmNvbnN0IGVycm9yU2NoZW1hID0gei5vYmplY3Qoe1xuXHRlcnJvcjogei5zdHJpbmcoKSxcblx0c3RhdHVzOiB6Lm51bWJlcigpXG59KTtcbmNvbnN0IHYwU3RlcFNjaGVtYSA9IHoucmVjb3JkKHouYW55KCkucmVmaW5lKCh2KSA9PiB0eXBlb2YgdiAhPT0gXCJ1bmRlZmluZWRcIiwgeyBtZXNzYWdlOiBcIlZhbHVlcyBpbiBzdGVwcyBtdXN0IGJlIGRlZmluZWRcIiB9KSkub3B0aW9uYWwoKS5udWxsYWJsZSgpO1xuY29uc3QgdjFTdGVwU2NoZW1hID0gei5yZWNvcmQoei5vYmplY3Qoe1xuXHR0eXBlOiB6LmxpdGVyYWwoXCJkYXRhXCIpLm9wdGlvbmFsKCkuZGVmYXVsdChcImRhdGFcIiksXG5cdGRhdGE6IHouYW55KCkucmVmaW5lKCh2KSA9PiB0eXBlb2YgdiAhPT0gXCJ1bmRlZmluZWRcIiwgeyBtZXNzYWdlOiBcIkRhdGEgaW4gc3RlcHMgbXVzdCBiZSBkZWZpbmVkXCIgfSlcbn0pLnN0cmljdCgpLm9yKHoub2JqZWN0KHtcblx0dHlwZTogei5saXRlcmFsKFwiZXJyb3JcIikub3B0aW9uYWwoKS5kZWZhdWx0KFwiZXJyb3JcIiksXG5cdGVycm9yOiBqc29uRXJyb3JTY2hlbWFcbn0pLnN0cmljdCgpKS5vcih6Lm9iamVjdCh7XG5cdHR5cGU6IHoubGl0ZXJhbChcImlucHV0XCIpLm9wdGlvbmFsKCkuZGVmYXVsdChcImlucHV0XCIpLFxuXHRpbnB1dDogei5hbnkoKS5yZWZpbmUoKHYpID0+IHR5cGVvZiB2ICE9PSBcInVuZGVmaW5lZFwiLCB7IG1lc3NhZ2U6IFwiSWYgaW5wdXQgaXMgcHJlc2VudCBpdCBtdXN0IG5vdCBiZSBgdW5kZWZpbmVkYFwiIH0pXG59KS5zdHJpY3QoKSkub3Ioei5hbnkoKS50cmFuc2Zvcm0oKHYpID0+ICh7XG5cdHR5cGU6IFwiZGF0YVwiLFxuXHRkYXRhOiB2XG59KSkpKS5kZWZhdWx0KHt9KTtcbmNvbnN0IHYyU3RlcFNjaGVtYSA9IHYxU3RlcFNjaGVtYTtcbmNvbnN0IHN0ZXBzU2NoZW1hcyA9IHtcblx0W0V4ZWN1dGlvblZlcnNpb24uVjBdOiB2MFN0ZXBTY2hlbWEsXG5cdFtFeGVjdXRpb25WZXJzaW9uLlYxXTogdjFTdGVwU2NoZW1hLFxuXHRbRXhlY3V0aW9uVmVyc2lvbi5WMl06IHYyU3RlcFNjaGVtYVxufTtcbmNvbnN0IGJhdGNoU2NoZW1hID0gei5hcnJheSh6LnJlY29yZCh6LmFueSgpKS50cmFuc2Zvcm0oKHYpID0+IHYpKTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBiYXRjaFNjaGVtYSwgZXJyb3JTY2hlbWEsIHN0ZXBzU2NoZW1hcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/api/schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/Fetch.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/components/Fetch.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var _execution_als_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./execution/als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\n/* harmony import */ var _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\n\n\n\n\n//#region src/components/Fetch.ts\nconst globalFetch = globalThis.fetch;\nconst debug = debug__WEBPACK_IMPORTED_MODULE_0__(\"inngest:fetch\");\nconst createFetchShim = () => {\n\tlet stepFetch;\n\tconst fetch$1 = async (input, init) => {\n\t\tconst ctx = await (0,_execution_als_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncCtx)();\n\t\tif (!ctx) {\n\t\t\tif (!stepFetch.fallback) throw new Error(\"step.fetch() called outside of a function and had no fallback set\");\n\t\t\tdebug(\"step.fetch() called outside of a function; falling back to global fetch\");\n\t\t\treturn stepFetch.fallback(input, init);\n\t\t}\n\t\tif (ctx.executingStep) {\n\t\t\tif (!stepFetch.fallback) throw new Error(`step.fetch() called inside step \"${ctx.executingStep.id}\" and had no fallback set`);\n\t\t\tdebug(`step.fetch() called inside step \"${ctx.executingStep.id}\"; falling back to global fetch`);\n\t\t\treturn stepFetch.fallback(input, init);\n\t\t}\n\t\tconst targetUrl = new URL(input instanceof Request ? input.url : input.toString());\n\t\tdebug(\"step.fetch() shimming request to\", targetUrl.hostname);\n\t\tconst jsonRes = await ctx.ctx.step[_InngestStepTools_js__WEBPACK_IMPORTED_MODULE_2__.gatewaySymbol](`step.fetch: ${targetUrl.hostname}`, input, init);\n\t\treturn new Response(jsonRes.body, {\n\t\t\theaders: jsonRes.headers,\n\t\t\tstatus: jsonRes.status\n\t\t});\n\t};\n\tconst optionsRef = { fallback: globalFetch };\n\tconst extras = {\n\t\tconfig: (options) => {\n\t\t\tObject.assign(optionsRef, options);\n\t\t\tObject.assign(stepFetch, optionsRef);\n\t\t\treturn stepFetch;\n\t\t},\n\t\t...optionsRef\n\t};\n\tstepFetch = Object.assign(fetch$1, extras);\n\treturn stepFetch;\n};\n/**\n* `fetch` is a Fetch API-compatible function that can be used to make any HTTP\n* code durable if it's called within an Inngest function.\n*\n* It will gracefully fall back to the global `fetch` if called outside of this\n* context, and a custom fallback can be set using the `config` method.\n*\n* @example Basic usage\n* ```ts\n* import { fetch } from \"inngest\";\n*\n* const api = new MyProductApi({ fetch });\n* ```\n*\n* @example Setting a custom fallback\n* ```ts\n* import { fetch } from \"inngest\";\n*\n* const api = new MyProductApi({\n*            fetch: fetch.config({ fallback: myCustomFetch }),\n* });\n* ```\n*\n* @example Do not allow fallback\n* ```ts\n* import { fetch } from \"inngest\";\n*\n* const api = new MyProductApi({\n*            fetch: fetch.config({ fallback: undefined }),\n* });\n* ```\n*/\nconst fetch = createFetchShim();\n\n//#endregion\n\n//# sourceMappingURL=Fetch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0ZldGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQ7QUFDSztBQUM1Qjs7QUFFMUI7QUFDQTtBQUNBLGNBQWMsa0NBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhEQUFXO0FBQy9CO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLHFCQUFxQjtBQUNyRyw2Q0FBNkMscUJBQXFCLEdBQUc7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsK0RBQWEsaUJBQWlCLG1CQUFtQjtBQUN0RjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsaUNBQWlDLE9BQU87QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLG1DQUFtQyx5QkFBeUI7QUFDNUQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQSxtQ0FBbUMscUJBQXFCO0FBQ3hELEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0ZldGNoLmpzP2VmZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXN5bmNDdHggfSBmcm9tIFwiLi9leGVjdXRpb24vYWxzLmpzXCI7XG5pbXBvcnQgeyBnYXRld2F5U3ltYm9sIH0gZnJvbSBcIi4vSW5uZ2VzdFN0ZXBUb29scy5qc1wiO1xuaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuXG4vLyNyZWdpb24gc3JjL2NvbXBvbmVudHMvRmV0Y2gudHNcbmNvbnN0IGdsb2JhbEZldGNoID0gZ2xvYmFsVGhpcy5mZXRjaDtcbmNvbnN0IGRlYnVnID0gRGVidWcoXCJpbm5nZXN0OmZldGNoXCIpO1xuY29uc3QgY3JlYXRlRmV0Y2hTaGltID0gKCkgPT4ge1xuXHRsZXQgc3RlcEZldGNoO1xuXHRjb25zdCBmZXRjaCQxID0gYXN5bmMgKGlucHV0LCBpbml0KSA9PiB7XG5cdFx0Y29uc3QgY3R4ID0gYXdhaXQgZ2V0QXN5bmNDdHgoKTtcblx0XHRpZiAoIWN0eCkge1xuXHRcdFx0aWYgKCFzdGVwRmV0Y2guZmFsbGJhY2spIHRocm93IG5ldyBFcnJvcihcInN0ZXAuZmV0Y2goKSBjYWxsZWQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGFuZCBoYWQgbm8gZmFsbGJhY2sgc2V0XCIpO1xuXHRcdFx0ZGVidWcoXCJzdGVwLmZldGNoKCkgY2FsbGVkIG91dHNpZGUgb2YgYSBmdW5jdGlvbjsgZmFsbGluZyBiYWNrIHRvIGdsb2JhbCBmZXRjaFwiKTtcblx0XHRcdHJldHVybiBzdGVwRmV0Y2guZmFsbGJhY2soaW5wdXQsIGluaXQpO1xuXHRcdH1cblx0XHRpZiAoY3R4LmV4ZWN1dGluZ1N0ZXApIHtcblx0XHRcdGlmICghc3RlcEZldGNoLmZhbGxiYWNrKSB0aHJvdyBuZXcgRXJyb3IoYHN0ZXAuZmV0Y2goKSBjYWxsZWQgaW5zaWRlIHN0ZXAgXCIke2N0eC5leGVjdXRpbmdTdGVwLmlkfVwiIGFuZCBoYWQgbm8gZmFsbGJhY2sgc2V0YCk7XG5cdFx0XHRkZWJ1Zyhgc3RlcC5mZXRjaCgpIGNhbGxlZCBpbnNpZGUgc3RlcCBcIiR7Y3R4LmV4ZWN1dGluZ1N0ZXAuaWR9XCI7IGZhbGxpbmcgYmFjayB0byBnbG9iYWwgZmV0Y2hgKTtcblx0XHRcdHJldHVybiBzdGVwRmV0Y2guZmFsbGJhY2soaW5wdXQsIGluaXQpO1xuXHRcdH1cblx0XHRjb25zdCB0YXJnZXRVcmwgPSBuZXcgVVJMKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCA/IGlucHV0LnVybCA6IGlucHV0LnRvU3RyaW5nKCkpO1xuXHRcdGRlYnVnKFwic3RlcC5mZXRjaCgpIHNoaW1taW5nIHJlcXVlc3QgdG9cIiwgdGFyZ2V0VXJsLmhvc3RuYW1lKTtcblx0XHRjb25zdCBqc29uUmVzID0gYXdhaXQgY3R4LmN0eC5zdGVwW2dhdGV3YXlTeW1ib2xdKGBzdGVwLmZldGNoOiAke3RhcmdldFVybC5ob3N0bmFtZX1gLCBpbnB1dCwgaW5pdCk7XG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShqc29uUmVzLmJvZHksIHtcblx0XHRcdGhlYWRlcnM6IGpzb25SZXMuaGVhZGVycyxcblx0XHRcdHN0YXR1czoganNvblJlcy5zdGF0dXNcblx0XHR9KTtcblx0fTtcblx0Y29uc3Qgb3B0aW9uc1JlZiA9IHsgZmFsbGJhY2s6IGdsb2JhbEZldGNoIH07XG5cdGNvbnN0IGV4dHJhcyA9IHtcblx0XHRjb25maWc6IChvcHRpb25zKSA9PiB7XG5cdFx0XHRPYmplY3QuYXNzaWduKG9wdGlvbnNSZWYsIG9wdGlvbnMpO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihzdGVwRmV0Y2gsIG9wdGlvbnNSZWYpO1xuXHRcdFx0cmV0dXJuIHN0ZXBGZXRjaDtcblx0XHR9LFxuXHRcdC4uLm9wdGlvbnNSZWZcblx0fTtcblx0c3RlcEZldGNoID0gT2JqZWN0LmFzc2lnbihmZXRjaCQxLCBleHRyYXMpO1xuXHRyZXR1cm4gc3RlcEZldGNoO1xufTtcbi8qKlxuKiBgZmV0Y2hgIGlzIGEgRmV0Y2ggQVBJLWNvbXBhdGlibGUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBtYWtlIGFueSBIVFRQXG4qIGNvZGUgZHVyYWJsZSBpZiBpdCdzIGNhbGxlZCB3aXRoaW4gYW4gSW5uZ2VzdCBmdW5jdGlvbi5cbipcbiogSXQgd2lsbCBncmFjZWZ1bGx5IGZhbGwgYmFjayB0byB0aGUgZ2xvYmFsIGBmZXRjaGAgaWYgY2FsbGVkIG91dHNpZGUgb2YgdGhpc1xuKiBjb250ZXh0LCBhbmQgYSBjdXN0b20gZmFsbGJhY2sgY2FuIGJlIHNldCB1c2luZyB0aGUgYGNvbmZpZ2AgbWV0aG9kLlxuKlxuKiBAZXhhbXBsZSBCYXNpYyB1c2FnZVxuKiBgYGB0c1xuKiBpbXBvcnQgeyBmZXRjaCB9IGZyb20gXCJpbm5nZXN0XCI7XG4qXG4qIGNvbnN0IGFwaSA9IG5ldyBNeVByb2R1Y3RBcGkoeyBmZXRjaCB9KTtcbiogYGBgXG4qXG4qIEBleGFtcGxlIFNldHRpbmcgYSBjdXN0b20gZmFsbGJhY2tcbiogYGBgdHNcbiogaW1wb3J0IHsgZmV0Y2ggfSBmcm9tIFwiaW5uZ2VzdFwiO1xuKlxuKiBjb25zdCBhcGkgPSBuZXcgTXlQcm9kdWN0QXBpKHtcbiogICAgICAgICAgICBmZXRjaDogZmV0Y2guY29uZmlnKHsgZmFsbGJhY2s6IG15Q3VzdG9tRmV0Y2ggfSksXG4qIH0pO1xuKiBgYGBcbipcbiogQGV4YW1wbGUgRG8gbm90IGFsbG93IGZhbGxiYWNrXG4qIGBgYHRzXG4qIGltcG9ydCB7IGZldGNoIH0gZnJvbSBcImlubmdlc3RcIjtcbipcbiogY29uc3QgYXBpID0gbmV3IE15UHJvZHVjdEFwaSh7XG4qICAgICAgICAgICAgZmV0Y2g6IGZldGNoLmNvbmZpZyh7IGZhbGxiYWNrOiB1bmRlZmluZWQgfSksXG4qIH0pO1xuKiBgYGBcbiovXG5jb25zdCBmZXRjaCA9IGNyZWF0ZUZldGNoU2hpbSgpO1xuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGZldGNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GZXRjaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/Fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/Inngest.js":
/*!****************************************************!*\
  !*** ./node_modules/inngest/components/Inngest.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Inngest: () => (/* binding */ Inngest)\n/* harmony export */ });\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _helpers_strings_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/* harmony import */ var _helpers_env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n/* harmony import */ var _helpers_devserver_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\n/* harmony import */ var _helpers_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _helpers_promises_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n/* harmony import */ var _InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/* harmony import */ var _InngestFunction_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./InngestFunction.js */ \"(rsc)/./node_modules/inngest/components/InngestFunction.js\");\n/* harmony import */ var _api_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/api.js */ \"(rsc)/./node_modules/inngest/api/api.js\");\n/* harmony import */ var _helpers_crypto_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/crypto.js */ \"(rsc)/./node_modules/inngest/helpers/crypto.js\");\n/* harmony import */ var _middleware_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../middleware/logger.js */ \"(rsc)/./node_modules/inngest/middleware/logger.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/components/Inngest.ts\n/**\n* A client used to interact with the Inngest API by sending or reacting to\n* events.\n*\n* To provide event typing, see {@link EventSchemas}.\n*\n* ```ts\n* const inngest = new Inngest({ id: \"my-app\" });\n*\n* // or to provide event typing too\n* const inngest = new Inngest({\n*   id: \"my-app\",\n*   schemas: new EventSchemas().fromRecord<{\n*     \"app/user.created\": {\n*       data: { userId: string };\n*     };\n*   }>(),\n* });\n* ```\n*\n* @public\n*/\nvar Inngest = class Inngest {\n\tget [Symbol.toStringTag]() {\n\t\treturn Inngest.Tag;\n\t}\n\t/**\n\t* The ID of this instance, most commonly a reference to the application it\n\t* resides in.\n\t*\n\t* The ID of your client should remain the same for its lifetime; if you'd\n\t* like to change the name of your client as it appears in the Inngest UI,\n\t* change the `name` property instead.\n\t*/\n\tid;\n\t/**\n\t* Stores the options so we can remember explicit settings the user has\n\t* provided.\n\t*/\n\toptions;\n\t/**\n\t* Inngest event key, used to send events to Inngest Cloud.\n\t*/\n\teventKey = \"\";\n\t_apiBaseUrl;\n\t_eventBaseUrl;\n\tinngestApi;\n\t/**\n\t* The absolute URL of the Inngest Cloud API.\n\t*/\n\tsendEventUrl = new URL(`e/${this.eventKey}`, _helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultInngestEventBaseUrl);\n\theaders;\n\tfetch;\n\tlogger;\n\tlocalFns = [];\n\t/**\n\t* A promise that resolves when the middleware stack has been initialized and\n\t* the client is ready to be used.\n\t*/\n\tmiddleware;\n\t/**\n\t* Whether the client is running in a production environment. This can\n\t* sometimes be `undefined` if the client has expressed no preference or\n\t* perhaps environment variables are only available at a later stage in the\n\t* runtime, for example when receiving a request.\n\t*\n\t* An {@link InngestCommHandler} should prioritize this value over all other\n\t* settings, but should still check for the presence of an environment\n\t* variable if it is not set.\n\t*/\n\t_mode;\n\tschemas;\n\t_appVersion;\n\tget apiBaseUrl() {\n\t\treturn this._apiBaseUrl;\n\t}\n\tget eventBaseUrl() {\n\t\treturn this._eventBaseUrl;\n\t}\n\tget env() {\n\t\treturn this.headers[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.Environment] ?? null;\n\t}\n\tget appVersion() {\n\t\treturn this._appVersion;\n\t}\n\t/**\n\t* A client used to interact with the Inngest API by sending or reacting to\n\t* events.\n\t*\n\t* To provide event typing, see {@link EventSchemas}.\n\t*\n\t* ```ts\n\t* const inngest = new Inngest({ name: \"My App\" });\n\t*\n\t* // or to provide event typing too\n\t* const inngest = new Inngest({\n\t*   name: \"My App\",\n\t*   schemas: new EventSchemas().fromRecord<{\n\t*     \"app/user.created\": {\n\t*       data: { userId: string };\n\t*     };\n\t*   }>(),\n\t* });\n\t* ```\n\t*/\n\tconstructor(options) {\n\t\tthis.options = options;\n\t\tconst { id, fetch, logger = new _middleware_logger_js__WEBPACK_IMPORTED_MODULE_1__.DefaultLogger(), middleware, isDev, schemas, appVersion } = this.options;\n\t\tif (!id) throw new Error(\"An `id` must be passed to create an Inngest instance.\");\n\t\tthis.id = id;\n\t\tthis._mode = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.getMode)({ explicitMode: typeof isDev === \"boolean\" ? isDev ? \"dev\" : \"cloud\" : void 0 });\n\t\tthis.fetch = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.getFetch)(fetch);\n\t\tthis.inngestApi = new _api_api_js__WEBPACK_IMPORTED_MODULE_3__.InngestApi({\n\t\t\tbaseUrl: this.apiBaseUrl,\n\t\t\tsigningKey: (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.processEnv)(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestSigningKey) || \"\",\n\t\t\tsigningKeyFallback: (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.processEnv)(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestSigningKeyFallback),\n\t\t\tfetch: this.fetch,\n\t\t\tmode: this.mode\n\t\t});\n\t\tthis.schemas = schemas;\n\t\tthis.loadModeEnvVars();\n\t\tthis.logger = logger;\n\t\tthis.middleware = this.initializeMiddleware([...builtInMiddleware, ...middleware || []]);\n\t\tthis._appVersion = appVersion;\n\t}\n\t/**\n\t* Returns a `Promise` that resolves when the app is ready and all middleware\n\t* has been initialized.\n\t*/\n\tget ready() {\n\t\treturn this.middleware.then(() => {});\n\t}\n\t/**\n\t* Set the environment variables for this client. This is useful if you are\n\t* passed environment variables at runtime instead of as globals and need to\n\t* update the client with those values as requests come in.\n\t*/\n\tsetEnvVars(env = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.allProcessEnv)()) {\n\t\tthis.mode = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.getMode)({\n\t\t\tenv,\n\t\t\tclient: this\n\t\t});\n\t\treturn this;\n\t}\n\tloadModeEnvVars() {\n\t\tthis._apiBaseUrl = this.options.baseUrl || this.mode[\"env\"][_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestApiBaseUrl] || this.mode[\"env\"][_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestBaseUrl] || this.mode.getExplicitUrl(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultInngestApiBaseUrl);\n\t\tthis._eventBaseUrl = this.options.baseUrl || this.mode[\"env\"][_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestEventApiBaseUrl] || this.mode[\"env\"][_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestBaseUrl] || this.mode.getExplicitUrl(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultInngestEventBaseUrl);\n\t\tthis.setEventKey(this.options.eventKey || this.mode[\"env\"][_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestEventKey] || \"\");\n\t\tthis.headers = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.inngestHeaders)({\n\t\t\tinngestEnv: this.options.env,\n\t\t\tenv: this.mode[\"env\"]\n\t\t});\n\t\tthis.inngestApi[\"mode\"] = this.mode;\n\t\tthis.inngestApi[\"apiBaseUrl\"] = this._apiBaseUrl;\n\t}\n\t/**\n\t* Initialize all passed middleware, running the `register` function on each\n\t* in sequence and returning the requested hook registrations.\n\t*/\n\tasync initializeMiddleware(middleware = [], opts) {\n\t\t/**\n\t\t* Wait for the prefix stack to run first; do not trigger ours before this\n\t\t* is complete.\n\t\t*/\n\t\tconst prefix = await (opts?.prefixStack ?? []);\n\t\tconst stack = middleware.reduce(async (acc, m) => {\n\t\t\tconst prev = await acc;\n\t\t\tconst next = await m.init({\n\t\t\t\tclient: this,\n\t\t\t\t...opts?.registerInput\n\t\t\t});\n\t\t\treturn [...prev, next];\n\t\t}, Promise.resolve([]));\n\t\treturn [...prefix, ...await stack];\n\t}\n\tget mode() {\n\t\treturn this._mode;\n\t}\n\tset mode(m) {\n\t\tthis._mode = m;\n\t\tthis.loadModeEnvVars();\n\t}\n\t/**\n\t* Given a response from Inngest, relay the error to the caller.\n\t*/\n\tasync getResponseError(response, rawBody, foundErr = \"Unknown error\") {\n\t\tlet errorMessage = foundErr;\n\t\tif (errorMessage === \"Unknown error\") switch (response.status) {\n\t\t\tcase 401:\n\t\t\t\terrorMessage = \"Event key Not Found\";\n\t\t\t\tbreak;\n\t\t\tcase 400:\n\t\t\t\terrorMessage = \"Cannot process event payload\";\n\t\t\t\tbreak;\n\t\t\tcase 403:\n\t\t\t\terrorMessage = \"Forbidden\";\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\terrorMessage = \"Event key not found\";\n\t\t\t\tbreak;\n\t\t\tcase 406:\n\t\t\t\terrorMessage = `${JSON.stringify(await rawBody)}`;\n\t\t\t\tbreak;\n\t\t\tcase 409:\n\t\t\tcase 412:\n\t\t\t\terrorMessage = \"Event transformation failed\";\n\t\t\t\tbreak;\n\t\t\tcase 413:\n\t\t\t\terrorMessage = \"Event payload too large\";\n\t\t\t\tbreak;\n\t\t\tcase 500:\n\t\t\t\terrorMessage = \"Internal server error\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttry {\n\t\t\t\t\terrorMessage = await response.text();\n\t\t\t\t} catch (_err) {\n\t\t\t\t\terrorMessage = `${JSON.stringify(await rawBody)}`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn /* @__PURE__ */ new Error(`Inngest API Error: ${response.status} ${errorMessage}`);\n\t}\n\t/**\n\t* Set the event key for this instance of Inngest. This is useful if for some\n\t* reason the key is not available at time of instantiation or present in the\n\t* `INNGEST_EVENT_KEY` environment variable.\n\t*/\n\tsetEventKey(eventKey) {\n\t\tthis.eventKey = eventKey || _helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.dummyEventKey;\n\t\tthis.sendEventUrl = new URL(`e/${this.eventKey}`, this.eventBaseUrl || _helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultInngestEventBaseUrl);\n\t}\n\teventKeySet() {\n\t\treturn Boolean(this.eventKey) && this.eventKey !== _helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.dummyEventKey;\n\t}\n\t/**\n\t* EXPERIMENTAL: This API is not yet stable and may change in the future\n\t* without a major version bump.\n\t*\n\t* Send a Signal to Inngest.\n\t*/\n\tasync sendSignal({ signal, data, env }) {\n\t\tconst headers = { ...env ? { [_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.Environment]: env } : {} };\n\t\treturn this._sendSignal({\n\t\t\tsignal,\n\t\t\tdata,\n\t\t\theaders\n\t\t});\n\t}\n\tasync _sendSignal({ signal, data, headers }) {\n\t\tconst res = await this.inngestApi.sendSignal({\n\t\t\tsignal,\n\t\t\tdata\n\t\t}, {\n\t\t\t...this.headers,\n\t\t\t...headers\n\t\t});\n\t\tif (res.ok) return res.value;\n\t\tthrow new Error(`Failed to send signal: ${res.error?.error || \"Unknown error\"}`);\n\t}\n\t/**\n\t* Send one or many events to Inngest. Takes an entire payload (including\n\t* name) as each input.\n\t*\n\t* ```ts\n\t* await inngest.send({ name: \"app/user.created\", data: { id: 123 } });\n\t* ```\n\t*\n\t* Returns a promise that will resolve if the event(s) were sent successfully,\n\t* else throws with an error explaining what went wrong.\n\t*\n\t* If you wish to send an event with custom types (i.e. one that hasn't been\n\t* generated), make sure to add it when creating your Inngest instance, like\n\t* so:\n\t*\n\t* ```ts\n\t* const inngest = new Inngest({\n\t*   name: \"My App\",\n\t*   schemas: new EventSchemas().fromRecord<{\n\t*     \"my/event\": {\n\t*       name: \"my/event\";\n\t*       data: { bar: string };\n\t*     };\n\t*   }>(),\n\t* });\n\t* ```\n\t*/\n\tasync send(payload, options) {\n\t\tconst headers = { ...options?.env ? { [_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.Environment]: options.env } : {} };\n\t\treturn this._send({\n\t\t\tpayload,\n\t\t\theaders\n\t\t});\n\t}\n\t/**\n\t* Internal method for sending an event, used to allow Inngest internals to\n\t* further customize the request sent to an Inngest Server.\n\t*/\n\tasync _send({ payload, headers }) {\n\t\tconst nowMillis = (/* @__PURE__ */ new Date()).getTime();\n\t\tlet maxAttempts = 5;\n\t\ttry {\n\t\t\tconst entropy = (0,_helpers_crypto_js__WEBPACK_IMPORTED_MODULE_4__.createEntropy)(10);\n\t\t\tconst entropyBase64 = Buffer.from(entropy).toString(\"base64\");\n\t\t\theaders = {\n\t\t\t\t...headers,\n\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.EventIdSeed]: `${nowMillis},${entropyBase64}`\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlet message = \"Event-sending retries disabled\";\n\t\t\tif (err instanceof Error) message += `: ${err.message}`;\n\t\t\tconsole.debug(message);\n\t\t\tmaxAttempts = 1;\n\t\t}\n\t\tconst hooks = await (0,_InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_5__.getHookStack)(this.middleware, \"onSendEvent\", void 0, {\n\t\t\ttransformInput: (prev, output) => {\n\t\t\t\treturn {\n\t\t\t\t\t...prev,\n\t\t\t\t\t...output\n\t\t\t\t};\n\t\t\t},\n\t\t\ttransformOutput(prev, output) {\n\t\t\t\treturn { result: {\n\t\t\t\t\t...prev.result,\n\t\t\t\t\t...output?.result\n\t\t\t\t} };\n\t\t\t}\n\t\t});\n\t\tlet payloads = Array.isArray(payload) ? payload : payload ? [payload] : [];\n\t\tconst inputChanges = await hooks.transformInput?.({ payloads: [...payloads] });\n\t\tif (inputChanges?.payloads) payloads = [...inputChanges.payloads];\n\t\tpayloads = payloads.map((p) => {\n\t\t\treturn {\n\t\t\t\t...p,\n\t\t\t\tid: p.id,\n\t\t\t\tts: p.ts || nowMillis,\n\t\t\t\tdata: p.data || {}\n\t\t\t};\n\t\t});\n\t\tconst applyHookToOutput = async (arg) => {\n\t\t\tconst hookOutput = await hooks.transformOutput?.(arg);\n\t\t\treturn {\n\t\t\t\t...arg.result,\n\t\t\t\t...hookOutput?.result\n\t\t\t};\n\t\t};\n\t\t/**\n\t\t* It can be valid for a user to send an empty list of events; if this\n\t\t* happens, show a warning that this may not be intended, but don't throw.\n\t\t*/\n\t\tif (!payloads.length) {\n\t\t\tconsole.warn((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_6__.prettyError)({\n\t\t\t\ttype: \"warn\",\n\t\t\t\twhatHappened: \"`inngest.send()` called with no events\",\n\t\t\t\treassurance: \"This is not an error, but you may not have intended to do this.\",\n\t\t\t\tconsequences: \"The returned promise will resolve, but no events have been sent to Inngest.\",\n\t\t\t\tstack: true\n\t\t\t}));\n\t\t\treturn await applyHookToOutput({ result: { ids: [] } });\n\t\t}\n\t\tlet url = this.sendEventUrl.href;\n\t\t/**\n\t\t* If in prod mode and key is not present, fail now.\n\t\t*/\n\t\tif (this.mode.isCloud && !this.eventKeySet()) throw new Error((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_6__.prettyError)({\n\t\t\twhatHappened: \"Failed to send event\",\n\t\t\tconsequences: \"Your event or events were not sent to Inngest.\",\n\t\t\twhy: \"We couldn't find an event key to use to send events to Inngest.\",\n\t\t\ttoFixNow: _helpers_errors_js__WEBPACK_IMPORTED_MODULE_6__.fixEventKeyMissingSteps\n\t\t}));\n\t\t/**\n\t\t* If dev mode has been inferred, try to hit the dev server first to see if\n\t\t* it exists. If it does, use it, otherwise fall back to whatever server we\n\t\t* have configured.\n\t\t*\n\t\t* `INNGEST_BASE_URL` is used to set both dev server and prod URLs, so if a\n\t\t* user has set this it means they have already chosen a URL to hit.\n\t\t*/\n\t\tif (this.mode.isDev && this.mode.isInferred && !this.eventBaseUrl) {\n\t\t\tif (await (0,_helpers_devserver_js__WEBPACK_IMPORTED_MODULE_7__.devServerAvailable)(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultDevServerHost, this.fetch)) url = (0,_helpers_devserver_js__WEBPACK_IMPORTED_MODULE_7__.devServerUrl)(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultDevServerHost, `e/${this.eventKey}`).href;\n\t\t}\n\t\tconst body = await (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_8__.retryWithBackoff)(async () => {\n\t\t\tlet rawBody;\n\t\t\tlet body$1;\n\t\t\tconst response = await this.fetch(url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_9__.stringify)(payloads),\n\t\t\t\theaders: {\n\t\t\t\t\t...this.headers,\n\t\t\t\t\t...headers\n\t\t\t\t}\n\t\t\t});\n\t\t\ttry {\n\t\t\t\trawBody = await response.json();\n\t\t\t\tbody$1 = await _types_js__WEBPACK_IMPORTED_MODULE_10__.sendEventResponseSchema.parseAsync(rawBody);\n\t\t\t} catch (_err) {\n\t\t\t\tthrow await this.getResponseError(response, rawBody);\n\t\t\t}\n\t\t\tif (body$1.status !== 200 || body$1.error) throw await this.getResponseError(response, rawBody, body$1.error);\n\t\t\treturn body$1;\n\t\t}, {\n\t\t\tmaxAttempts,\n\t\t\tbaseDelay: 100\n\t\t});\n\t\treturn await applyHookToOutput({ result: { ids: body.ids } });\n\t}\n\tcreateFunction = (rawOptions, rawTrigger, handler) => {\n\t\tconst fn = this._createFunction(rawOptions, rawTrigger, handler);\n\t\tthis.localFns.push(fn);\n\t\treturn fn;\n\t};\n\tget funcs() {\n\t\treturn this.localFns;\n\t}\n\t_createFunction = (rawOptions, rawTrigger, handler) => {\n\t\tconst options = this.sanitizeOptions(rawOptions);\n\t\tconst triggers = this.sanitizeTriggers(rawTrigger);\n\t\treturn new _InngestFunction_js__WEBPACK_IMPORTED_MODULE_11__.InngestFunction(this, {\n\t\t\t...options,\n\t\t\ttriggers\n\t\t}, handler);\n\t};\n\t/**\n\t* Runtime-only validation.\n\t*/\n\tsanitizeOptions(options) {\n\t\tif (Object.hasOwn(options, \"fns\")) console.warn(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.logPrefix} InngestFunction: \\`fns\\` option has been deprecated in v3; use \\`middleware\\` instead. See https://www.inngest.com/docs/sdk/migration`);\n\t\tif (typeof options === \"string\") {\n\t\t\tconsole.warn(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.logPrefix} InngestFunction: Creating a function with a string as the first argument has been deprecated in v3; pass an object instead. See https://www.inngest.com/docs/sdk/migration`);\n\t\t\treturn { id: options };\n\t\t}\n\t\treturn options;\n\t}\n\t/**\n\t* Runtime-only validation.\n\t*/\n\tsanitizeTriggers(triggers) {\n\t\tif (typeof triggers === \"string\") {\n\t\t\tconsole.warn(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.logPrefix} InngestFunction: Creating a function with a string as the second argument has been deprecated in v3; pass an object instead. See https://www.inngest.com/docs/sdk/migration`);\n\t\t\treturn [{ event: triggers }];\n\t\t}\n\t\tif (!Array.isArray(triggers)) return [triggers];\n\t\treturn triggers;\n\t}\n};\n/**\n* Default middleware that is included in every client, placed after the user's\n* middleware on the client but before function-level middleware.\n*\n* It is defined here to ensure that comments are included in the generated TS\n* definitions. Without this, we infer the stack of built-in middleware without\n* comments, losing a lot of value.\n*\n* If this is moved, please ensure that using this package in another project\n* can correctly access comments on mutated input and output.\n*\n* This return pattern mimics the output of a `satisfies` suffix; it's used as\n* we support versions of TypeScript prior to the introduction of `satisfies`.\n*/\nconst builtInMiddleware = ((m) => m)([new _InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_5__.InngestMiddleware({\n\tname: \"Inngest: Logger\",\n\tinit({ client }) {\n\t\treturn { onFunctionRun(arg) {\n\t\t\tconst { ctx } = arg;\n\t\t\tconst metadata = {\n\t\t\t\trunID: ctx.runId,\n\t\t\t\teventName: ctx.event.name,\n\t\t\t\tfunctionName: arg.fn.name\n\t\t\t};\n\t\t\tlet providedLogger = client[\"logger\"];\n\t\t\ttry {\n\t\t\t\tif (\"child\" in providedLogger) providedLogger = providedLogger.child(metadata);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"failed to create \\\"childLogger\\\" with error: \", err);\n\t\t\t}\n\t\t\tconst logger = new _middleware_logger_js__WEBPACK_IMPORTED_MODULE_1__.ProxyLogger(providedLogger);\n\t\t\treturn {\n\t\t\t\ttransformInput() {\n\t\t\t\t\treturn { ctx: { logger } };\n\t\t\t\t},\n\t\t\t\tbeforeExecution() {\n\t\t\t\t\tlogger.enable();\n\t\t\t\t},\n\t\t\t\ttransformOutput({ result: { error } }) {\n\t\t\t\t\tif (error) logger.error(error);\n\t\t\t\t},\n\t\t\t\tasync beforeResponse() {\n\t\t\t\t\tawait logger.flush();\n\t\t\t\t}\n\t\t\t};\n\t\t} };\n\t}\n})]);\n(function(_Inngest) {\n\t_Inngest.Tag = \"Inngest.App\";\n})(Inngest || (Inngest = {}));\n\n//#endregion\n\n//# sourceMappingURL=Inngest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFpSztBQUMvRztBQUMrQztBQUN0QjtBQUNDO0FBQ3RCO0FBQ0k7QUFDZTtBQUNsQjtBQUNaO0FBQ1U7QUFDZ0I7O0FBRXJFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsbUJBQW1CO0FBQ25EO0FBQ0E7QUFDQSxnQ0FBZ0MsY0FBYztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixjQUFjLEdBQUcsMEVBQTBCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sMEJBQTBCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUJBQW1CO0FBQ3BEO0FBQ0E7QUFDQSxpQ0FBaUMsZ0JBQWdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHdCQUF3QixnRUFBYSw2Q0FBNkM7QUFDNUY7QUFDQTtBQUNBLGVBQWUsd0RBQU8sR0FBRyw2RUFBNkU7QUFDdEcsZUFBZSx5REFBUTtBQUN2Qix3QkFBd0IsbURBQVU7QUFDbEM7QUFDQSxlQUFlLDJEQUFVLENBQUMsdURBQU87QUFDakMsdUJBQXVCLDJEQUFVLENBQUMsdURBQU87QUFDekM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4REFBYTtBQUMvQixjQUFjLHdEQUFPO0FBQ3JCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsOERBQThELHVEQUFPLHdDQUF3Qyx1REFBTyw2Q0FBNkMsd0VBQXdCO0FBQ3pMLGdFQUFnRSx1REFBTyw2Q0FBNkMsdURBQU8sNkNBQTZDLDBFQUEwQjtBQUNsTSw2REFBNkQsdURBQU87QUFDcEUsaUJBQWlCLCtEQUFjO0FBQy9CO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsOEJBQThCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sdUJBQXVCLDhCQUE4QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsaUJBQWlCLEVBQUUsYUFBYTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw2REFBYTtBQUMzQyxtQ0FBbUMsY0FBYyx3QkFBd0IsMEVBQTBCO0FBQ25HO0FBQ0E7QUFDQSxxREFBcUQsNkRBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDLG9CQUFvQixXQUFXLENBQUMsMERBQVUscUJBQXFCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDRDQUE0QyxvQ0FBb0M7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtDQUFrQyxXQUFXO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQixDQUFDLDBEQUFVLDZCQUE2QjtBQUNoRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpRUFBYTtBQUNoQztBQUNBO0FBQ0E7QUFDQSxLQUFLLDBEQUFVLGtCQUFrQixVQUFVLEdBQUcsY0FBYztBQUM1RDtBQUNBLElBQUk7QUFDSjtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtRUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esc0RBQXNELHlCQUF5QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osb0NBQW9DLFVBQVUsV0FBVztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLCtEQUFXO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLGFBQWEsdUVBQXVCO0FBQ3BDLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlFQUFrQixDQUFDLG9FQUFvQixxQkFBcUIsbUVBQVksQ0FBQyxvRUFBb0IsT0FBTyxjQUFjO0FBQy9IO0FBQ0EscUJBQXFCLHNFQUFnQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsOERBQVM7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLG1CQUFtQiwrREFBdUI7QUFDMUMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsbUNBQW1DLFVBQVUsaUJBQWlCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUVBQWU7QUFDNUI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELHlEQUFTLEVBQUUsMkRBQTJEO0FBQzNIO0FBQ0EsbUJBQW1CLHlEQUFTLEVBQUUsb0dBQW9HO0FBQ2xJLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHlEQUFTLEVBQUUscUdBQXFHO0FBQ25JLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQSwwQ0FBMEMsb0VBQWlCO0FBQzNEO0FBQ0EsUUFBUSxRQUFRO0FBQ2hCLFdBQVc7QUFDWCxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0JBQXNCLDhEQUFXO0FBQ2pDO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCLFVBQVUsU0FBUztBQUN6QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUMsMEJBQTBCOztBQUUzQjtBQUNtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvSW5uZ2VzdC5qcz9iNzFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHREZXZTZXJ2ZXJIb3N0LCBkZWZhdWx0SW5uZ2VzdEFwaUJhc2VVcmwsIGRlZmF1bHRJbm5nZXN0RXZlbnRCYXNlVXJsLCBkdW1teUV2ZW50S2V5LCBlbnZLZXlzLCBoZWFkZXJLZXlzLCBsb2dQcmVmaXggfSBmcm9tIFwiLi4vaGVscGVycy9jb25zdHMuanNcIjtcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gXCIuLi9oZWxwZXJzL3N0cmluZ3MuanNcIjtcbmltcG9ydCB7IGFsbFByb2Nlc3NFbnYsIGdldEZldGNoLCBnZXRNb2RlLCBpbm5nZXN0SGVhZGVycywgcHJvY2Vzc0VudiB9IGZyb20gXCIuLi9oZWxwZXJzL2Vudi5qc1wiO1xuaW1wb3J0IHsgZGV2U2VydmVyQXZhaWxhYmxlLCBkZXZTZXJ2ZXJVcmwgfSBmcm9tIFwiLi4vaGVscGVycy9kZXZzZXJ2ZXIuanNcIjtcbmltcG9ydCB7IGZpeEV2ZW50S2V5TWlzc2luZ1N0ZXBzLCBwcmV0dHlFcnJvciB9IGZyb20gXCIuLi9oZWxwZXJzL2Vycm9ycy5qc1wiO1xuaW1wb3J0IHsgc2VuZEV2ZW50UmVzcG9uc2VTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZXMuanNcIjtcbmltcG9ydCB7IHJldHJ5V2l0aEJhY2tvZmYgfSBmcm9tIFwiLi4vaGVscGVycy9wcm9taXNlcy5qc1wiO1xuaW1wb3J0IHsgSW5uZ2VzdE1pZGRsZXdhcmUsIGdldEhvb2tTdGFjayB9IGZyb20gXCIuL0lubmdlc3RNaWRkbGV3YXJlLmpzXCI7XG5pbXBvcnQgeyBJbm5nZXN0RnVuY3Rpb24gfSBmcm9tIFwiLi9Jbm5nZXN0RnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IElubmdlc3RBcGkgfSBmcm9tIFwiLi4vYXBpL2FwaS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlRW50cm9weSB9IGZyb20gXCIuLi9oZWxwZXJzL2NyeXB0by5qc1wiO1xuaW1wb3J0IHsgRGVmYXVsdExvZ2dlciwgUHJveHlMb2dnZXIgfSBmcm9tIFwiLi4vbWlkZGxld2FyZS9sb2dnZXIuanNcIjtcblxuLy8jcmVnaW9uIHNyYy9jb21wb25lbnRzL0lubmdlc3QudHNcbi8qKlxuKiBBIGNsaWVudCB1c2VkIHRvIGludGVyYWN0IHdpdGggdGhlIElubmdlc3QgQVBJIGJ5IHNlbmRpbmcgb3IgcmVhY3RpbmcgdG9cbiogZXZlbnRzLlxuKlxuKiBUbyBwcm92aWRlIGV2ZW50IHR5cGluZywgc2VlIHtAbGluayBFdmVudFNjaGVtYXN9LlxuKlxuKiBgYGB0c1xuKiBjb25zdCBpbm5nZXN0ID0gbmV3IElubmdlc3QoeyBpZDogXCJteS1hcHBcIiB9KTtcbipcbiogLy8gb3IgdG8gcHJvdmlkZSBldmVudCB0eXBpbmcgdG9vXG4qIGNvbnN0IGlubmdlc3QgPSBuZXcgSW5uZ2VzdCh7XG4qICAgaWQ6IFwibXktYXBwXCIsXG4qICAgc2NoZW1hczogbmV3IEV2ZW50U2NoZW1hcygpLmZyb21SZWNvcmQ8e1xuKiAgICAgXCJhcHAvdXNlci5jcmVhdGVkXCI6IHtcbiogICAgICAgZGF0YTogeyB1c2VySWQ6IHN0cmluZyB9O1xuKiAgICAgfTtcbiogICB9PigpLFxuKiB9KTtcbiogYGBgXG4qXG4qIEBwdWJsaWNcbiovXG52YXIgSW5uZ2VzdCA9IGNsYXNzIElubmdlc3Qge1xuXHRnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG5cdFx0cmV0dXJuIElubmdlc3QuVGFnO1xuXHR9XG5cdC8qKlxuXHQqIFRoZSBJRCBvZiB0aGlzIGluc3RhbmNlLCBtb3N0IGNvbW1vbmx5IGEgcmVmZXJlbmNlIHRvIHRoZSBhcHBsaWNhdGlvbiBpdFxuXHQqIHJlc2lkZXMgaW4uXG5cdCpcblx0KiBUaGUgSUQgb2YgeW91ciBjbGllbnQgc2hvdWxkIHJlbWFpbiB0aGUgc2FtZSBmb3IgaXRzIGxpZmV0aW1lOyBpZiB5b3UnZFxuXHQqIGxpa2UgdG8gY2hhbmdlIHRoZSBuYW1lIG9mIHlvdXIgY2xpZW50IGFzIGl0IGFwcGVhcnMgaW4gdGhlIElubmdlc3QgVUksXG5cdCogY2hhbmdlIHRoZSBgbmFtZWAgcHJvcGVydHkgaW5zdGVhZC5cblx0Ki9cblx0aWQ7XG5cdC8qKlxuXHQqIFN0b3JlcyB0aGUgb3B0aW9ucyBzbyB3ZSBjYW4gcmVtZW1iZXIgZXhwbGljaXQgc2V0dGluZ3MgdGhlIHVzZXIgaGFzXG5cdCogcHJvdmlkZWQuXG5cdCovXG5cdG9wdGlvbnM7XG5cdC8qKlxuXHQqIElubmdlc3QgZXZlbnQga2V5LCB1c2VkIHRvIHNlbmQgZXZlbnRzIHRvIElubmdlc3QgQ2xvdWQuXG5cdCovXG5cdGV2ZW50S2V5ID0gXCJcIjtcblx0X2FwaUJhc2VVcmw7XG5cdF9ldmVudEJhc2VVcmw7XG5cdGlubmdlc3RBcGk7XG5cdC8qKlxuXHQqIFRoZSBhYnNvbHV0ZSBVUkwgb2YgdGhlIElubmdlc3QgQ2xvdWQgQVBJLlxuXHQqL1xuXHRzZW5kRXZlbnRVcmwgPSBuZXcgVVJMKGBlLyR7dGhpcy5ldmVudEtleX1gLCBkZWZhdWx0SW5uZ2VzdEV2ZW50QmFzZVVybCk7XG5cdGhlYWRlcnM7XG5cdGZldGNoO1xuXHRsb2dnZXI7XG5cdGxvY2FsRm5zID0gW107XG5cdC8qKlxuXHQqIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIG1pZGRsZXdhcmUgc3RhY2sgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgYW5kXG5cdCogdGhlIGNsaWVudCBpcyByZWFkeSB0byBiZSB1c2VkLlxuXHQqL1xuXHRtaWRkbGV3YXJlO1xuXHQvKipcblx0KiBXaGV0aGVyIHRoZSBjbGllbnQgaXMgcnVubmluZyBpbiBhIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQuIFRoaXMgY2FuXG5cdCogc29tZXRpbWVzIGJlIGB1bmRlZmluZWRgIGlmIHRoZSBjbGllbnQgaGFzIGV4cHJlc3NlZCBubyBwcmVmZXJlbmNlIG9yXG5cdCogcGVyaGFwcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIG9ubHkgYXZhaWxhYmxlIGF0IGEgbGF0ZXIgc3RhZ2UgaW4gdGhlXG5cdCogcnVudGltZSwgZm9yIGV4YW1wbGUgd2hlbiByZWNlaXZpbmcgYSByZXF1ZXN0LlxuXHQqXG5cdCogQW4ge0BsaW5rIElubmdlc3RDb21tSGFuZGxlcn0gc2hvdWxkIHByaW9yaXRpemUgdGhpcyB2YWx1ZSBvdmVyIGFsbCBvdGhlclxuXHQqIHNldHRpbmdzLCBidXQgc2hvdWxkIHN0aWxsIGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgYW4gZW52aXJvbm1lbnRcblx0KiB2YXJpYWJsZSBpZiBpdCBpcyBub3Qgc2V0LlxuXHQqL1xuXHRfbW9kZTtcblx0c2NoZW1hcztcblx0X2FwcFZlcnNpb247XG5cdGdldCBhcGlCYXNlVXJsKCkge1xuXHRcdHJldHVybiB0aGlzLl9hcGlCYXNlVXJsO1xuXHR9XG5cdGdldCBldmVudEJhc2VVcmwoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2V2ZW50QmFzZVVybDtcblx0fVxuXHRnZXQgZW52KCkge1xuXHRcdHJldHVybiB0aGlzLmhlYWRlcnNbaGVhZGVyS2V5cy5FbnZpcm9ubWVudF0gPz8gbnVsbDtcblx0fVxuXHRnZXQgYXBwVmVyc2lvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fYXBwVmVyc2lvbjtcblx0fVxuXHQvKipcblx0KiBBIGNsaWVudCB1c2VkIHRvIGludGVyYWN0IHdpdGggdGhlIElubmdlc3QgQVBJIGJ5IHNlbmRpbmcgb3IgcmVhY3RpbmcgdG9cblx0KiBldmVudHMuXG5cdCpcblx0KiBUbyBwcm92aWRlIGV2ZW50IHR5cGluZywgc2VlIHtAbGluayBFdmVudFNjaGVtYXN9LlxuXHQqXG5cdCogYGBgdHNcblx0KiBjb25zdCBpbm5nZXN0ID0gbmV3IElubmdlc3QoeyBuYW1lOiBcIk15IEFwcFwiIH0pO1xuXHQqXG5cdCogLy8gb3IgdG8gcHJvdmlkZSBldmVudCB0eXBpbmcgdG9vXG5cdCogY29uc3QgaW5uZ2VzdCA9IG5ldyBJbm5nZXN0KHtcblx0KiAgIG5hbWU6IFwiTXkgQXBwXCIsXG5cdCogICBzY2hlbWFzOiBuZXcgRXZlbnRTY2hlbWFzKCkuZnJvbVJlY29yZDx7XG5cdCogICAgIFwiYXBwL3VzZXIuY3JlYXRlZFwiOiB7XG5cdCogICAgICAgZGF0YTogeyB1c2VySWQ6IHN0cmluZyB9O1xuXHQqICAgICB9O1xuXHQqICAgfT4oKSxcblx0KiB9KTtcblx0KiBgYGBcblx0Ki9cblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0Y29uc3QgeyBpZCwgZmV0Y2gsIGxvZ2dlciA9IG5ldyBEZWZhdWx0TG9nZ2VyKCksIG1pZGRsZXdhcmUsIGlzRGV2LCBzY2hlbWFzLCBhcHBWZXJzaW9uIH0gPSB0aGlzLm9wdGlvbnM7XG5cdFx0aWYgKCFpZCkgdGhyb3cgbmV3IEVycm9yKFwiQW4gYGlkYCBtdXN0IGJlIHBhc3NlZCB0byBjcmVhdGUgYW4gSW5uZ2VzdCBpbnN0YW5jZS5cIik7XG5cdFx0dGhpcy5pZCA9IGlkO1xuXHRcdHRoaXMuX21vZGUgPSBnZXRNb2RlKHsgZXhwbGljaXRNb2RlOiB0eXBlb2YgaXNEZXYgPT09IFwiYm9vbGVhblwiID8gaXNEZXYgPyBcImRldlwiIDogXCJjbG91ZFwiIDogdm9pZCAwIH0pO1xuXHRcdHRoaXMuZmV0Y2ggPSBnZXRGZXRjaChmZXRjaCk7XG5cdFx0dGhpcy5pbm5nZXN0QXBpID0gbmV3IElubmdlc3RBcGkoe1xuXHRcdFx0YmFzZVVybDogdGhpcy5hcGlCYXNlVXJsLFxuXHRcdFx0c2lnbmluZ0tleTogcHJvY2Vzc0VudihlbnZLZXlzLklubmdlc3RTaWduaW5nS2V5KSB8fCBcIlwiLFxuXHRcdFx0c2lnbmluZ0tleUZhbGxiYWNrOiBwcm9jZXNzRW52KGVudktleXMuSW5uZ2VzdFNpZ25pbmdLZXlGYWxsYmFjayksXG5cdFx0XHRmZXRjaDogdGhpcy5mZXRjaCxcblx0XHRcdG1vZGU6IHRoaXMubW9kZVxuXHRcdH0pO1xuXHRcdHRoaXMuc2NoZW1hcyA9IHNjaGVtYXM7XG5cdFx0dGhpcy5sb2FkTW9kZUVudlZhcnMoKTtcblx0XHR0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcblx0XHR0aGlzLm1pZGRsZXdhcmUgPSB0aGlzLmluaXRpYWxpemVNaWRkbGV3YXJlKFsuLi5idWlsdEluTWlkZGxld2FyZSwgLi4ubWlkZGxld2FyZSB8fCBbXV0pO1xuXHRcdHRoaXMuX2FwcFZlcnNpb24gPSBhcHBWZXJzaW9uO1xuXHR9XG5cdC8qKlxuXHQqIFJldHVybnMgYSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBhcHAgaXMgcmVhZHkgYW5kIGFsbCBtaWRkbGV3YXJlXG5cdCogaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCovXG5cdGdldCByZWFkeSgpIHtcblx0XHRyZXR1cm4gdGhpcy5taWRkbGV3YXJlLnRoZW4oKCkgPT4ge30pO1xuXHR9XG5cdC8qKlxuXHQqIFNldCB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciB0aGlzIGNsaWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgeW91IGFyZVxuXHQqIHBhc3NlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXQgcnVudGltZSBpbnN0ZWFkIG9mIGFzIGdsb2JhbHMgYW5kIG5lZWQgdG9cblx0KiB1cGRhdGUgdGhlIGNsaWVudCB3aXRoIHRob3NlIHZhbHVlcyBhcyByZXF1ZXN0cyBjb21lIGluLlxuXHQqL1xuXHRzZXRFbnZWYXJzKGVudiA9IGFsbFByb2Nlc3NFbnYoKSkge1xuXHRcdHRoaXMubW9kZSA9IGdldE1vZGUoe1xuXHRcdFx0ZW52LFxuXHRcdFx0Y2xpZW50OiB0aGlzXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0bG9hZE1vZGVFbnZWYXJzKCkge1xuXHRcdHRoaXMuX2FwaUJhc2VVcmwgPSB0aGlzLm9wdGlvbnMuYmFzZVVybCB8fCB0aGlzLm1vZGVbXCJlbnZcIl1bZW52S2V5cy5Jbm5nZXN0QXBpQmFzZVVybF0gfHwgdGhpcy5tb2RlW1wiZW52XCJdW2VudktleXMuSW5uZ2VzdEJhc2VVcmxdIHx8IHRoaXMubW9kZS5nZXRFeHBsaWNpdFVybChkZWZhdWx0SW5uZ2VzdEFwaUJhc2VVcmwpO1xuXHRcdHRoaXMuX2V2ZW50QmFzZVVybCA9IHRoaXMub3B0aW9ucy5iYXNlVXJsIHx8IHRoaXMubW9kZVtcImVudlwiXVtlbnZLZXlzLklubmdlc3RFdmVudEFwaUJhc2VVcmxdIHx8IHRoaXMubW9kZVtcImVudlwiXVtlbnZLZXlzLklubmdlc3RCYXNlVXJsXSB8fCB0aGlzLm1vZGUuZ2V0RXhwbGljaXRVcmwoZGVmYXVsdElubmdlc3RFdmVudEJhc2VVcmwpO1xuXHRcdHRoaXMuc2V0RXZlbnRLZXkodGhpcy5vcHRpb25zLmV2ZW50S2V5IHx8IHRoaXMubW9kZVtcImVudlwiXVtlbnZLZXlzLklubmdlc3RFdmVudEtleV0gfHwgXCJcIik7XG5cdFx0dGhpcy5oZWFkZXJzID0gaW5uZ2VzdEhlYWRlcnMoe1xuXHRcdFx0aW5uZ2VzdEVudjogdGhpcy5vcHRpb25zLmVudixcblx0XHRcdGVudjogdGhpcy5tb2RlW1wiZW52XCJdXG5cdFx0fSk7XG5cdFx0dGhpcy5pbm5nZXN0QXBpW1wibW9kZVwiXSA9IHRoaXMubW9kZTtcblx0XHR0aGlzLmlubmdlc3RBcGlbXCJhcGlCYXNlVXJsXCJdID0gdGhpcy5fYXBpQmFzZVVybDtcblx0fVxuXHQvKipcblx0KiBJbml0aWFsaXplIGFsbCBwYXNzZWQgbWlkZGxld2FyZSwgcnVubmluZyB0aGUgYHJlZ2lzdGVyYCBmdW5jdGlvbiBvbiBlYWNoXG5cdCogaW4gc2VxdWVuY2UgYW5kIHJldHVybmluZyB0aGUgcmVxdWVzdGVkIGhvb2sgcmVnaXN0cmF0aW9ucy5cblx0Ki9cblx0YXN5bmMgaW5pdGlhbGl6ZU1pZGRsZXdhcmUobWlkZGxld2FyZSA9IFtdLCBvcHRzKSB7XG5cdFx0LyoqXG5cdFx0KiBXYWl0IGZvciB0aGUgcHJlZml4IHN0YWNrIHRvIHJ1biBmaXJzdDsgZG8gbm90IHRyaWdnZXIgb3VycyBiZWZvcmUgdGhpc1xuXHRcdCogaXMgY29tcGxldGUuXG5cdFx0Ki9cblx0XHRjb25zdCBwcmVmaXggPSBhd2FpdCAob3B0cz8ucHJlZml4U3RhY2sgPz8gW10pO1xuXHRcdGNvbnN0IHN0YWNrID0gbWlkZGxld2FyZS5yZWR1Y2UoYXN5bmMgKGFjYywgbSkgPT4ge1xuXHRcdFx0Y29uc3QgcHJldiA9IGF3YWl0IGFjYztcblx0XHRcdGNvbnN0IG5leHQgPSBhd2FpdCBtLmluaXQoe1xuXHRcdFx0XHRjbGllbnQ6IHRoaXMsXG5cdFx0XHRcdC4uLm9wdHM/LnJlZ2lzdGVySW5wdXRcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIFsuLi5wcmV2LCBuZXh0XTtcblx0XHR9LCBQcm9taXNlLnJlc29sdmUoW10pKTtcblx0XHRyZXR1cm4gWy4uLnByZWZpeCwgLi4uYXdhaXQgc3RhY2tdO1xuXHR9XG5cdGdldCBtb2RlKCkge1xuXHRcdHJldHVybiB0aGlzLl9tb2RlO1xuXHR9XG5cdHNldCBtb2RlKG0pIHtcblx0XHR0aGlzLl9tb2RlID0gbTtcblx0XHR0aGlzLmxvYWRNb2RlRW52VmFycygpO1xuXHR9XG5cdC8qKlxuXHQqIEdpdmVuIGEgcmVzcG9uc2UgZnJvbSBJbm5nZXN0LCByZWxheSB0aGUgZXJyb3IgdG8gdGhlIGNhbGxlci5cblx0Ki9cblx0YXN5bmMgZ2V0UmVzcG9uc2VFcnJvcihyZXNwb25zZSwgcmF3Qm9keSwgZm91bmRFcnIgPSBcIlVua25vd24gZXJyb3JcIikge1xuXHRcdGxldCBlcnJvck1lc3NhZ2UgPSBmb3VuZEVycjtcblx0XHRpZiAoZXJyb3JNZXNzYWdlID09PSBcIlVua25vd24gZXJyb3JcIikgc3dpdGNoIChyZXNwb25zZS5zdGF0dXMpIHtcblx0XHRcdGNhc2UgNDAxOlxuXHRcdFx0XHRlcnJvck1lc3NhZ2UgPSBcIkV2ZW50IGtleSBOb3QgRm91bmRcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDQwMDpcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gXCJDYW5ub3QgcHJvY2VzcyBldmVudCBwYXlsb2FkXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSA0MDM6XG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9IFwiRm9yYmlkZGVuXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSA0MDQ6XG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9IFwiRXZlbnQga2V5IG5vdCBmb3VuZFwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgNDA2OlxuXHRcdFx0XHRlcnJvck1lc3NhZ2UgPSBgJHtKU09OLnN0cmluZ2lmeShhd2FpdCByYXdCb2R5KX1gO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgNDA5OlxuXHRcdFx0Y2FzZSA0MTI6XG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9IFwiRXZlbnQgdHJhbnNmb3JtYXRpb24gZmFpbGVkXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSA0MTM6XG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9IFwiRXZlbnQgcGF5bG9hZCB0b28gbGFyZ2VcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDUwMDpcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGVycm9yTWVzc2FnZSA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcblx0XHRcdFx0fSBjYXRjaCAoX2Vycikge1xuXHRcdFx0XHRcdGVycm9yTWVzc2FnZSA9IGAke0pTT04uc3RyaW5naWZ5KGF3YWl0IHJhd0JvZHkpfWA7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHJldHVybiAvKiBAX19QVVJFX18gKi8gbmV3IEVycm9yKGBJbm5nZXN0IEFQSSBFcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9ICR7ZXJyb3JNZXNzYWdlfWApO1xuXHR9XG5cdC8qKlxuXHQqIFNldCB0aGUgZXZlbnQga2V5IGZvciB0aGlzIGluc3RhbmNlIG9mIElubmdlc3QuIFRoaXMgaXMgdXNlZnVsIGlmIGZvciBzb21lXG5cdCogcmVhc29uIHRoZSBrZXkgaXMgbm90IGF2YWlsYWJsZSBhdCB0aW1lIG9mIGluc3RhbnRpYXRpb24gb3IgcHJlc2VudCBpbiB0aGVcblx0KiBgSU5OR0VTVF9FVkVOVF9LRVlgIGVudmlyb25tZW50IHZhcmlhYmxlLlxuXHQqL1xuXHRzZXRFdmVudEtleShldmVudEtleSkge1xuXHRcdHRoaXMuZXZlbnRLZXkgPSBldmVudEtleSB8fCBkdW1teUV2ZW50S2V5O1xuXHRcdHRoaXMuc2VuZEV2ZW50VXJsID0gbmV3IFVSTChgZS8ke3RoaXMuZXZlbnRLZXl9YCwgdGhpcy5ldmVudEJhc2VVcmwgfHwgZGVmYXVsdElubmdlc3RFdmVudEJhc2VVcmwpO1xuXHR9XG5cdGV2ZW50S2V5U2V0KCkge1xuXHRcdHJldHVybiBCb29sZWFuKHRoaXMuZXZlbnRLZXkpICYmIHRoaXMuZXZlbnRLZXkgIT09IGR1bW15RXZlbnRLZXk7XG5cdH1cblx0LyoqXG5cdCogRVhQRVJJTUVOVEFMOiBUaGlzIEFQSSBpcyBub3QgeWV0IHN0YWJsZSBhbmQgbWF5IGNoYW5nZSBpbiB0aGUgZnV0dXJlXG5cdCogd2l0aG91dCBhIG1ham9yIHZlcnNpb24gYnVtcC5cblx0KlxuXHQqIFNlbmQgYSBTaWduYWwgdG8gSW5uZ2VzdC5cblx0Ki9cblx0YXN5bmMgc2VuZFNpZ25hbCh7IHNpZ25hbCwgZGF0YSwgZW52IH0pIHtcblx0XHRjb25zdCBoZWFkZXJzID0geyAuLi5lbnYgPyB7IFtoZWFkZXJLZXlzLkVudmlyb25tZW50XTogZW52IH0gOiB7fSB9O1xuXHRcdHJldHVybiB0aGlzLl9zZW5kU2lnbmFsKHtcblx0XHRcdHNpZ25hbCxcblx0XHRcdGRhdGEsXG5cdFx0XHRoZWFkZXJzXG5cdFx0fSk7XG5cdH1cblx0YXN5bmMgX3NlbmRTaWduYWwoeyBzaWduYWwsIGRhdGEsIGhlYWRlcnMgfSkge1xuXHRcdGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaW5uZ2VzdEFwaS5zZW5kU2lnbmFsKHtcblx0XHRcdHNpZ25hbCxcblx0XHRcdGRhdGFcblx0XHR9LCB7XG5cdFx0XHQuLi50aGlzLmhlYWRlcnMsXG5cdFx0XHQuLi5oZWFkZXJzXG5cdFx0fSk7XG5cdFx0aWYgKHJlcy5vaykgcmV0dXJuIHJlcy52YWx1ZTtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzZW5kIHNpZ25hbDogJHtyZXMuZXJyb3I/LmVycm9yIHx8IFwiVW5rbm93biBlcnJvclwifWApO1xuXHR9XG5cdC8qKlxuXHQqIFNlbmQgb25lIG9yIG1hbnkgZXZlbnRzIHRvIElubmdlc3QuIFRha2VzIGFuIGVudGlyZSBwYXlsb2FkIChpbmNsdWRpbmdcblx0KiBuYW1lKSBhcyBlYWNoIGlucHV0LlxuXHQqXG5cdCogYGBgdHNcblx0KiBhd2FpdCBpbm5nZXN0LnNlbmQoeyBuYW1lOiBcImFwcC91c2VyLmNyZWF0ZWRcIiwgZGF0YTogeyBpZDogMTIzIH0gfSk7XG5cdCogYGBgXG5cdCpcblx0KiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBpZiB0aGUgZXZlbnQocykgd2VyZSBzZW50IHN1Y2Nlc3NmdWxseSxcblx0KiBlbHNlIHRocm93cyB3aXRoIGFuIGVycm9yIGV4cGxhaW5pbmcgd2hhdCB3ZW50IHdyb25nLlxuXHQqXG5cdCogSWYgeW91IHdpc2ggdG8gc2VuZCBhbiBldmVudCB3aXRoIGN1c3RvbSB0eXBlcyAoaS5lLiBvbmUgdGhhdCBoYXNuJ3QgYmVlblxuXHQqIGdlbmVyYXRlZCksIG1ha2Ugc3VyZSB0byBhZGQgaXQgd2hlbiBjcmVhdGluZyB5b3VyIElubmdlc3QgaW5zdGFuY2UsIGxpa2Vcblx0KiBzbzpcblx0KlxuXHQqIGBgYHRzXG5cdCogY29uc3QgaW5uZ2VzdCA9IG5ldyBJbm5nZXN0KHtcblx0KiAgIG5hbWU6IFwiTXkgQXBwXCIsXG5cdCogICBzY2hlbWFzOiBuZXcgRXZlbnRTY2hlbWFzKCkuZnJvbVJlY29yZDx7XG5cdCogICAgIFwibXkvZXZlbnRcIjoge1xuXHQqICAgICAgIG5hbWU6IFwibXkvZXZlbnRcIjtcblx0KiAgICAgICBkYXRhOiB7IGJhcjogc3RyaW5nIH07XG5cdCogICAgIH07XG5cdCogICB9PigpLFxuXHQqIH0pO1xuXHQqIGBgYFxuXHQqL1xuXHRhc3luYyBzZW5kKHBheWxvYWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBoZWFkZXJzID0geyAuLi5vcHRpb25zPy5lbnYgPyB7IFtoZWFkZXJLZXlzLkVudmlyb25tZW50XTogb3B0aW9ucy5lbnYgfSA6IHt9IH07XG5cdFx0cmV0dXJuIHRoaXMuX3NlbmQoe1xuXHRcdFx0cGF5bG9hZCxcblx0XHRcdGhlYWRlcnNcblx0XHR9KTtcblx0fVxuXHQvKipcblx0KiBJbnRlcm5hbCBtZXRob2QgZm9yIHNlbmRpbmcgYW4gZXZlbnQsIHVzZWQgdG8gYWxsb3cgSW5uZ2VzdCBpbnRlcm5hbHMgdG9cblx0KiBmdXJ0aGVyIGN1c3RvbWl6ZSB0aGUgcmVxdWVzdCBzZW50IHRvIGFuIElubmdlc3QgU2VydmVyLlxuXHQqL1xuXHRhc3luYyBfc2VuZCh7IHBheWxvYWQsIGhlYWRlcnMgfSkge1xuXHRcdGNvbnN0IG5vd01pbGxpcyA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXHRcdGxldCBtYXhBdHRlbXB0cyA9IDU7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGVudHJvcHkgPSBjcmVhdGVFbnRyb3B5KDEwKTtcblx0XHRcdGNvbnN0IGVudHJvcHlCYXNlNjQgPSBCdWZmZXIuZnJvbShlbnRyb3B5KS50b1N0cmluZyhcImJhc2U2NFwiKTtcblx0XHRcdGhlYWRlcnMgPSB7XG5cdFx0XHRcdC4uLmhlYWRlcnMsXG5cdFx0XHRcdFtoZWFkZXJLZXlzLkV2ZW50SWRTZWVkXTogYCR7bm93TWlsbGlzfSwke2VudHJvcHlCYXNlNjR9YFxuXHRcdFx0fTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGxldCBtZXNzYWdlID0gXCJFdmVudC1zZW5kaW5nIHJldHJpZXMgZGlzYWJsZWRcIjtcblx0XHRcdGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikgbWVzc2FnZSArPSBgOiAke2Vyci5tZXNzYWdlfWA7XG5cdFx0XHRjb25zb2xlLmRlYnVnKG1lc3NhZ2UpO1xuXHRcdFx0bWF4QXR0ZW1wdHMgPSAxO1xuXHRcdH1cblx0XHRjb25zdCBob29rcyA9IGF3YWl0IGdldEhvb2tTdGFjayh0aGlzLm1pZGRsZXdhcmUsIFwib25TZW5kRXZlbnRcIiwgdm9pZCAwLCB7XG5cdFx0XHR0cmFuc2Zvcm1JbnB1dDogKHByZXYsIG91dHB1dCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdC4uLnByZXYsXG5cdFx0XHRcdFx0Li4ub3V0cHV0XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXHRcdFx0dHJhbnNmb3JtT3V0cHV0KHByZXYsIG91dHB1dCkge1xuXHRcdFx0XHRyZXR1cm4geyByZXN1bHQ6IHtcblx0XHRcdFx0XHQuLi5wcmV2LnJlc3VsdCxcblx0XHRcdFx0XHQuLi5vdXRwdXQ/LnJlc3VsdFxuXHRcdFx0XHR9IH07XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bGV0IHBheWxvYWRzID0gQXJyYXkuaXNBcnJheShwYXlsb2FkKSA/IHBheWxvYWQgOiBwYXlsb2FkID8gW3BheWxvYWRdIDogW107XG5cdFx0Y29uc3QgaW5wdXRDaGFuZ2VzID0gYXdhaXQgaG9va3MudHJhbnNmb3JtSW5wdXQ/Lih7IHBheWxvYWRzOiBbLi4ucGF5bG9hZHNdIH0pO1xuXHRcdGlmIChpbnB1dENoYW5nZXM/LnBheWxvYWRzKSBwYXlsb2FkcyA9IFsuLi5pbnB1dENoYW5nZXMucGF5bG9hZHNdO1xuXHRcdHBheWxvYWRzID0gcGF5bG9hZHMubWFwKChwKSA9PiB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHQuLi5wLFxuXHRcdFx0XHRpZDogcC5pZCxcblx0XHRcdFx0dHM6IHAudHMgfHwgbm93TWlsbGlzLFxuXHRcdFx0XHRkYXRhOiBwLmRhdGEgfHwge31cblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0Y29uc3QgYXBwbHlIb29rVG9PdXRwdXQgPSBhc3luYyAoYXJnKSA9PiB7XG5cdFx0XHRjb25zdCBob29rT3V0cHV0ID0gYXdhaXQgaG9va3MudHJhbnNmb3JtT3V0cHV0Py4oYXJnKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC4uLmFyZy5yZXN1bHQsXG5cdFx0XHRcdC4uLmhvb2tPdXRwdXQ/LnJlc3VsdFxuXHRcdFx0fTtcblx0XHR9O1xuXHRcdC8qKlxuXHRcdCogSXQgY2FuIGJlIHZhbGlkIGZvciBhIHVzZXIgdG8gc2VuZCBhbiBlbXB0eSBsaXN0IG9mIGV2ZW50czsgaWYgdGhpc1xuXHRcdCogaGFwcGVucywgc2hvdyBhIHdhcm5pbmcgdGhhdCB0aGlzIG1heSBub3QgYmUgaW50ZW5kZWQsIGJ1dCBkb24ndCB0aHJvdy5cblx0XHQqL1xuXHRcdGlmICghcGF5bG9hZHMubGVuZ3RoKSB7XG5cdFx0XHRjb25zb2xlLndhcm4ocHJldHR5RXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiBcIndhcm5cIixcblx0XHRcdFx0d2hhdEhhcHBlbmVkOiBcImBpbm5nZXN0LnNlbmQoKWAgY2FsbGVkIHdpdGggbm8gZXZlbnRzXCIsXG5cdFx0XHRcdHJlYXNzdXJhbmNlOiBcIlRoaXMgaXMgbm90IGFuIGVycm9yLCBidXQgeW91IG1heSBub3QgaGF2ZSBpbnRlbmRlZCB0byBkbyB0aGlzLlwiLFxuXHRcdFx0XHRjb25zZXF1ZW5jZXM6IFwiVGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCByZXNvbHZlLCBidXQgbm8gZXZlbnRzIGhhdmUgYmVlbiBzZW50IHRvIElubmdlc3QuXCIsXG5cdFx0XHRcdHN0YWNrOiB0cnVlXG5cdFx0XHR9KSk7XG5cdFx0XHRyZXR1cm4gYXdhaXQgYXBwbHlIb29rVG9PdXRwdXQoeyByZXN1bHQ6IHsgaWRzOiBbXSB9IH0pO1xuXHRcdH1cblx0XHRsZXQgdXJsID0gdGhpcy5zZW5kRXZlbnRVcmwuaHJlZjtcblx0XHQvKipcblx0XHQqIElmIGluIHByb2QgbW9kZSBhbmQga2V5IGlzIG5vdCBwcmVzZW50LCBmYWlsIG5vdy5cblx0XHQqL1xuXHRcdGlmICh0aGlzLm1vZGUuaXNDbG91ZCAmJiAhdGhpcy5ldmVudEtleVNldCgpKSB0aHJvdyBuZXcgRXJyb3IocHJldHR5RXJyb3Ioe1xuXHRcdFx0d2hhdEhhcHBlbmVkOiBcIkZhaWxlZCB0byBzZW5kIGV2ZW50XCIsXG5cdFx0XHRjb25zZXF1ZW5jZXM6IFwiWW91ciBldmVudCBvciBldmVudHMgd2VyZSBub3Qgc2VudCB0byBJbm5nZXN0LlwiLFxuXHRcdFx0d2h5OiBcIldlIGNvdWxkbid0IGZpbmQgYW4gZXZlbnQga2V5IHRvIHVzZSB0byBzZW5kIGV2ZW50cyB0byBJbm5nZXN0LlwiLFxuXHRcdFx0dG9GaXhOb3c6IGZpeEV2ZW50S2V5TWlzc2luZ1N0ZXBzXG5cdFx0fSkpO1xuXHRcdC8qKlxuXHRcdCogSWYgZGV2IG1vZGUgaGFzIGJlZW4gaW5mZXJyZWQsIHRyeSB0byBoaXQgdGhlIGRldiBzZXJ2ZXIgZmlyc3QgdG8gc2VlIGlmXG5cdFx0KiBpdCBleGlzdHMuIElmIGl0IGRvZXMsIHVzZSBpdCwgb3RoZXJ3aXNlIGZhbGwgYmFjayB0byB3aGF0ZXZlciBzZXJ2ZXIgd2Vcblx0XHQqIGhhdmUgY29uZmlndXJlZC5cblx0XHQqXG5cdFx0KiBgSU5OR0VTVF9CQVNFX1VSTGAgaXMgdXNlZCB0byBzZXQgYm90aCBkZXYgc2VydmVyIGFuZCBwcm9kIFVSTHMsIHNvIGlmIGFcblx0XHQqIHVzZXIgaGFzIHNldCB0aGlzIGl0IG1lYW5zIHRoZXkgaGF2ZSBhbHJlYWR5IGNob3NlbiBhIFVSTCB0byBoaXQuXG5cdFx0Ki9cblx0XHRpZiAodGhpcy5tb2RlLmlzRGV2ICYmIHRoaXMubW9kZS5pc0luZmVycmVkICYmICF0aGlzLmV2ZW50QmFzZVVybCkge1xuXHRcdFx0aWYgKGF3YWl0IGRldlNlcnZlckF2YWlsYWJsZShkZWZhdWx0RGV2U2VydmVySG9zdCwgdGhpcy5mZXRjaCkpIHVybCA9IGRldlNlcnZlclVybChkZWZhdWx0RGV2U2VydmVySG9zdCwgYGUvJHt0aGlzLmV2ZW50S2V5fWApLmhyZWY7XG5cdFx0fVxuXHRcdGNvbnN0IGJvZHkgPSBhd2FpdCByZXRyeVdpdGhCYWNrb2ZmKGFzeW5jICgpID0+IHtcblx0XHRcdGxldCByYXdCb2R5O1xuXHRcdFx0bGV0IGJvZHkkMTtcblx0XHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCh1cmwsIHtcblx0XHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHBheWxvYWRzKSxcblx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdC4uLnRoaXMuaGVhZGVycyxcblx0XHRcdFx0XHQuLi5oZWFkZXJzXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmF3Qm9keSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblx0XHRcdFx0Ym9keSQxID0gYXdhaXQgc2VuZEV2ZW50UmVzcG9uc2VTY2hlbWEucGFyc2VBc3luYyhyYXdCb2R5KTtcblx0XHRcdH0gY2F0Y2ggKF9lcnIpIHtcblx0XHRcdFx0dGhyb3cgYXdhaXQgdGhpcy5nZXRSZXNwb25zZUVycm9yKHJlc3BvbnNlLCByYXdCb2R5KTtcblx0XHRcdH1cblx0XHRcdGlmIChib2R5JDEuc3RhdHVzICE9PSAyMDAgfHwgYm9keSQxLmVycm9yKSB0aHJvdyBhd2FpdCB0aGlzLmdldFJlc3BvbnNlRXJyb3IocmVzcG9uc2UsIHJhd0JvZHksIGJvZHkkMS5lcnJvcik7XG5cdFx0XHRyZXR1cm4gYm9keSQxO1xuXHRcdH0sIHtcblx0XHRcdG1heEF0dGVtcHRzLFxuXHRcdFx0YmFzZURlbGF5OiAxMDBcblx0XHR9KTtcblx0XHRyZXR1cm4gYXdhaXQgYXBwbHlIb29rVG9PdXRwdXQoeyByZXN1bHQ6IHsgaWRzOiBib2R5LmlkcyB9IH0pO1xuXHR9XG5cdGNyZWF0ZUZ1bmN0aW9uID0gKHJhd09wdGlvbnMsIHJhd1RyaWdnZXIsIGhhbmRsZXIpID0+IHtcblx0XHRjb25zdCBmbiA9IHRoaXMuX2NyZWF0ZUZ1bmN0aW9uKHJhd09wdGlvbnMsIHJhd1RyaWdnZXIsIGhhbmRsZXIpO1xuXHRcdHRoaXMubG9jYWxGbnMucHVzaChmbik7XG5cdFx0cmV0dXJuIGZuO1xuXHR9O1xuXHRnZXQgZnVuY3MoKSB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxGbnM7XG5cdH1cblx0X2NyZWF0ZUZ1bmN0aW9uID0gKHJhd09wdGlvbnMsIHJhd1RyaWdnZXIsIGhhbmRsZXIpID0+IHtcblx0XHRjb25zdCBvcHRpb25zID0gdGhpcy5zYW5pdGl6ZU9wdGlvbnMocmF3T3B0aW9ucyk7XG5cdFx0Y29uc3QgdHJpZ2dlcnMgPSB0aGlzLnNhbml0aXplVHJpZ2dlcnMocmF3VHJpZ2dlcik7XG5cdFx0cmV0dXJuIG5ldyBJbm5nZXN0RnVuY3Rpb24odGhpcywge1xuXHRcdFx0Li4ub3B0aW9ucyxcblx0XHRcdHRyaWdnZXJzXG5cdFx0fSwgaGFuZGxlcik7XG5cdH07XG5cdC8qKlxuXHQqIFJ1bnRpbWUtb25seSB2YWxpZGF0aW9uLlxuXHQqL1xuXHRzYW5pdGl6ZU9wdGlvbnMob3B0aW9ucykge1xuXHRcdGlmIChPYmplY3QuaGFzT3duKG9wdGlvbnMsIFwiZm5zXCIpKSBjb25zb2xlLndhcm4oYCR7bG9nUHJlZml4fSBJbm5nZXN0RnVuY3Rpb246IFxcYGZuc1xcYCBvcHRpb24gaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiB2MzsgdXNlIFxcYG1pZGRsZXdhcmVcXGAgaW5zdGVhZC4gU2VlIGh0dHBzOi8vd3d3Lmlubmdlc3QuY29tL2RvY3Mvc2RrL21pZ3JhdGlvbmApO1xuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKGAke2xvZ1ByZWZpeH0gSW5uZ2VzdEZ1bmN0aW9uOiBDcmVhdGluZyBhIGZ1bmN0aW9uIHdpdGggYSBzdHJpbmcgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gdjM7IHBhc3MgYW4gb2JqZWN0IGluc3RlYWQuIFNlZSBodHRwczovL3d3dy5pbm5nZXN0LmNvbS9kb2NzL3Nkay9taWdyYXRpb25gKTtcblx0XHRcdHJldHVybiB7IGlkOiBvcHRpb25zIH07XG5cdFx0fVxuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9XG5cdC8qKlxuXHQqIFJ1bnRpbWUtb25seSB2YWxpZGF0aW9uLlxuXHQqL1xuXHRzYW5pdGl6ZVRyaWdnZXJzKHRyaWdnZXJzKSB7XG5cdFx0aWYgKHR5cGVvZiB0cmlnZ2VycyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0Y29uc29sZS53YXJuKGAke2xvZ1ByZWZpeH0gSW5uZ2VzdEZ1bmN0aW9uOiBDcmVhdGluZyBhIGZ1bmN0aW9uIHdpdGggYSBzdHJpbmcgYXMgdGhlIHNlY29uZCBhcmd1bWVudCBoYXMgYmVlbiBkZXByZWNhdGVkIGluIHYzOyBwYXNzIGFuIG9iamVjdCBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly93d3cuaW5uZ2VzdC5jb20vZG9jcy9zZGsvbWlncmF0aW9uYCk7XG5cdFx0XHRyZXR1cm4gW3sgZXZlbnQ6IHRyaWdnZXJzIH1dO1xuXHRcdH1cblx0XHRpZiAoIUFycmF5LmlzQXJyYXkodHJpZ2dlcnMpKSByZXR1cm4gW3RyaWdnZXJzXTtcblx0XHRyZXR1cm4gdHJpZ2dlcnM7XG5cdH1cbn07XG4vKipcbiogRGVmYXVsdCBtaWRkbGV3YXJlIHRoYXQgaXMgaW5jbHVkZWQgaW4gZXZlcnkgY2xpZW50LCBwbGFjZWQgYWZ0ZXIgdGhlIHVzZXInc1xuKiBtaWRkbGV3YXJlIG9uIHRoZSBjbGllbnQgYnV0IGJlZm9yZSBmdW5jdGlvbi1sZXZlbCBtaWRkbGV3YXJlLlxuKlxuKiBJdCBpcyBkZWZpbmVkIGhlcmUgdG8gZW5zdXJlIHRoYXQgY29tbWVudHMgYXJlIGluY2x1ZGVkIGluIHRoZSBnZW5lcmF0ZWQgVFNcbiogZGVmaW5pdGlvbnMuIFdpdGhvdXQgdGhpcywgd2UgaW5mZXIgdGhlIHN0YWNrIG9mIGJ1aWx0LWluIG1pZGRsZXdhcmUgd2l0aG91dFxuKiBjb21tZW50cywgbG9zaW5nIGEgbG90IG9mIHZhbHVlLlxuKlxuKiBJZiB0aGlzIGlzIG1vdmVkLCBwbGVhc2UgZW5zdXJlIHRoYXQgdXNpbmcgdGhpcyBwYWNrYWdlIGluIGFub3RoZXIgcHJvamVjdFxuKiBjYW4gY29ycmVjdGx5IGFjY2VzcyBjb21tZW50cyBvbiBtdXRhdGVkIGlucHV0IGFuZCBvdXRwdXQuXG4qXG4qIFRoaXMgcmV0dXJuIHBhdHRlcm4gbWltaWNzIHRoZSBvdXRwdXQgb2YgYSBgc2F0aXNmaWVzYCBzdWZmaXg7IGl0J3MgdXNlZCBhc1xuKiB3ZSBzdXBwb3J0IHZlcnNpb25zIG9mIFR5cGVTY3JpcHQgcHJpb3IgdG8gdGhlIGludHJvZHVjdGlvbiBvZiBgc2F0aXNmaWVzYC5cbiovXG5jb25zdCBidWlsdEluTWlkZGxld2FyZSA9ICgobSkgPT4gbSkoW25ldyBJbm5nZXN0TWlkZGxld2FyZSh7XG5cdG5hbWU6IFwiSW5uZ2VzdDogTG9nZ2VyXCIsXG5cdGluaXQoeyBjbGllbnQgfSkge1xuXHRcdHJldHVybiB7IG9uRnVuY3Rpb25SdW4oYXJnKSB7XG5cdFx0XHRjb25zdCB7IGN0eCB9ID0gYXJnO1xuXHRcdFx0Y29uc3QgbWV0YWRhdGEgPSB7XG5cdFx0XHRcdHJ1bklEOiBjdHgucnVuSWQsXG5cdFx0XHRcdGV2ZW50TmFtZTogY3R4LmV2ZW50Lm5hbWUsXG5cdFx0XHRcdGZ1bmN0aW9uTmFtZTogYXJnLmZuLm5hbWVcblx0XHRcdH07XG5cdFx0XHRsZXQgcHJvdmlkZWRMb2dnZXIgPSBjbGllbnRbXCJsb2dnZXJcIl07XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoXCJjaGlsZFwiIGluIHByb3ZpZGVkTG9nZ2VyKSBwcm92aWRlZExvZ2dlciA9IHByb3ZpZGVkTG9nZ2VyLmNoaWxkKG1ldGFkYXRhKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiZmFpbGVkIHRvIGNyZWF0ZSBcXFwiY2hpbGRMb2dnZXJcXFwiIHdpdGggZXJyb3I6IFwiLCBlcnIpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgbG9nZ2VyID0gbmV3IFByb3h5TG9nZ2VyKHByb3ZpZGVkTG9nZ2VyKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRyYW5zZm9ybUlucHV0KCkge1xuXHRcdFx0XHRcdHJldHVybiB7IGN0eDogeyBsb2dnZXIgfSB9O1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRiZWZvcmVFeGVjdXRpb24oKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLmVuYWJsZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0cmFuc2Zvcm1PdXRwdXQoeyByZXN1bHQ6IHsgZXJyb3IgfSB9KSB7XG5cdFx0XHRcdFx0aWYgKGVycm9yKSBsb2dnZXIuZXJyb3IoZXJyb3IpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhc3luYyBiZWZvcmVSZXNwb25zZSgpIHtcblx0XHRcdFx0XHRhd2FpdCBsb2dnZXIuZmx1c2goKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9IH07XG5cdH1cbn0pXSk7XG4oZnVuY3Rpb24oX0lubmdlc3QpIHtcblx0X0lubmdlc3QuVGFnID0gXCJJbm5nZXN0LkFwcFwiO1xufSkoSW5uZ2VzdCB8fCAoSW5uZ2VzdCA9IHt9KSk7XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgSW5uZ2VzdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5uZ2VzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/Inngest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestCommHandler.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/components/InngestCommHandler.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InngestCommHandler: () => (/* binding */ InngestCommHandler)\n/* harmony export */ });\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\n/* harmony import */ var _helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/* harmony import */ var _helpers_env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n/* harmony import */ var _helpers_devserver_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\n/* harmony import */ var _helpers_enum_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../helpers/enum.js */ \"(rsc)/./node_modules/inngest/helpers/enum.js\");\n/* harmony import */ var _helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _execution_InngestExecution_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\n/* harmony import */ var _helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\n/* harmony import */ var _helpers_net_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../helpers/net.js */ \"(rsc)/./node_modules/inngest/helpers/net.js\");\n/* harmony import */ var _helpers_promises_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n/* harmony import */ var _helpers_ServerTiming_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/ServerTiming.js */ \"(rsc)/./node_modules/inngest/helpers/ServerTiming.js\");\n/* harmony import */ var _helpers_stream_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../helpers/stream.js */ \"(rsc)/./node_modules/inngest/helpers/stream.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/components/InngestCommHandler.ts\n/**\n* A schema for the response from Inngest when registering.\n*/\nconst registerResSchema = zod_v3__WEBPACK_IMPORTED_MODULE_1__.z.object({\n\tstatus: zod_v3__WEBPACK_IMPORTED_MODULE_1__.z.number().default(200),\n\tskipped: zod_v3__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional().default(false),\n\tmodified: zod_v3__WEBPACK_IMPORTED_MODULE_1__.z.boolean().optional().default(false),\n\terror: zod_v3__WEBPACK_IMPORTED_MODULE_1__.z.string().default(\"Successfully registered\")\n});\n/**\n* `InngestCommHandler` is a class for handling incoming requests from Inngest (or\n* Inngest's tooling such as the dev server or CLI) and taking appropriate\n* action for any served functions.\n*\n* All handlers (Next.js, RedwoodJS, Remix, Deno Fresh, etc.) are created using\n* this class; the exposed `serve` function will - most commonly - create an\n* instance of `InngestCommHandler` and then return `instance.createHandler()`.\n*\n* See individual parameter details for more information, or see the\n* source code for an existing handler, e.g.\n* {@link https://github.com/inngest/inngest-js/blob/main/src/next.ts}\n*\n* @example\n* ```\n* // my-custom-handler.ts\n* import {\n*   InngestCommHandler,\n*   type ServeHandlerOptions,\n* } from \"./components/InngestCommHandler\";\n*\n* export const serve = (options: ServeHandlerOptions) => {\n*   const handler = new InngestCommHandler({\n*     frameworkName: \"my-custom-handler\",\n*     ...options,\n*     handler: (req: Request) => {\n*       return {\n*         body: () => req.json(),\n*         headers: (key) => req.headers.get(key),\n*         method: () => req.method,\n*         url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n*         transformResponse: ({ body, status, headers }) => {\n*           return new Response(body, { status, headers });\n*         },\n*       };\n*     },\n*   });\n*\n*   return handler.createHandler();\n* };\n* ```\n*\n* @public\n*/\nvar InngestCommHandler = class {\n\t/**\n\t* The ID of this serve handler, e.g. `\"my-app\"`. It's recommended that this\n\t* value represents the overarching app/service that this set of functions is\n\t* being served from.\n\t*/\n\tid;\n\t/**\n\t* The handler specified during instantiation of the class.\n\t*/\n\thandler;\n\t/**\n\t* The URL of the Inngest function registration endpoint.\n\t*/\n\tinngestRegisterUrl;\n\t/**\n\t* The name of the framework this handler is designed for. Should be\n\t* lowercase, alphanumeric characters inclusive of `-` and `/`.\n\t*/\n\tframeworkName;\n\t/**\n\t* The signing key used to validate requests from Inngest. This is\n\t* intentionally mutable so that we can pick up the signing key from the\n\t* environment during execution if needed.\n\t*/\n\tsigningKey;\n\t/**\n\t* The same as signingKey, except used as a fallback when auth fails using the\n\t* primary signing key.\n\t*/\n\tsigningKeyFallback;\n\t/**\n\t* A property that can be set to indicate whether we believe we are in\n\t* production mode.\n\t*\n\t* Should be set every time a request is received.\n\t*/\n\t_mode;\n\t/**\n\t* The localized `fetch` implementation used by this handler.\n\t*/\n\tfetch;\n\t/**\n\t* The host used to access the Inngest serve endpoint, e.g.:\n\t*\n\t*     \"https://myapp.com\"\n\t*\n\t* By default, the library will try to infer this using request details such\n\t* as the \"Host\" header and request path, but sometimes this isn't possible\n\t* (e.g. when running in a more controlled environments such as AWS Lambda or\n\t* when dealing with proxies/redirects).\n\t*\n\t* Provide the custom hostname here to ensure that the path is reported\n\t* correctly when registering functions with Inngest.\n\t*\n\t* To also provide a custom path, use `servePath`.\n\t*/\n\t_serveHost;\n\t/**\n\t* The path to the Inngest serve endpoint. e.g.:\n\t*\n\t*     \"/some/long/path/to/inngest/endpoint\"\n\t*\n\t* By default, the library will try to infer this using request details such\n\t* as the \"Host\" header and request path, but sometimes this isn't possible\n\t* (e.g. when running in a more controlled environments such as AWS Lambda or\n\t* when dealing with proxies/redirects).\n\t*\n\t* Provide the custom path (excluding the hostname) here to ensure that the\n\t* path is reported correctly when registering functions with Inngest.\n\t*\n\t* To also provide a custom hostname, use `serveHost`.\n\t*/\n\t_servePath;\n\t/**\n\t* The minimum level to log from the Inngest serve handler.\n\t*/\n\tlogLevel;\n\tstreaming;\n\t/**\n\t* A private collection of just Inngest functions, as they have been passed\n\t* when instantiating the class.\n\t*/\n\trawFns;\n\tclient;\n\t/**\n\t* A private collection of functions that are being served. This map is used\n\t* to find and register functions when interacting with Inngest Cloud.\n\t*/\n\tfns = {};\n\tenv = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.allProcessEnv)();\n\tallowExpiredSignatures;\n\t_options;\n\tskipSignatureValidation;\n\tconstructor(options) {\n\t\tthis._options = options;\n\t\t/**\n\t\t* v2 -> v3 migration error.\n\t\t*\n\t\t* If a serve handler is passed a client as the first argument, it'll be\n\t\t* spread in to these options. We should be able to detect this by picking\n\t\t* up a unique property on the object.\n\t\t*/\n\t\tif (Object.hasOwn(options, \"eventKey\")) throw new Error(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.logPrefix} You've passed an Inngest client as the first argument to your serve handler. This is no longer supported in v3; please pass the Inngest client as the \\`client\\` property of an options object instead. See https://www.inngest.com/docs/sdk/migration`);\n\t\tthis.frameworkName = options.frameworkName;\n\t\tthis.client = options.client;\n\t\tif (options.id) console.warn(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.logPrefix} The \\`id\\` serve option is deprecated and will be removed in v4`);\n\t\tthis.id = options.id || this.client.id;\n\t\tthis.handler = options.handler;\n\t\t/**\n\t\t* Provide a hidden option to allow expired signatures to be accepted during\n\t\t* testing.\n\t\t*/\n\t\tthis.allowExpiredSignatures = Boolean(arguments[\"0\"]?.__testingAllowExpiredSignatures);\n\t\tthis.rawFns = options.functions.filter(Boolean);\n\t\tif (this.rawFns.length !== options.functions.length) console.warn(`Some functions passed to serve() are undefined and misconfigured.  Please check your imports.`);\n\t\tthis.fns = this.rawFns.reduce((acc, fn) => {\n\t\t\tconst configs = fn[\"getConfig\"]({\n\t\t\t\tbaseUrl: new URL(\"https://example.com\"),\n\t\t\t\tappPrefix: this.id\n\t\t\t});\n\t\t\tconst fns = configs.reduce((acc$1, { id }, index) => {\n\t\t\t\treturn {\n\t\t\t\t\t...acc$1,\n\t\t\t\t\t[id]: {\n\t\t\t\t\t\tfn,\n\t\t\t\t\t\tonFailure: Boolean(index)\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}, {});\n\t\t\tconfigs.forEach(({ id }) => {\n\t\t\t\tif (acc[id]) throw new Error(`Duplicate function ID \"${id}\"; please change a function's name or provide an explicit ID to avoid conflicts.`);\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t...fns\n\t\t\t};\n\t\t}, {});\n\t\tthis.inngestRegisterUrl = new URL(\"/fn/register\", this.apiBaseUrl);\n\t\tthis.signingKey = options.signingKey;\n\t\tthis.signingKeyFallback = options.signingKeyFallback;\n\t\tthis._serveHost = options.serveHost || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestServeHost];\n\t\tthis._servePath = options.servePath || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestServePath];\n\t\tthis.skipSignatureValidation = options.skipSignatureValidation || false;\n\t\tconst defaultLogLevel = \"info\";\n\t\tthis.logLevel = zod_v3__WEBPACK_IMPORTED_MODULE_1__.z[\"enum\"](_types_js__WEBPACK_IMPORTED_MODULE_4__.logLevels).default(defaultLogLevel).catch((ctx) => {\n\t\t\tthis.log(\"warn\", `Unknown log level passed: ${String(ctx.input)}; defaulting to ${defaultLogLevel}`);\n\t\t\treturn defaultLogLevel;\n\t\t}).parse(options.logLevel || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestLogLevel]);\n\t\tif (this.logLevel === \"debug\") {\n\t\t\t/**\n\t\t\t* `debug` is an old library; sometimes its runtime detection doesn't work\n\t\t\t* for newer pairings of framework/runtime.\n\t\t\t*\n\t\t\t* One silly symptom of this is that `Debug()` returns an anonymous\n\t\t\t* function with no extra properties instead of a `Debugger` instance if\n\t\t\t* the wrong code is consumed following a bad detection. This results in\n\t\t\t* the following `.enable()` call failing, so we just try carefully to\n\t\t\t* enable it here.\n\t\t\t*/\n\t\t\tif (debug__WEBPACK_IMPORTED_MODULE_0__.enable && typeof debug__WEBPACK_IMPORTED_MODULE_0__.enable === \"function\") debug__WEBPACK_IMPORTED_MODULE_0__.enable(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.debugPrefix}:*`);\n\t\t}\n\t\tconst defaultStreamingOption = false;\n\t\tthis.streaming = zod_v3__WEBPACK_IMPORTED_MODULE_1__.z.union([zod_v3__WEBPACK_IMPORTED_MODULE_1__.z[\"enum\"]([\"allow\", \"force\"]), zod_v3__WEBPACK_IMPORTED_MODULE_1__.z.literal(false)]).default(defaultStreamingOption).catch((ctx) => {\n\t\t\tthis.log(\"warn\", `Unknown streaming option passed: ${String(ctx.input)}; defaulting to ${String(defaultStreamingOption)}`);\n\t\t\treturn defaultStreamingOption;\n\t\t}).parse(options.streaming || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestStreaming]);\n\t\tthis.fetch = options.fetch ? (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.getFetch)(options.fetch) : this.client[\"fetch\"];\n\t}\n\t/**\n\t* Get the API base URL for the Inngest API.\n\t*\n\t* This is a getter to encourage checking the environment for the API base URL\n\t* each time it's accessed, as it may change during execution.\n\t*/\n\tget apiBaseUrl() {\n\t\treturn this._options.baseUrl || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestApiBaseUrl] || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestBaseUrl] || this.client.apiBaseUrl || _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.defaultInngestApiBaseUrl;\n\t}\n\t/**\n\t* Get the event API base URL for the Inngest API.\n\t*\n\t* This is a getter to encourage checking the environment for the event API\n\t* base URL each time it's accessed, as it may change during execution.\n\t*/\n\tget eventApiBaseUrl() {\n\t\treturn this._options.baseUrl || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestEventApiBaseUrl] || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestBaseUrl] || this.client.eventBaseUrl || _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.defaultInngestEventBaseUrl;\n\t}\n\t/**\n\t* The host used to access the Inngest serve endpoint, e.g.:\n\t*\n\t*     \"https://myapp.com\"\n\t*\n\t* By default, the library will try to infer this using request details such\n\t* as the \"Host\" header and request path, but sometimes this isn't possible\n\t* (e.g. when running in a more controlled environments such as AWS Lambda or\n\t* when dealing with proxies/redirects).\n\t*\n\t* Provide the custom hostname here to ensure that the path is reported\n\t* correctly when registering functions with Inngest.\n\t*\n\t* To also provide a custom path, use `servePath`.\n\t*/\n\tget serveHost() {\n\t\treturn this._serveHost || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestServeHost];\n\t}\n\t/**\n\t* The path to the Inngest serve endpoint. e.g.:\n\t*\n\t*     \"/some/long/path/to/inngest/endpoint\"\n\t*\n\t* By default, the library will try to infer this using request details such\n\t* as the \"Host\" header and request path, but sometimes this isn't possible\n\t* (e.g. when running in a more controlled environments such as AWS Lambda or\n\t* when dealing with proxies/redirects).\n\t*\n\t* Provide the custom path (excluding the hostname) here to ensure that the\n\t* path is reported correctly when registering functions with Inngest.\n\t*\n\t* To also provide a custom hostname, use `serveHost`.\n\t*\n\t* This is a getter to encourage checking the environment for the serve path\n\t* each time it's accessed, as it may change during execution.\n\t*/\n\tget servePath() {\n\t\treturn this._servePath || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestServePath];\n\t}\n\tget hashedEventKey() {\n\t\tif (!this.client[\"eventKey\"] || this.client[\"eventKey\"] === _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.dummyEventKey) return;\n\t\treturn (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.hashEventKey)(this.client[\"eventKey\"]);\n\t}\n\tget hashedSigningKey() {\n\t\tif (!this.signingKey) return;\n\t\treturn (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.hashSigningKey)(this.signingKey);\n\t}\n\tget hashedSigningKeyFallback() {\n\t\tif (!this.signingKeyFallback) return;\n\t\treturn (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.hashSigningKey)(this.signingKeyFallback);\n\t}\n\t/**\n\t* Returns a `boolean` representing whether this handler will stream responses\n\t* or not. Takes into account the user's preference and the platform's\n\t* capabilities.\n\t*/\n\tasync shouldStream(actions) {\n\t\tif (await actions.queryStringWithDefaults(\"testing for probe\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.queryKeys.Probe) !== void 0) return false;\n\t\tif (!actions.transformStreamingResponse) return false;\n\t\tif (this.streaming === \"force\") return true;\n\t\treturn this.streaming === \"allow\" && (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.platformSupportsStreaming)(this.frameworkName, this.env);\n\t}\n\t/**\n\t* `createHandler` should be used to return a type-equivalent version of the\n\t* `handler` specified during instantiation.\n\t*\n\t* @example\n\t* ```\n\t* // my-custom-handler.ts\n\t* import {\n\t*   InngestCommHandler,\n\t*   type ServeHandlerOptions,\n\t* } from \"./components/InngestCommHandler\";\n\t*\n\t* export const serve = (options: ServeHandlerOptions) => {\n\t*   const handler = new InngestCommHandler({\n\t*     frameworkName: \"my-custom-handler\",\n\t*     ...options,\n\t*     handler: (req: Request) => {\n\t*       return {\n\t*         body: () => req.json(),\n\t*         headers: (key) => req.headers.get(key),\n\t*         method: () => req.method,\n\t*         url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n\t*         transformResponse: ({ body, status, headers }) => {\n\t*           return new Response(body, { status, headers });\n\t*         },\n\t*       };\n\t*     },\n\t*   });\n\t*\n\t*   return handler.createHandler();\n\t* };\n\t* ```\n\t*/\n\tcreateHandler() {\n\t\tconst handler = async (...args) => {\n\t\t\tconst timer = new _helpers_ServerTiming_js__WEBPACK_IMPORTED_MODULE_6__.ServerTiming();\n\t\t\t/**\n\t\t\t* Used for testing, allow setting action overrides externally when\n\t\t\t* calling the handler. Always search the final argument.\n\t\t\t*/\n\t\t\tconst lastArg = args[args.length - 1];\n\t\t\tconst actionOverrides = typeof lastArg === \"object\" && lastArg !== null && \"actionOverrides\" in lastArg && typeof lastArg[\"actionOverrides\"] === \"object\" && lastArg[\"actionOverrides\"] !== null ? lastArg[\"actionOverrides\"] : {};\n\t\t\t/**\n\t\t\t* We purposefully `await` the handler, as it could be either sync or\n\t\t\t* async.\n\t\t\t*/\n\t\t\tconst rawActions = {\n\t\t\t\t...await timer.wrap(\"handler\", () => this.handler(...args)).catch((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.rethrowError)(\"Serve handler failed to run\")),\n\t\t\t\t...actionOverrides\n\t\t\t};\n\t\t\t/**\n\t\t\t* Mapped promisified handlers from userland `serve()` function mixed in\n\t\t\t* with some helpers.\n\t\t\t*/\n\t\t\tconst actions = {\n\t\t\t\t...Object.entries(rawActions).reduce((acc, [key, value]) => {\n\t\t\t\t\tif (typeof value !== \"function\") return acc;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t[key]: (reason, ...args$1) => {\n\t\t\t\t\t\t\tconst errMessage = [`Failed calling \\`${key}\\` from serve handler`, reason].filter(Boolean).join(\" when \");\n\t\t\t\t\t\t\tconst fn = () => value(...args$1);\n\t\t\t\t\t\t\treturn (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_8__.runAsPromise)(fn).catch((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.rethrowError)(errMessage)).catch((err) => {\n\t\t\t\t\t\t\t\tthis.log(\"error\", err);\n\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}, {}),\n\t\t\t\tqueryStringWithDefaults: async (reason, key) => {\n\t\t\t\t\tconst url = await actions.url(reason);\n\t\t\t\t\treturn await actions.queryString?.(reason, key, url) || url.searchParams.get(key) || void 0;\n\t\t\t\t},\n\t\t\t\t...actionOverrides\n\t\t\t};\n\t\t\tconst [env, expectedServerKind] = await Promise.all([actions.env?.(\"starting to handle request\"), actions.headers(\"checking expected server kind\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.InngestServerKind)]);\n\t\t\tthis.env = {\n\t\t\t\t...(0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.allProcessEnv)(),\n\t\t\t\t...env\n\t\t\t};\n\t\t\tconst getInngestHeaders = () => (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.inngestHeaders)({\n\t\t\t\tenv: this.env,\n\t\t\t\tframework: this.frameworkName,\n\t\t\t\tclient: this.client,\n\t\t\t\texpectedServerKind: expectedServerKind || void 0,\n\t\t\t\textras: { \"Server-Timing\": timer.getHeader() }\n\t\t\t});\n\t\t\tconst assumedMode = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.getMode)({\n\t\t\t\tenv: this.env,\n\t\t\t\tclient: this.client\n\t\t\t});\n\t\t\tif (assumedMode.isExplicit) this._mode = assumedMode;\n\t\t\telse {\n\t\t\t\tconst serveIsProd = await actions.isProduction?.(\"starting to handle request\");\n\t\t\t\tif (typeof serveIsProd === \"boolean\") this._mode = new _helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.Mode({\n\t\t\t\t\ttype: serveIsProd ? \"cloud\" : \"dev\",\n\t\t\t\t\tisExplicit: false\n\t\t\t\t});\n\t\t\t\telse this._mode = assumedMode;\n\t\t\t}\n\t\t\tthis.upsertKeysFromEnv();\n\t\t\tconst methodP = actions.method(\"starting to handle request\");\n\t\t\tconst headerPromises = [_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.TraceParent, _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.TraceState].map(async (header) => {\n\t\t\t\tconst value = await actions.headers(`fetching ${header} for forwarding`, header);\n\t\t\t\treturn {\n\t\t\t\t\theader,\n\t\t\t\t\tvalue\n\t\t\t\t};\n\t\t\t});\n\t\t\tconst contentLength = await actions.headers(\"checking signature for request\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.ContentLength).then((value) => {\n\t\t\t\tif (!value) return;\n\t\t\t\treturn Number.parseInt(value, 10);\n\t\t\t});\n\t\t\tconst [signature, method, body] = await Promise.all([\n\t\t\t\tactions.headers(\"checking signature for request\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.Signature).then((headerSignature) => {\n\t\t\t\t\treturn headerSignature ?? void 0;\n\t\t\t\t}),\n\t\t\t\tmethodP,\n\t\t\t\tmethodP.then((method$1) => {\n\t\t\t\t\tif (method$1 === \"POST\" || method$1 === \"PUT\") {\n\t\t\t\t\t\tif (!contentLength) return \"\";\n\t\t\t\t\t\treturn actions.body(`checking body for request signing as method is ${method$1}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn \"\";\n\t\t\t\t})\n\t\t\t]);\n\t\t\tconst signatureValidation = this.validateSignature(signature, body);\n\t\t\tconst headersToForwardP = Promise.all(headerPromises).then((fetchedHeaders) => {\n\t\t\t\treturn fetchedHeaders.reduce((acc, { header, value }) => {\n\t\t\t\t\tif (value) acc[header] = value;\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {});\n\t\t\t});\n\t\t\tconst actionRes = timer.wrap(\"action\", () => this.handleAction({\n\t\t\t\tactions,\n\t\t\t\ttimer,\n\t\t\t\tgetInngestHeaders,\n\t\t\t\treqArgs: args,\n\t\t\t\tsignatureValidation,\n\t\t\t\tbody,\n\t\t\t\tmethod,\n\t\t\t\theaders: headersToForwardP\n\t\t\t}));\n\t\t\t/**\n\t\t\t* Prepares an action response by merging returned data to provide\n\t\t\t* trailing information such as `Server-Timing` headers.\n\t\t\t*\n\t\t\t* It should always prioritize the headers returned by the action, as they\n\t\t\t* may contain important information such as `Content-Type`.\n\t\t\t*/\n\t\t\tconst prepareActionRes = async (res) => {\n\t\t\t\tconst headers = {\n\t\t\t\t\t...getInngestHeaders(),\n\t\t\t\t\t...await headersToForwardP,\n\t\t\t\t\t...res.headers,\n\t\t\t\t\t...res.version === null ? {} : { [_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.RequestVersion]: (res.version ?? _execution_InngestExecution_js__WEBPACK_IMPORTED_MODULE_9__.PREFERRED_EXECUTION_VERSION).toString() }\n\t\t\t\t};\n\t\t\t\tlet signature$1;\n\t\t\t\ttry {\n\t\t\t\t\tsignature$1 = await signatureValidation.then((result) => {\n\t\t\t\t\t\tif (!result.success || !result.keyUsed) return;\n\t\t\t\t\t\treturn this.getResponseSignature(result.keyUsed, res.body);\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...res,\n\t\t\t\t\t\theaders,\n\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(err)),\n\t\t\t\t\t\tstatus: 500\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (signature$1) headers[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.Signature] = signature$1;\n\t\t\t\treturn {\n\t\t\t\t\t...res,\n\t\t\t\t\theaders\n\t\t\t\t};\n\t\t\t};\n\t\t\tif (await this.shouldStream(actions)) {\n\t\t\t\tif (await actions.method(\"starting streaming response\") === \"POST\") {\n\t\t\t\t\tconst { stream, finalize } = await (0,_helpers_stream_js__WEBPACK_IMPORTED_MODULE_10__.createStream)();\n\t\t\t\t\t/**\n\t\t\t\t\t* Errors are handled by `handleAction` here to ensure that an\n\t\t\t\t\t* appropriate response is always given.\n\t\t\t\t\t*/\n\t\t\t\t\tactionRes.then((res) => {\n\t\t\t\t\t\treturn finalize(prepareActionRes(res));\n\t\t\t\t\t});\n\t\t\t\t\treturn timer.wrap(\"res\", () => {\n\t\t\t\t\t\treturn actions.transformStreamingResponse?.(\"starting streaming response\", {\n\t\t\t\t\t\t\tstatus: 201,\n\t\t\t\t\t\t\theaders: getInngestHeaders(),\n\t\t\t\t\t\t\tbody: stream,\n\t\t\t\t\t\t\tversion: null\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn timer.wrap(\"res\", async () => {\n\t\t\t\treturn actionRes.then(prepareActionRes).then((actionRes$1) => {\n\t\t\t\t\treturn actions.transformResponse(\"sending back response\", actionRes$1);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\t/**\n\t\t* Some platforms check (at runtime) the length of the function being used\n\t\t* to handle an endpoint. If this is a variadic function, it will fail that\n\t\t* check.\n\t\t*\n\t\t* Therefore, we expect the arguments accepted to be the same length as the\n\t\t* `handler` function passed internally.\n\t\t*\n\t\t* We also set a name to avoid a common useless name in tracing such as\n\t\t* `\"anonymous\"` or `\"bound function\"`.\n\t\t*\n\t\t* https://github.com/getsentry/sentry-javascript/issues/3284\n\t\t*/\n\t\tObject.defineProperties(handler, {\n\t\t\tname: { value: \"InngestHandler\" },\n\t\t\tlength: { value: this.handler.length }\n\t\t});\n\t\treturn handler;\n\t}\n\tget mode() {\n\t\treturn this._mode;\n\t}\n\tset mode(m) {\n\t\tthis._mode = m;\n\t\tif (m) this.client[\"mode\"] = m;\n\t}\n\t/**\n\t* Given a set of functions to check if an action is available from the\n\t* instance's handler, enact any action that is found.\n\t*\n\t* This method can fetch varying payloads of data, but ultimately is the place\n\t* where _decisions_ are made regarding functionality.\n\t*\n\t* For example, if we find that we should be viewing the UI, this function\n\t* will decide whether the UI should be visible based on the payload it has\n\t* found (e.g. env vars, options, etc).\n\t*/\n\tasync handleAction({ actions, timer, getInngestHeaders, reqArgs, signatureValidation, body, method, headers }) {\n\t\tconst isMissingBody = body === void 0;\n\t\ttry {\n\t\t\tlet url = await actions.url(\"starting to handle request\");\n\t\t\tif (method === \"POST\") {\n\t\t\t\tif (isMissingBody) {\n\t\t\t\t\tthis.log(\"error\", \"Missing body when executing, possibly due to missing request body middleware\");\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 500,\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(/* @__PURE__ */ new Error(\"Missing request body when executing, possibly due to missing request body middleware\"))),\n\t\t\t\t\t\tversion: void 0\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst validationResult = await signatureValidation;\n\t\t\t\tif (!validationResult.success) return {\n\t\t\t\t\tstatus: 401,\n\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(validationResult.err)),\n\t\t\t\t\tversion: void 0\n\t\t\t\t};\n\t\t\t\tconst rawProbe = await actions.queryStringWithDefaults(\"testing for probe\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.queryKeys.Probe);\n\t\t\t\tif (rawProbe) {\n\t\t\t\t\tconst probe$1 = (0,_helpers_enum_js__WEBPACK_IMPORTED_MODULE_11__.enumFromValue)(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.probe, rawProbe);\n\t\t\t\t\tif (!probe$1) return {\n\t\t\t\t\t\tstatus: 400,\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(/* @__PURE__ */ new Error(`Unknown probe \"${rawProbe}\"`))),\n\t\t\t\t\t\tversion: void 0\n\t\t\t\t\t};\n\t\t\t\t\treturn { [_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.probe.Trust]: () => ({\n\t\t\t\t\t\tstatus: 200,\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: \"\",\n\t\t\t\t\t\tversion: void 0\n\t\t\t\t\t}) }[probe$1]();\n\t\t\t\t}\n\t\t\t\tconst fnId = await actions.queryStringWithDefaults(\"processing run request\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.queryKeys.FnId);\n\t\t\t\tif (!fnId) throw new Error(\"No function ID found in request\");\n\t\t\t\tconst stepId = await actions.queryStringWithDefaults(\"processing run request\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.queryKeys.StepId) || null;\n\t\t\t\tconst { version: version$1, result } = this.runStep({\n\t\t\t\t\tfunctionId: fnId,\n\t\t\t\t\tdata: body,\n\t\t\t\t\tstepId,\n\t\t\t\t\ttimer,\n\t\t\t\t\treqArgs,\n\t\t\t\t\theaders: await headers\n\t\t\t\t});\n\t\t\t\tconst stepOutput = await result;\n\t\t\t\t/**\n\t\t\t\t* Functions can return `undefined`, but we'll always convert this to\n\t\t\t\t* `null`, as this is appropriately serializable by JSON.\n\t\t\t\t*/\n\t\t\t\tconst opDataUndefinedToNull = (op) => {\n\t\t\t\t\top.data = (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__.undefinedToNull)(op.data);\n\t\t\t\t\treturn op;\n\t\t\t\t};\n\t\t\t\tconst handler = {\n\t\t\t\t\t\"function-rejected\": (result$1) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: result$1.retriable ? 500 : 400,\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.NoRetry]: result$1.retriable ? \"false\" : \"true\",\n\t\t\t\t\t\t\t\t...typeof result$1.retriable === \"string\" ? { [_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.RetryAfter]: result$1.retriable } : {}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)((0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__.undefinedToNull)(result$1.error)),\n\t\t\t\t\t\t\tversion: version$1\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t\"function-resolved\": (result$1) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 200,\n\t\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)((0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__.undefinedToNull)(result$1.data)),\n\t\t\t\t\t\t\tversion: version$1\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t\"step-not-found\": (result$1) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 500,\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.NoRetry]: \"false\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)({ error: `Could not find step \"${result$1.step.displayName || result$1.step.id}\" to run; timed out` }),\n\t\t\t\t\t\t\tversion: version$1\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t\"step-ran\": (result$1) => {\n\t\t\t\t\t\tconst step = opDataUndefinedToNull(result$1.step);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 206,\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\t\t...typeof result$1.retriable !== \"undefined\" ? {\n\t\t\t\t\t\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.NoRetry]: result$1.retriable ? \"false\" : \"true\",\n\t\t\t\t\t\t\t\t\t...typeof result$1.retriable === \"string\" ? { [_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.RetryAfter]: result$1.retriable } : {}\n\t\t\t\t\t\t\t\t} : {}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)([step]),\n\t\t\t\t\t\t\tversion: version$1\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t\"steps-found\": (result$1) => {\n\t\t\t\t\t\tconst steps = result$1.steps.map(opDataUndefinedToNull);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 206,\n\t\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(steps),\n\t\t\t\t\t\t\tversion: version$1\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}[stepOutput.type];\n\t\t\t\ttry {\n\t\t\t\t\treturn await handler(stepOutput);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.log(\"error\", \"Error handling execution result\", err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst env = getInngestHeaders()[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.Environment] ?? null;\n\t\t\tif (method === \"GET\") return {\n\t\t\t\tstatus: 200,\n\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(await this.introspectionBody({\n\t\t\t\t\tactions,\n\t\t\t\t\tenv,\n\t\t\t\t\tsignatureValidation,\n\t\t\t\t\turl\n\t\t\t\t})),\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\tversion: void 0\n\t\t\t};\n\t\t\tif (method === \"PUT\") {\n\t\t\t\tconst [deployId, inBandSyncRequested] = await Promise.all([actions.queryStringWithDefaults(\"processing deployment request\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.queryKeys.DeployId).then((deployId$1) => {\n\t\t\t\t\treturn deployId$1 === \"undefined\" ? void 0 : deployId$1;\n\t\t\t\t}), Promise.resolve((0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.parseAsBoolean)(this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestAllowInBandSync])).then((allowInBandSync) => {\n\t\t\t\t\tif (allowInBandSync !== void 0 && !allowInBandSync) return _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.syncKind.OutOfBand;\n\t\t\t\t\treturn actions.headers(\"processing deployment request\", _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.InngestSyncKind);\n\t\t\t\t}).then((kind) => {\n\t\t\t\t\treturn kind === _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.syncKind.InBand;\n\t\t\t\t})]);\n\t\t\t\tif (inBandSyncRequested) {\n\t\t\t\t\tif (isMissingBody) {\n\t\t\t\t\t\tthis.log(\"error\", \"Missing body when syncing, possibly due to missing request body middleware\");\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tstatus: 500,\n\t\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(/* @__PURE__ */ new Error(\"Missing request body when syncing, possibly due to missing request body middleware\"))),\n\t\t\t\t\t\t\tversion: void 0\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tif (!(await signatureValidation).success) return {\n\t\t\t\t\t\tstatus: 401,\n\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)({ code: \"sig_verification_failed\" }),\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tversion: void 0\n\t\t\t\t\t};\n\t\t\t\t\tconst res = _types_js__WEBPACK_IMPORTED_MODULE_4__.inBandSyncRequestBodySchema.safeParse(body);\n\t\t\t\t\tif (!res.success) return {\n\t\t\t\t\t\tstatus: 400,\n\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)({\n\t\t\t\t\t\t\tcode: \"invalid_request\",\n\t\t\t\t\t\t\tmessage: res.error.message\n\t\t\t\t\t\t}),\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tversion: void 0\n\t\t\t\t\t};\n\t\t\t\t\turl = this.reqUrl(new URL(res.data.url));\n\t\t\t\t\tconst respBody = await this.inBandRegisterBody({\n\t\t\t\t\t\tactions,\n\t\t\t\t\t\tdeployId,\n\t\t\t\t\t\tenv,\n\t\t\t\t\t\tsignatureValidation,\n\t\t\t\t\t\turl\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 200,\n\t\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(respBody),\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.InngestSyncKind]: _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.syncKind.InBand\n\t\t\t\t\t\t},\n\t\t\t\t\t\tversion: void 0\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst { status, message, modified } = await this.register(this.reqUrl(url), deployId, getInngestHeaders);\n\t\t\t\treturn {\n\t\t\t\t\tstatus,\n\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)({\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tmodified\n\t\t\t\t\t}),\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.InngestSyncKind]: _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.syncKind.OutOfBand\n\t\t\t\t\t},\n\t\t\t\t\tversion: void 0\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\tstatus: 500,\n\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)({\n\t\t\t\t\ttype: \"internal\",\n\t\t\t\t\t...(0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(err)\n\t\t\t\t}),\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\tversion: void 0\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tstatus: 405,\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmessage: \"No action found; request was likely not POST, PUT, or GET\",\n\t\t\t\tmode: this._mode\n\t\t\t}),\n\t\t\theaders: {},\n\t\t\tversion: void 0\n\t\t};\n\t}\n\trunStep({ functionId, stepId, data, timer, reqArgs, headers }) {\n\t\tconst fn = this.fns[functionId];\n\t\tif (!fn) throw new Error(`Could not find function with ID \"${functionId}\"`);\n\t\tconst immediateFnData = (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__.parseFnData)(data);\n\t\tlet { version: version$1 } = immediateFnData;\n\t\tif (version$1 === _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.ExecutionVersion.V1 && fn.fn[\"shouldOptimizeParallelism\"]?.()) version$1 = _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.ExecutionVersion.V2;\n\t\tconst result = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_8__.runAsPromise)(async () => {\n\t\t\tconst anyFnData = await (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__.fetchAllFnData)({\n\t\t\t\tdata: immediateFnData,\n\t\t\t\tapi: this.client[\"inngestApi\"],\n\t\t\t\tversion: version$1\n\t\t\t});\n\t\t\tif (!anyFnData.ok) throw new Error(anyFnData.error);\n\t\t\tconst executionOptions = await ((s) => s)({\n\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.ExecutionVersion.V0]: ({ event, events, steps, ctx, version: version$2 }) => {\n\t\t\t\t\tconst stepState = Object.entries(steps ?? {}).reduce((acc, [id, data$1]) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t[id]: {\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tdata: data$1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}, {});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tversion: version$2,\n\t\t\t\t\t\tpartialOptions: {\n\t\t\t\t\t\t\tclient: this.client,\n\t\t\t\t\t\t\trunId: ctx?.run_id || \"\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t\t\tevents,\n\t\t\t\t\t\t\t\trunId: ctx?.run_id || \"\",\n\t\t\t\t\t\t\t\tattempt: ctx?.attempt ?? 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstepState,\n\t\t\t\t\t\t\trequestedRunStep: stepId === \"step\" ? void 0 : stepId || void 0,\n\t\t\t\t\t\t\ttimer,\n\t\t\t\t\t\t\tisFailureHandler: fn.onFailure,\n\t\t\t\t\t\t\tstepCompletionOrder: ctx?.stack?.stack ?? [],\n\t\t\t\t\t\t\treqArgs,\n\t\t\t\t\t\t\theaders\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.ExecutionVersion.V1]: ({ event, events, steps, ctx, version: version$2 }) => {\n\t\t\t\t\tconst stepState = Object.entries(steps ?? {}).reduce((acc, [id, result$1]) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t[id]: result$1.type === \"data\" ? {\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tdata: result$1.data\n\t\t\t\t\t\t\t} : result$1.type === \"input\" ? {\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tinput: result$1.input\n\t\t\t\t\t\t\t} : {\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\terror: result$1.error\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}, {});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tversion: version$2,\n\t\t\t\t\t\tpartialOptions: {\n\t\t\t\t\t\t\tclient: this.client,\n\t\t\t\t\t\t\trunId: ctx?.run_id || \"\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t\t\tevents,\n\t\t\t\t\t\t\t\trunId: ctx?.run_id || \"\",\n\t\t\t\t\t\t\t\tattempt: ctx?.attempt ?? 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstepState,\n\t\t\t\t\t\t\trequestedRunStep: stepId === \"step\" ? void 0 : stepId || void 0,\n\t\t\t\t\t\t\ttimer,\n\t\t\t\t\t\t\tisFailureHandler: fn.onFailure,\n\t\t\t\t\t\t\tdisableImmediateExecution: ctx?.disable_immediate_execution,\n\t\t\t\t\t\t\tstepCompletionOrder: ctx?.stack?.stack ?? [],\n\t\t\t\t\t\t\treqArgs,\n\t\t\t\t\t\t\theaders\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.ExecutionVersion.V2]: ({ event, events, steps, ctx, version: version$2 }) => {\n\t\t\t\t\tconst stepState = Object.entries(steps ?? {}).reduce((acc, [id, result$1]) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t[id]: result$1.type === \"data\" ? {\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tdata: result$1.data\n\t\t\t\t\t\t\t} : result$1.type === \"input\" ? {\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tinput: result$1.input\n\t\t\t\t\t\t\t} : {\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\terror: result$1.error\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}, {});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tversion: version$2,\n\t\t\t\t\t\tpartialOptions: {\n\t\t\t\t\t\t\tclient: this.client,\n\t\t\t\t\t\t\trunId: ctx?.run_id || \"\",\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t\t\tevents,\n\t\t\t\t\t\t\t\trunId: ctx?.run_id || \"\",\n\t\t\t\t\t\t\t\tattempt: ctx?.attempt ?? 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstepState,\n\t\t\t\t\t\t\trequestedRunStep: stepId === \"step\" ? void 0 : stepId || void 0,\n\t\t\t\t\t\t\ttimer,\n\t\t\t\t\t\t\tisFailureHandler: fn.onFailure,\n\t\t\t\t\t\t\tdisableImmediateExecution: ctx?.disable_immediate_execution,\n\t\t\t\t\t\t\tstepCompletionOrder: ctx?.stack?.stack ?? [],\n\t\t\t\t\t\t\treqArgs,\n\t\t\t\t\t\t\theaders\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t})[version$1](anyFnData.value);\n\t\t\treturn fn.fn[\"createExecution\"](executionOptions).start();\n\t\t});\n\t\treturn {\n\t\t\tversion: version$1,\n\t\t\tresult\n\t\t};\n\t}\n\tconfigs(url) {\n\t\tconst configs = Object.values(this.rawFns).reduce((acc, fn) => [...acc, ...fn[\"getConfig\"]({\n\t\t\tbaseUrl: url,\n\t\t\tappPrefix: this.id\n\t\t})], []);\n\t\tfor (const config of configs) {\n\t\t\tconst check = _types_js__WEBPACK_IMPORTED_MODULE_4__.functionConfigSchema.safeParse(config);\n\t\t\tif (!check.success) {\n\t\t\t\tconst errors = check.error.errors.map((err) => err.message).join(\"; \");\n\t\t\t\tthis.log(\"warn\", `Config invalid for function \"${config.id}\" : ${errors}`);\n\t\t\t}\n\t\t}\n\t\treturn configs;\n\t}\n\t/**\n\t* Return an Inngest serve endpoint URL given a potential `path` and `host`.\n\t*\n\t* Will automatically use the `serveHost` and `servePath` if they have been\n\t* set when registering.\n\t*/\n\treqUrl(url) {\n\t\tlet ret = new URL(url);\n\t\tconst serveHost = this.serveHost || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestServeHost];\n\t\tconst servePath = this.servePath || this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestServePath];\n\t\tif (servePath) ret.pathname = servePath;\n\t\tif (serveHost) ret = new URL(ret.pathname + ret.search, serveHost);\n\t\treturn ret;\n\t}\n\tregisterBody({ url, deployId }) {\n\t\treturn {\n\t\t\turl: url.href,\n\t\t\tdeployType: \"ping\",\n\t\t\tframework: this.frameworkName,\n\t\t\tappName: this.id,\n\t\t\tfunctions: this.configs(url),\n\t\t\tsdk: `js:v${_version_js__WEBPACK_IMPORTED_MODULE_13__.version}`,\n\t\t\tv: \"0.1\",\n\t\t\tdeployId: deployId || void 0,\n\t\t\tcapabilities: {\n\t\t\t\ttrust_probe: \"v1\",\n\t\t\t\tconnect: \"v1\"\n\t\t\t},\n\t\t\tappVersion: this.client.appVersion\n\t\t};\n\t}\n\tasync inBandRegisterBody({ actions, deployId, env, signatureValidation, url }) {\n\t\tconst registerBody = this.registerBody({\n\t\t\tdeployId,\n\t\t\turl\n\t\t});\n\t\tconst introspectionBody = await this.introspectionBody({\n\t\t\tactions,\n\t\t\tenv,\n\t\t\tsignatureValidation,\n\t\t\turl\n\t\t});\n\t\tconst body = {\n\t\t\tapp_id: this.id,\n\t\t\tappVersion: this.client.appVersion,\n\t\t\tcapabilities: registerBody.capabilities,\n\t\t\tenv,\n\t\t\tframework: registerBody.framework,\n\t\t\tfunctions: registerBody.functions,\n\t\t\tinspection: introspectionBody,\n\t\t\tplatform: (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.getPlatformName)({\n\t\t\t\t...(0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.allProcessEnv)(),\n\t\t\t\t...this.env\n\t\t\t}),\n\t\t\tsdk_author: \"inngest\",\n\t\t\tsdk_language: \"\",\n\t\t\tsdk_version: \"\",\n\t\t\tsdk: registerBody.sdk,\n\t\t\turl: registerBody.url\n\t\t};\n\t\tif (introspectionBody.authentication_succeeded) {\n\t\t\tbody.sdk_language = introspectionBody.sdk_language;\n\t\t\tbody.sdk_version = introspectionBody.sdk_version;\n\t\t}\n\t\treturn body;\n\t}\n\tasync introspectionBody({ actions, env, signatureValidation, url }) {\n\t\tconst registerBody = this.registerBody({\n\t\t\turl: this.reqUrl(url),\n\t\t\tdeployId: null\n\t\t});\n\t\tif (!this._mode) throw new Error(\"No mode set; cannot introspect without mode\");\n\t\tlet introspection = {\n\t\t\tauthentication_succeeded: null,\n\t\t\textra: { is_mode_explicit: this._mode.isExplicit },\n\t\t\thas_event_key: this.client[\"eventKeySet\"](),\n\t\t\thas_signing_key: Boolean(this.signingKey),\n\t\t\tfunction_count: registerBody.functions.length,\n\t\t\tmode: this._mode.type,\n\t\t\tschema_version: \"2024-05-24\"\n\t\t};\n\t\tif (this._mode.type === \"cloud\") try {\n\t\t\tif (!(await signatureValidation).success) throw new Error(\"Signature validation failed\");\n\t\t\tintrospection = {\n\t\t\t\t...introspection,\n\t\t\t\tauthentication_succeeded: true,\n\t\t\t\tapi_origin: this.apiBaseUrl,\n\t\t\t\tapp_id: this.id,\n\t\t\t\tcapabilities: {\n\t\t\t\t\ttrust_probe: \"v1\",\n\t\t\t\t\tconnect: \"v1\"\n\t\t\t\t},\n\t\t\t\tenv,\n\t\t\t\tevent_api_origin: this.eventApiBaseUrl,\n\t\t\t\tevent_key_hash: this.hashedEventKey ?? null,\n\t\t\t\textra: {\n\t\t\t\t\t...introspection.extra,\n\t\t\t\t\tis_streaming: await this.shouldStream(actions)\n\t\t\t\t},\n\t\t\t\tframework: this.frameworkName,\n\t\t\t\tsdk_language: \"js\",\n\t\t\t\tsdk_version: _version_js__WEBPACK_IMPORTED_MODULE_13__.version,\n\t\t\t\tserve_origin: this.serveHost ?? null,\n\t\t\t\tserve_path: this.servePath ?? null,\n\t\t\t\tsigning_key_fallback_hash: this.hashedSigningKeyFallback ?? null,\n\t\t\t\tsigning_key_hash: this.hashedSigningKey ?? null\n\t\t\t};\n\t\t} catch {\n\t\t\tintrospection = {\n\t\t\t\t...introspection,\n\t\t\t\tauthentication_succeeded: false\n\t\t\t};\n\t\t}\n\t\treturn introspection;\n\t}\n\tasync register(url, deployId, getHeaders) {\n\t\tconst body = this.registerBody({\n\t\t\turl,\n\t\t\tdeployId\n\t\t});\n\t\tlet res;\n\t\tlet registerURL = new URL(this.inngestRegisterUrl.href);\n\t\tif (this._mode && this._mode.isInferred && this._mode.isDev) {\n\t\t\tconst host = (0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_2__.devServerHost)(this.env);\n\t\t\tif (await (0,_helpers_devserver_js__WEBPACK_IMPORTED_MODULE_14__.devServerAvailable)(host, this.fetch)) registerURL = (0,_helpers_devserver_js__WEBPACK_IMPORTED_MODULE_14__.devServerUrl)(host, \"/fn/register\");\n\t\t} else if (this._mode?.explicitDevUrl) registerURL = (0,_helpers_devserver_js__WEBPACK_IMPORTED_MODULE_14__.devServerUrl)(this._mode.explicitDevUrl.href, \"/fn/register\");\n\t\tif (deployId) registerURL.searchParams.set(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.queryKeys.DeployId, deployId);\n\t\ttry {\n\t\t\tres = await (0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_15__.fetchWithAuthFallback)({\n\t\t\t\tauthToken: this.hashedSigningKey,\n\t\t\t\tauthTokenFallback: this.hashedSigningKeyFallback,\n\t\t\t\tfetch: this.fetch,\n\t\t\t\turl: registerURL.href,\n\t\t\t\toptions: {\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\tbody: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(body),\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t...getHeaders(),\n\t\t\t\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.InngestSyncKind]: _helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.syncKind.OutOfBand\n\t\t\t\t\t},\n\t\t\t\t\tredirect: \"follow\"\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tthis.log(\"error\", err);\n\t\t\treturn {\n\t\t\t\tstatus: 500,\n\t\t\t\tmessage: `Failed to register${err instanceof Error ? `; ${err.message}` : \"\"}`,\n\t\t\t\tmodified: false\n\t\t\t};\n\t\t}\n\t\tconst raw = await res.text();\n\t\tlet data = {};\n\t\ttry {\n\t\t\tdata = JSON.parse(raw);\n\t\t} catch (err) {\n\t\t\tthis.log(\"warn\", \"Couldn't unpack register response:\", err);\n\t\t\tlet message = \"Failed to register\";\n\t\t\tif (err instanceof Error) message += `; ${err.message}`;\n\t\t\tmessage += `; status code: ${res.status}`;\n\t\t\treturn {\n\t\t\t\tstatus: 500,\n\t\t\t\tmessage,\n\t\t\t\tmodified: false\n\t\t\t};\n\t\t}\n\t\tlet status;\n\t\tlet error;\n\t\tlet skipped;\n\t\tlet modified;\n\t\ttry {\n\t\t\t({status, error, skipped, modified} = registerResSchema.parse(data));\n\t\t} catch (err) {\n\t\t\tthis.log(\"warn\", \"Invalid register response schema:\", err);\n\t\t\tlet message = \"Failed to register\";\n\t\t\tif (err instanceof Error) message += `; ${err.message}`;\n\t\t\tmessage += `; status code: ${res.status}`;\n\t\t\treturn {\n\t\t\t\tstatus: 500,\n\t\t\t\tmessage,\n\t\t\t\tmodified: false\n\t\t\t};\n\t\t}\n\t\tif (!skipped) this.log(\"debug\", \"registered inngest functions:\", res.status, res.statusText, data);\n\t\treturn {\n\t\t\tstatus,\n\t\t\tmessage: error,\n\t\t\tmodified\n\t\t};\n\t}\n\t/**\n\t* Given an environment, upsert any missing keys. This is useful in\n\t* situations where environment variables are passed directly to handlers or\n\t* are otherwise difficult to access during initialization.\n\t*/\n\tupsertKeysFromEnv() {\n\t\tif (this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestSigningKey]) {\n\t\t\tif (!this.signingKey) this.signingKey = String(this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestSigningKey]);\n\t\t\tthis.client[\"inngestApi\"].setSigningKey(this.signingKey);\n\t\t}\n\t\tif (this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestSigningKeyFallback]) {\n\t\t\tif (!this.signingKeyFallback) this.signingKeyFallback = String(this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestSigningKeyFallback]);\n\t\t\tthis.client[\"inngestApi\"].setSigningKeyFallback(this.signingKeyFallback);\n\t\t}\n\t\tif (!this.client[\"eventKeySet\"]() && this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestEventKey]) this.client.setEventKey(String(this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestEventKey]));\n\t\tif (this.env[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestDevServerUrl]) this.log(\"warn\", `Use of ${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestDevServerUrl} has been deprecated in v3; please use ${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestBaseUrl} instead. See https://www.inngest.com/docs/sdk/migration`);\n\t}\n\t/**\n\t* Validate the signature of a request and return the signing key used to\n\t* validate it.\n\t*/\n\tasync validateSignature(sig, body) {\n\t\ttry {\n\t\t\tif (this.skipSignatureValidation) return {\n\t\t\t\tsuccess: true,\n\t\t\t\tkeyUsed: \"\"\n\t\t\t};\n\t\t\tif (this._mode && !this._mode.isCloud) return {\n\t\t\t\tsuccess: true,\n\t\t\t\tkeyUsed: \"\"\n\t\t\t};\n\t\t\tif (!this.signingKey) throw new Error(`No signing key found in client options or ${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.envKeys.InngestSigningKey} env var. Find your keys at https://app.inngest.com/secrets`);\n\t\t\tif (!sig) throw new Error(`No ${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.Signature} provided`);\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tkeyUsed: new RequestSignature(sig).verifySignature({\n\t\t\t\t\tbody,\n\t\t\t\t\tallowExpiredSignatures: this.allowExpiredSignatures,\n\t\t\t\t\tsigningKey: this.signingKey,\n\t\t\t\t\tsigningKeyFallback: this.signingKeyFallback\n\t\t\t\t})\n\t\t\t};\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terr\n\t\t\t};\n\t\t}\n\t}\n\tgetResponseSignature(key, body) {\n\t\tconst now = Date.now();\n\t\tconst mac = (0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_15__.signDataWithKey)(body, key, now.toString());\n\t\treturn `t=${now}&s=${mac}`;\n\t}\n\t/**\n\t* Log to stdout/stderr if the log level is set to include the given level.\n\t* The default log level is `\"info\"`.\n\t*\n\t* This is an abstraction over `console.log` and will try to use the correct\n\t* method for the given log level.  For example, `log(\"error\", \"foo\")` will\n\t* call `console.error(\"foo\")`.\n\t*/\n\tlog(level, ...args) {\n\t\tconst logLevels$1 = [\n\t\t\t\"debug\",\n\t\t\t\"info\",\n\t\t\t\"warn\",\n\t\t\t\"error\",\n\t\t\t\"fatal\",\n\t\t\t\"silent\"\n\t\t];\n\t\tconst logLevelSetting = logLevels$1.indexOf(this.logLevel);\n\t\tif (logLevels$1.indexOf(level) >= logLevelSetting) {\n\t\t\tlet logger = console.log;\n\t\t\tif (Object.hasOwn(console, level)) logger = console[level];\n\t\t\tlogger(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.logPrefix} ${level} -`, ...args);\n\t\t}\n\t}\n};\nvar RequestSignature = class {\n\ttimestamp;\n\tsignature;\n\tconstructor(sig) {\n\t\tconst params = new URLSearchParams(sig);\n\t\tthis.timestamp = params.get(\"t\") || \"\";\n\t\tthis.signature = params.get(\"s\") || \"\";\n\t\tif (!this.timestamp || !this.signature) throw new Error(`Invalid ${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_3__.headerKeys.Signature} provided`);\n\t}\n\thasExpired(allowExpiredSignatures) {\n\t\tif (allowExpiredSignatures) return false;\n\t\treturn Date.now() - (/* @__PURE__ */ new Date(Number.parseInt(this.timestamp) * 1e3)).valueOf() > 1e3 * 60 * 5;\n\t}\n\t#verifySignature({ body, signingKey, allowExpiredSignatures }) {\n\t\tif (this.hasExpired(allowExpiredSignatures)) throw new Error(\"Signature has expired\");\n\t\tif ((0,_helpers_net_js__WEBPACK_IMPORTED_MODULE_15__.signDataWithKey)(body, signingKey, this.timestamp) !== this.signature) throw new Error(\"Invalid signature\");\n\t}\n\tverifySignature({ body, signingKey, signingKeyFallback, allowExpiredSignatures }) {\n\t\ttry {\n\t\t\tthis.#verifySignature({\n\t\t\t\tbody,\n\t\t\t\tsigningKey,\n\t\t\t\tallowExpiredSignatures\n\t\t\t});\n\t\t\treturn signingKey;\n\t\t} catch (err) {\n\t\t\tif (!signingKeyFallback) throw err;\n\t\t\tthis.#verifySignature({\n\t\t\t\tbody,\n\t\t\t\tsigningKey: signingKeyFallback,\n\t\t\t\tallowExpiredSignatures\n\t\t\t});\n\t\t\treturn signingKeyFallback;\n\t\t}\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=InngestCommHandler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RDb21tSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzTTtBQUM5SjtBQUN3QztBQUNzRjtBQUMzRjtBQUN4QjtBQUNpQjtBQUN1QjtBQUNiO0FBQ1M7QUFDWjtBQUNyQjtBQUNJO0FBQ047QUFDMUI7QUFDQzs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNENBQVE7QUFDbEMsU0FBUyw0Q0FBUTtBQUNqQixVQUFVLDZDQUFTO0FBQ25CLFdBQVcsNkNBQVM7QUFDcEIsUUFBUSw0Q0FBUTtBQUNoQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELDhCQUE4QjtBQUMvRSxnQ0FBZ0MsdUJBQXVCO0FBQ3ZELHdDQUF3QyxpQkFBaUI7QUFDekQsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sOERBQWE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELHlEQUFTLEVBQUUsZ0hBQWdIO0FBQ3hMO0FBQ0E7QUFDQSxrQ0FBa0MseURBQVMsRUFBRTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSix3Q0FBd0MsSUFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBSTtBQUNSLHNCQUFzQixJQUFJO0FBQzFCLDJEQUEyRCxHQUFHLEdBQUc7QUFDakUsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHVEQUFPO0FBQ3pELGtEQUFrRCx1REFBTztBQUN6RDtBQUNBO0FBQ0Esa0JBQWtCLDZDQUFNLENBQUMsZ0RBQVM7QUFDbEMsaURBQWlELG9CQUFvQixnQkFBZ0IsZ0JBQWdCO0FBQ3JHO0FBQ0EsR0FBRyxxQ0FBcUMsdURBQU87QUFDL0M7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyx5Q0FBWSxXQUFXLHlDQUFZLGlCQUFpQix5Q0FBWSxJQUFJLDJEQUFXLENBQUM7QUFDdkY7QUFDQTtBQUNBLG1CQUFtQiwyQ0FBTyxFQUFFLDZDQUFNLHNCQUFzQiw2Q0FBUztBQUNqRSx3REFBd0Qsb0JBQW9CLGdCQUFnQiwrQkFBK0I7QUFDM0g7QUFDQSxHQUFHLHNDQUFzQyx1REFBTztBQUNoRCwrQkFBK0IseURBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx1REFBTyxnQ0FBZ0MsdURBQU8sOENBQThDLHdFQUF3QjtBQUMvSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLHVEQUFPLHFDQUFxQyx1REFBTyxnREFBZ0QsMEVBQTBCO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsdURBQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx1REFBTztBQUM1QztBQUNBO0FBQ0EsOERBQThELDZEQUFhO0FBQzNFLFNBQVMsaUVBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxtRUFBYztBQUN2QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLG1FQUFjO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLHlEQUFTO0FBQzFFO0FBQ0E7QUFDQSx1Q0FBdUMsMEVBQXlCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsOEJBQThCO0FBQ2hGLGlDQUFpQyx1QkFBdUI7QUFDeEQseUNBQXlDLGlCQUFpQjtBQUMxRCxZQUFZO0FBQ1o7QUFDQSxRQUFRO0FBQ1IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGtFQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsZ0VBQVk7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLElBQUk7QUFDbkQ7QUFDQSxjQUFjLGtFQUFZLFdBQVcsZ0VBQVk7QUFDakQ7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzSkFBc0osMERBQVU7QUFDaEs7QUFDQSxPQUFPLDhEQUFhO0FBQ3BCO0FBQ0E7QUFDQSxtQ0FBbUMsK0RBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsSUFBSTtBQUNKLHVCQUF1Qix3REFBTztBQUM5QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxpREFBSTtBQUMvRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDBEQUFVLGNBQWMsMERBQVU7QUFDN0Qsb0RBQW9ELFFBQVE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osaUZBQWlGLDBEQUFVO0FBQzNGO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxzREFBc0QsMERBQVU7QUFDaEU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsU0FBUztBQUNyRjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxlQUFlO0FBQ3hEO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxJQUFJLENBQUMsMERBQVUsa0NBQWtDLHVGQUEyQjtBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFlBQVksOERBQVMsQ0FBQyxrRUFBYztBQUNwQztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsMERBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFtQixRQUFRLGlFQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUJBQXlCO0FBQ3BDLGFBQWE7QUFDYixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3RkFBd0Y7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvQ0FBb0M7QUFDckQsWUFBWSw4REFBUyxDQUFDLGtFQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQ0FBb0M7QUFDcEQsV0FBVyw4REFBUyxDQUFDLGtFQUFjO0FBQ25DO0FBQ0E7QUFDQSxnRkFBZ0YseURBQVM7QUFDekY7QUFDQSxxQkFBcUIsZ0VBQWEsQ0FBQyxxREFBSztBQUN4QztBQUNBO0FBQ0EsaUJBQWlCLG9DQUFvQztBQUNyRCxZQUFZLDhEQUFTLENBQUMsa0VBQWMsNkNBQTZDLFNBQVM7QUFDMUY7QUFDQTtBQUNBLGNBQWMsQ0FBQyxxREFBSztBQUNwQjtBQUNBLGlCQUFpQixvQ0FBb0M7QUFDckQ7QUFDQTtBQUNBLE1BQU0sR0FBRztBQUNUO0FBQ0EsaUZBQWlGLHlEQUFTO0FBQzFGO0FBQ0EsbUZBQW1GLHlEQUFTO0FBQzVGLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDBEQUFVO0FBQ25CLHNEQUFzRCxDQUFDLDBEQUFVLG1DQUFtQztBQUNwRyxRQUFRO0FBQ1IsYUFBYSw4REFBUyxDQUFDLHVFQUFlO0FBQ3RDO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9DQUFvQztBQUN0RCxhQUFhLDhEQUFTLENBQUMsdUVBQWU7QUFDdEM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywwREFBVTtBQUNuQixRQUFRO0FBQ1IsYUFBYSw4REFBUyxHQUFHLCtCQUErQiw4Q0FBOEMsVUFBVSxZQUFZO0FBQzVIO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDBEQUFVO0FBQ3BCLHVEQUF1RCxDQUFDLDBEQUFVLG1DQUFtQztBQUNyRyxVQUFVO0FBQ1YsUUFBUTtBQUNSLGFBQWEsOERBQVM7QUFDdEI7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvQ0FBb0M7QUFDdEQsYUFBYSw4REFBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywwREFBVTtBQUM3QztBQUNBO0FBQ0EsVUFBVSw4REFBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxnSUFBZ0kseURBQVM7QUFDekk7QUFDQSxLQUFLLG1CQUFtQiwrREFBYyxVQUFVLHVEQUFPO0FBQ3ZELGdFQUFnRSx3REFBUTtBQUN4RSw2REFBNkQsMERBQVU7QUFDdkUsS0FBSztBQUNMLHFCQUFxQix3REFBUTtBQUM3QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvQ0FBb0M7QUFDdEQsYUFBYSw4REFBUyxDQUFDLGtFQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhEQUFTLEdBQUcsaUNBQWlDO0FBQ3pELGlCQUFpQixvQ0FBb0M7QUFDckQ7QUFDQTtBQUNBLGlCQUFpQixrRUFBMkI7QUFDNUM7QUFDQTtBQUNBLFlBQVksOERBQVM7QUFDckI7QUFDQTtBQUNBLE9BQU87QUFDUCxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsWUFBWSw4REFBUztBQUNyQjtBQUNBO0FBQ0EsUUFBUSwwREFBVSxtQkFBbUIsd0RBQVE7QUFDN0MsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQSxXQUFXLDhEQUFTO0FBQ3BCO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU8sMERBQVUsbUJBQW1CLHdEQUFRO0FBQzVDLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFVBQVUsOERBQVM7QUFDbkI7QUFDQSxRQUFRLGtFQUFjO0FBQ3RCLEtBQUs7QUFDTCxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSxJQUFJO0FBQ0osY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbURBQW1EO0FBQzlEO0FBQ0EsK0RBQStELFdBQVc7QUFDMUUsMEJBQTBCLG1FQUFXO0FBQ3JDLFFBQVEscUJBQXFCO0FBQzdCLG9CQUFvQixnRUFBZ0IsMkRBQTJELGdFQUFnQjtBQUMvRyxpQkFBaUIsa0VBQVk7QUFDN0IsMkJBQTJCLHNFQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSyxnRUFBZ0IsU0FBUywrQ0FBK0M7QUFDN0UsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxJQUFJO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEtBQUssZ0VBQWdCLFNBQVMsK0NBQStDO0FBQzdFLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQUk7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxLQUFLLGdFQUFnQixTQUFTLCtDQUErQztBQUM3RSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxJQUFJO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxpQkFBaUIsMkRBQW9CO0FBQ3JDO0FBQ0Esd0VBQXdFO0FBQ3hFLHFEQUFxRCxVQUFVLE1BQU0sT0FBTztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsdURBQU87QUFDdEQsK0NBQStDLHVEQUFPO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpREFBTyxDQUFDO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGtEQUFrRDtBQUM5RTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnRUFBZTtBQUM1QixPQUFPLDhEQUFhO0FBQ3BCO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3Q0FBd0M7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0EsWUFBWSx5Q0FBeUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUIsaURBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4REFBYTtBQUM3QixhQUFhLDBFQUFrQixrQ0FBa0Msb0VBQVk7QUFDN0UsSUFBSSxtREFBbUQsb0VBQVk7QUFDbkUsNkNBQTZDLHlEQUFTO0FBQ3REO0FBQ0EsZUFBZSx1RUFBcUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4REFBUztBQUNwQjtBQUNBO0FBQ0EsT0FBTywwREFBVSxtQkFBbUIsd0RBQVE7QUFDNUMsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0osSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywwQkFBMEIsRUFBRSxZQUFZLE9BQU87QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDJDQUEyQyxFQUFFLFlBQVk7QUFDekQsaUJBQWlCLGVBQWUsV0FBVztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxrQ0FBa0M7QUFDdkMsSUFBSTtBQUNKO0FBQ0E7QUFDQSwyQ0FBMkMsRUFBRSxZQUFZO0FBQ3pELGlCQUFpQixlQUFlLFdBQVc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVEQUFPO0FBQ3RCLDJEQUEyRCx1REFBTztBQUNsRTtBQUNBO0FBQ0EsZUFBZSx1REFBTztBQUN0QiwyRUFBMkUsdURBQU87QUFDbEY7QUFDQTtBQUNBLGdEQUFnRCx1REFBTywyREFBMkQsdURBQU87QUFDekgsZUFBZSx1REFBTyxrREFBa0QsdURBQU8sc0JBQXNCLDJCQUEyQixhQUFhLHVEQUFPLGlCQUFpQjtBQUNySztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsdURBQU8sb0JBQW9CO0FBQ2pILG1DQUFtQywwREFBVSxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlFQUFlO0FBQzdCLGNBQWMsSUFBSSxLQUFLLElBQUk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHlEQUFTLEVBQUUsRUFBRSxPQUFPO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLDBEQUFVLFlBQVk7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQ0FBMEM7QUFDOUQ7QUFDQSxNQUFNLGlFQUFlO0FBQ3JCO0FBQ0EsbUJBQW1CLDhEQUE4RDtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RDb21tSGFuZGxlci5qcz8xOTczIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4ZWN1dGlvblZlcnNpb24sIGRlYnVnUHJlZml4LCBkZWZhdWx0SW5uZ2VzdEFwaUJhc2VVcmwsIGRlZmF1bHRJbm5nZXN0RXZlbnRCYXNlVXJsLCBkdW1teUV2ZW50S2V5LCBlbnZLZXlzLCBoZWFkZXJLZXlzLCBsb2dQcmVmaXgsIHByb2JlLCBxdWVyeUtleXMsIHN5bmNLaW5kIH0gZnJvbSBcIi4uL2hlbHBlcnMvY29uc3RzLmpzXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uL3ZlcnNpb24uanNcIjtcbmltcG9ydCB7IGhhc2hFdmVudEtleSwgaGFzaFNpZ25pbmdLZXksIHN0cmluZ2lmeSB9IGZyb20gXCIuLi9oZWxwZXJzL3N0cmluZ3MuanNcIjtcbmltcG9ydCB7IE1vZGUsIGFsbFByb2Nlc3NFbnYsIGRldlNlcnZlckhvc3QsIGdldEZldGNoLCBnZXRNb2RlLCBnZXRQbGF0Zm9ybU5hbWUsIGlubmdlc3RIZWFkZXJzLCBwYXJzZUFzQm9vbGVhbiwgcGxhdGZvcm1TdXBwb3J0c1N0cmVhbWluZyB9IGZyb20gXCIuLi9oZWxwZXJzL2Vudi5qc1wiO1xuaW1wb3J0IHsgZGV2U2VydmVyQXZhaWxhYmxlLCBkZXZTZXJ2ZXJVcmwgfSBmcm9tIFwiLi4vaGVscGVycy9kZXZzZXJ2ZXIuanNcIjtcbmltcG9ydCB7IGVudW1Gcm9tVmFsdWUgfSBmcm9tIFwiLi4vaGVscGVycy9lbnVtLmpzXCI7XG5pbXBvcnQgeyByZXRocm93RXJyb3IsIHNlcmlhbGl6ZUVycm9yIH0gZnJvbSBcIi4uL2hlbHBlcnMvZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBmdW5jdGlvbkNvbmZpZ1NjaGVtYSwgaW5CYW5kU3luY1JlcXVlc3RCb2R5U2NoZW1hLCBsb2dMZXZlbHMgfSBmcm9tIFwiLi4vdHlwZXMuanNcIjtcbmltcG9ydCB7IFBSRUZFUlJFRF9FWEVDVVRJT05fVkVSU0lPTiB9IGZyb20gXCIuL2V4ZWN1dGlvbi9Jbm5nZXN0RXhlY3V0aW9uLmpzXCI7XG5pbXBvcnQgeyBmZXRjaEFsbEZuRGF0YSwgcGFyc2VGbkRhdGEsIHVuZGVmaW5lZFRvTnVsbCB9IGZyb20gXCIuLi9oZWxwZXJzL2Z1bmN0aW9ucy5qc1wiO1xuaW1wb3J0IHsgZmV0Y2hXaXRoQXV0aEZhbGxiYWNrLCBzaWduRGF0YVdpdGhLZXkgfSBmcm9tIFwiLi4vaGVscGVycy9uZXQuanNcIjtcbmltcG9ydCB7IHJ1bkFzUHJvbWlzZSB9IGZyb20gXCIuLi9oZWxwZXJzL3Byb21pc2VzLmpzXCI7XG5pbXBvcnQgeyBTZXJ2ZXJUaW1pbmcgfSBmcm9tIFwiLi4vaGVscGVycy9TZXJ2ZXJUaW1pbmcuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVN0cmVhbSB9IGZyb20gXCIuLi9oZWxwZXJzL3N0cmVhbS5qc1wiO1xuaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2QvdjNcIjtcblxuLy8jcmVnaW9uIHNyYy9jb21wb25lbnRzL0lubmdlc3RDb21tSGFuZGxlci50c1xuLyoqXG4qIEEgc2NoZW1hIGZvciB0aGUgcmVzcG9uc2UgZnJvbSBJbm5nZXN0IHdoZW4gcmVnaXN0ZXJpbmcuXG4qL1xuY29uc3QgcmVnaXN0ZXJSZXNTY2hlbWEgPSB6Lm9iamVjdCh7XG5cdHN0YXR1czogei5udW1iZXIoKS5kZWZhdWx0KDIwMCksXG5cdHNraXBwZWQ6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG5cdG1vZGlmaWVkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuXHRlcnJvcjogei5zdHJpbmcoKS5kZWZhdWx0KFwiU3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWRcIilcbn0pO1xuLyoqXG4qIGBJbm5nZXN0Q29tbUhhbmRsZXJgIGlzIGEgY2xhc3MgZm9yIGhhbmRsaW5nIGluY29taW5nIHJlcXVlc3RzIGZyb20gSW5uZ2VzdCAob3JcbiogSW5uZ2VzdCdzIHRvb2xpbmcgc3VjaCBhcyB0aGUgZGV2IHNlcnZlciBvciBDTEkpIGFuZCB0YWtpbmcgYXBwcm9wcmlhdGVcbiogYWN0aW9uIGZvciBhbnkgc2VydmVkIGZ1bmN0aW9ucy5cbipcbiogQWxsIGhhbmRsZXJzIChOZXh0LmpzLCBSZWR3b29kSlMsIFJlbWl4LCBEZW5vIEZyZXNoLCBldGMuKSBhcmUgY3JlYXRlZCB1c2luZ1xuKiB0aGlzIGNsYXNzOyB0aGUgZXhwb3NlZCBgc2VydmVgIGZ1bmN0aW9uIHdpbGwgLSBtb3N0IGNvbW1vbmx5IC0gY3JlYXRlIGFuXG4qIGluc3RhbmNlIG9mIGBJbm5nZXN0Q29tbUhhbmRsZXJgIGFuZCB0aGVuIHJldHVybiBgaW5zdGFuY2UuY3JlYXRlSGFuZGxlcigpYC5cbipcbiogU2VlIGluZGl2aWR1YWwgcGFyYW1ldGVyIGRldGFpbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24sIG9yIHNlZSB0aGVcbiogc291cmNlIGNvZGUgZm9yIGFuIGV4aXN0aW5nIGhhbmRsZXIsIGUuZy5cbioge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbm5nZXN0L2lubmdlc3QtanMvYmxvYi9tYWluL3NyYy9uZXh0LnRzfVxuKlxuKiBAZXhhbXBsZVxuKiBgYGBcbiogLy8gbXktY3VzdG9tLWhhbmRsZXIudHNcbiogaW1wb3J0IHtcbiogICBJbm5nZXN0Q29tbUhhbmRsZXIsXG4qICAgdHlwZSBTZXJ2ZUhhbmRsZXJPcHRpb25zLFxuKiB9IGZyb20gXCIuL2NvbXBvbmVudHMvSW5uZ2VzdENvbW1IYW5kbGVyXCI7XG4qXG4qIGV4cG9ydCBjb25zdCBzZXJ2ZSA9IChvcHRpb25zOiBTZXJ2ZUhhbmRsZXJPcHRpb25zKSA9PiB7XG4qICAgY29uc3QgaGFuZGxlciA9IG5ldyBJbm5nZXN0Q29tbUhhbmRsZXIoe1xuKiAgICAgZnJhbWV3b3JrTmFtZTogXCJteS1jdXN0b20taGFuZGxlclwiLFxuKiAgICAgLi4ub3B0aW9ucyxcbiogICAgIGhhbmRsZXI6IChyZXE6IFJlcXVlc3QpID0+IHtcbiogICAgICAgcmV0dXJuIHtcbiogICAgICAgICBib2R5OiAoKSA9PiByZXEuanNvbigpLFxuKiAgICAgICAgIGhlYWRlcnM6IChrZXkpID0+IHJlcS5oZWFkZXJzLmdldChrZXkpLFxuKiAgICAgICAgIG1ldGhvZDogKCkgPT4gcmVxLm1ldGhvZCxcbiogICAgICAgICB1cmw6ICgpID0+IG5ldyBVUkwocmVxLnVybCwgYGh0dHBzOi8vJHtyZXEuaGVhZGVycy5nZXQoXCJob3N0XCIpIHx8IFwiXCJ9YCksXG4qICAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6ICh7IGJvZHksIHN0YXR1cywgaGVhZGVycyB9KSA9PiB7XG4qICAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGJvZHksIHsgc3RhdHVzLCBoZWFkZXJzIH0pO1xuKiAgICAgICAgIH0sXG4qICAgICAgIH07XG4qICAgICB9LFxuKiAgIH0pO1xuKlxuKiAgIHJldHVybiBoYW5kbGVyLmNyZWF0ZUhhbmRsZXIoKTtcbiogfTtcbiogYGBgXG4qXG4qIEBwdWJsaWNcbiovXG52YXIgSW5uZ2VzdENvbW1IYW5kbGVyID0gY2xhc3Mge1xuXHQvKipcblx0KiBUaGUgSUQgb2YgdGhpcyBzZXJ2ZSBoYW5kbGVyLCBlLmcuIGBcIm15LWFwcFwiYC4gSXQncyByZWNvbW1lbmRlZCB0aGF0IHRoaXNcblx0KiB2YWx1ZSByZXByZXNlbnRzIHRoZSBvdmVyYXJjaGluZyBhcHAvc2VydmljZSB0aGF0IHRoaXMgc2V0IG9mIGZ1bmN0aW9ucyBpc1xuXHQqIGJlaW5nIHNlcnZlZCBmcm9tLlxuXHQqL1xuXHRpZDtcblx0LyoqXG5cdCogVGhlIGhhbmRsZXIgc3BlY2lmaWVkIGR1cmluZyBpbnN0YW50aWF0aW9uIG9mIHRoZSBjbGFzcy5cblx0Ki9cblx0aGFuZGxlcjtcblx0LyoqXG5cdCogVGhlIFVSTCBvZiB0aGUgSW5uZ2VzdCBmdW5jdGlvbiByZWdpc3RyYXRpb24gZW5kcG9pbnQuXG5cdCovXG5cdGlubmdlc3RSZWdpc3RlclVybDtcblx0LyoqXG5cdCogVGhlIG5hbWUgb2YgdGhlIGZyYW1ld29yayB0aGlzIGhhbmRsZXIgaXMgZGVzaWduZWQgZm9yLiBTaG91bGQgYmVcblx0KiBsb3dlcmNhc2UsIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIGluY2x1c2l2ZSBvZiBgLWAgYW5kIGAvYC5cblx0Ki9cblx0ZnJhbWV3b3JrTmFtZTtcblx0LyoqXG5cdCogVGhlIHNpZ25pbmcga2V5IHVzZWQgdG8gdmFsaWRhdGUgcmVxdWVzdHMgZnJvbSBJbm5nZXN0LiBUaGlzIGlzXG5cdCogaW50ZW50aW9uYWxseSBtdXRhYmxlIHNvIHRoYXQgd2UgY2FuIHBpY2sgdXAgdGhlIHNpZ25pbmcga2V5IGZyb20gdGhlXG5cdCogZW52aXJvbm1lbnQgZHVyaW5nIGV4ZWN1dGlvbiBpZiBuZWVkZWQuXG5cdCovXG5cdHNpZ25pbmdLZXk7XG5cdC8qKlxuXHQqIFRoZSBzYW1lIGFzIHNpZ25pbmdLZXksIGV4Y2VwdCB1c2VkIGFzIGEgZmFsbGJhY2sgd2hlbiBhdXRoIGZhaWxzIHVzaW5nIHRoZVxuXHQqIHByaW1hcnkgc2lnbmluZyBrZXkuXG5cdCovXG5cdHNpZ25pbmdLZXlGYWxsYmFjaztcblx0LyoqXG5cdCogQSBwcm9wZXJ0eSB0aGF0IGNhbiBiZSBzZXQgdG8gaW5kaWNhdGUgd2hldGhlciB3ZSBiZWxpZXZlIHdlIGFyZSBpblxuXHQqIHByb2R1Y3Rpb24gbW9kZS5cblx0KlxuXHQqIFNob3VsZCBiZSBzZXQgZXZlcnkgdGltZSBhIHJlcXVlc3QgaXMgcmVjZWl2ZWQuXG5cdCovXG5cdF9tb2RlO1xuXHQvKipcblx0KiBUaGUgbG9jYWxpemVkIGBmZXRjaGAgaW1wbGVtZW50YXRpb24gdXNlZCBieSB0aGlzIGhhbmRsZXIuXG5cdCovXG5cdGZldGNoO1xuXHQvKipcblx0KiBUaGUgaG9zdCB1c2VkIHRvIGFjY2VzcyB0aGUgSW5uZ2VzdCBzZXJ2ZSBlbmRwb2ludCwgZS5nLjpcblx0KlxuXHQqICAgICBcImh0dHBzOi8vbXlhcHAuY29tXCJcblx0KlxuXHQqIEJ5IGRlZmF1bHQsIHRoZSBsaWJyYXJ5IHdpbGwgdHJ5IHRvIGluZmVyIHRoaXMgdXNpbmcgcmVxdWVzdCBkZXRhaWxzIHN1Y2hcblx0KiBhcyB0aGUgXCJIb3N0XCIgaGVhZGVyIGFuZCByZXF1ZXN0IHBhdGgsIGJ1dCBzb21ldGltZXMgdGhpcyBpc24ndCBwb3NzaWJsZVxuXHQqIChlLmcuIHdoZW4gcnVubmluZyBpbiBhIG1vcmUgY29udHJvbGxlZCBlbnZpcm9ubWVudHMgc3VjaCBhcyBBV1MgTGFtYmRhIG9yXG5cdCogd2hlbiBkZWFsaW5nIHdpdGggcHJveGllcy9yZWRpcmVjdHMpLlxuXHQqXG5cdCogUHJvdmlkZSB0aGUgY3VzdG9tIGhvc3RuYW1lIGhlcmUgdG8gZW5zdXJlIHRoYXQgdGhlIHBhdGggaXMgcmVwb3J0ZWRcblx0KiBjb3JyZWN0bHkgd2hlbiByZWdpc3RlcmluZyBmdW5jdGlvbnMgd2l0aCBJbm5nZXN0LlxuXHQqXG5cdCogVG8gYWxzbyBwcm92aWRlIGEgY3VzdG9tIHBhdGgsIHVzZSBgc2VydmVQYXRoYC5cblx0Ki9cblx0X3NlcnZlSG9zdDtcblx0LyoqXG5cdCogVGhlIHBhdGggdG8gdGhlIElubmdlc3Qgc2VydmUgZW5kcG9pbnQuIGUuZy46XG5cdCpcblx0KiAgICAgXCIvc29tZS9sb25nL3BhdGgvdG8vaW5uZ2VzdC9lbmRwb2ludFwiXG5cdCpcblx0KiBCeSBkZWZhdWx0LCB0aGUgbGlicmFyeSB3aWxsIHRyeSB0byBpbmZlciB0aGlzIHVzaW5nIHJlcXVlc3QgZGV0YWlscyBzdWNoXG5cdCogYXMgdGhlIFwiSG9zdFwiIGhlYWRlciBhbmQgcmVxdWVzdCBwYXRoLCBidXQgc29tZXRpbWVzIHRoaXMgaXNuJ3QgcG9zc2libGVcblx0KiAoZS5nLiB3aGVuIHJ1bm5pbmcgaW4gYSBtb3JlIGNvbnRyb2xsZWQgZW52aXJvbm1lbnRzIHN1Y2ggYXMgQVdTIExhbWJkYSBvclxuXHQqIHdoZW4gZGVhbGluZyB3aXRoIHByb3hpZXMvcmVkaXJlY3RzKS5cblx0KlxuXHQqIFByb3ZpZGUgdGhlIGN1c3RvbSBwYXRoIChleGNsdWRpbmcgdGhlIGhvc3RuYW1lKSBoZXJlIHRvIGVuc3VyZSB0aGF0IHRoZVxuXHQqIHBhdGggaXMgcmVwb3J0ZWQgY29ycmVjdGx5IHdoZW4gcmVnaXN0ZXJpbmcgZnVuY3Rpb25zIHdpdGggSW5uZ2VzdC5cblx0KlxuXHQqIFRvIGFsc28gcHJvdmlkZSBhIGN1c3RvbSBob3N0bmFtZSwgdXNlIGBzZXJ2ZUhvc3RgLlxuXHQqL1xuXHRfc2VydmVQYXRoO1xuXHQvKipcblx0KiBUaGUgbWluaW11bSBsZXZlbCB0byBsb2cgZnJvbSB0aGUgSW5uZ2VzdCBzZXJ2ZSBoYW5kbGVyLlxuXHQqL1xuXHRsb2dMZXZlbDtcblx0c3RyZWFtaW5nO1xuXHQvKipcblx0KiBBIHByaXZhdGUgY29sbGVjdGlvbiBvZiBqdXN0IElubmdlc3QgZnVuY3Rpb25zLCBhcyB0aGV5IGhhdmUgYmVlbiBwYXNzZWRcblx0KiB3aGVuIGluc3RhbnRpYXRpbmcgdGhlIGNsYXNzLlxuXHQqL1xuXHRyYXdGbnM7XG5cdGNsaWVudDtcblx0LyoqXG5cdCogQSBwcml2YXRlIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIGJlaW5nIHNlcnZlZC4gVGhpcyBtYXAgaXMgdXNlZFxuXHQqIHRvIGZpbmQgYW5kIHJlZ2lzdGVyIGZ1bmN0aW9ucyB3aGVuIGludGVyYWN0aW5nIHdpdGggSW5uZ2VzdCBDbG91ZC5cblx0Ki9cblx0Zm5zID0ge307XG5cdGVudiA9IGFsbFByb2Nlc3NFbnYoKTtcblx0YWxsb3dFeHBpcmVkU2lnbmF0dXJlcztcblx0X29wdGlvbnM7XG5cdHNraXBTaWduYXR1cmVWYWxpZGF0aW9uO1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG5cdFx0dGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0LyoqXG5cdFx0KiB2MiAtPiB2MyBtaWdyYXRpb24gZXJyb3IuXG5cdFx0KlxuXHRcdCogSWYgYSBzZXJ2ZSBoYW5kbGVyIGlzIHBhc3NlZCBhIGNsaWVudCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIGl0J2xsIGJlXG5cdFx0KiBzcHJlYWQgaW4gdG8gdGhlc2Ugb3B0aW9ucy4gV2Ugc2hvdWxkIGJlIGFibGUgdG8gZGV0ZWN0IHRoaXMgYnkgcGlja2luZ1xuXHRcdCogdXAgYSB1bmlxdWUgcHJvcGVydHkgb24gdGhlIG9iamVjdC5cblx0XHQqL1xuXHRcdGlmIChPYmplY3QuaGFzT3duKG9wdGlvbnMsIFwiZXZlbnRLZXlcIikpIHRocm93IG5ldyBFcnJvcihgJHtsb2dQcmVmaXh9IFlvdSd2ZSBwYXNzZWQgYW4gSW5uZ2VzdCBjbGllbnQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHlvdXIgc2VydmUgaGFuZGxlci4gVGhpcyBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGluIHYzOyBwbGVhc2UgcGFzcyB0aGUgSW5uZ2VzdCBjbGllbnQgYXMgdGhlIFxcYGNsaWVudFxcYCBwcm9wZXJ0eSBvZiBhbiBvcHRpb25zIG9iamVjdCBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly93d3cuaW5uZ2VzdC5jb20vZG9jcy9zZGsvbWlncmF0aW9uYCk7XG5cdFx0dGhpcy5mcmFtZXdvcmtOYW1lID0gb3B0aW9ucy5mcmFtZXdvcmtOYW1lO1xuXHRcdHRoaXMuY2xpZW50ID0gb3B0aW9ucy5jbGllbnQ7XG5cdFx0aWYgKG9wdGlvbnMuaWQpIGNvbnNvbGUud2FybihgJHtsb2dQcmVmaXh9IFRoZSBcXGBpZFxcYCBzZXJ2ZSBvcHRpb24gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY0YCk7XG5cdFx0dGhpcy5pZCA9IG9wdGlvbnMuaWQgfHwgdGhpcy5jbGllbnQuaWQ7XG5cdFx0dGhpcy5oYW5kbGVyID0gb3B0aW9ucy5oYW5kbGVyO1xuXHRcdC8qKlxuXHRcdCogUHJvdmlkZSBhIGhpZGRlbiBvcHRpb24gdG8gYWxsb3cgZXhwaXJlZCBzaWduYXR1cmVzIHRvIGJlIGFjY2VwdGVkIGR1cmluZ1xuXHRcdCogdGVzdGluZy5cblx0XHQqL1xuXHRcdHRoaXMuYWxsb3dFeHBpcmVkU2lnbmF0dXJlcyA9IEJvb2xlYW4oYXJndW1lbnRzW1wiMFwiXT8uX190ZXN0aW5nQWxsb3dFeHBpcmVkU2lnbmF0dXJlcyk7XG5cdFx0dGhpcy5yYXdGbnMgPSBvcHRpb25zLmZ1bmN0aW9ucy5maWx0ZXIoQm9vbGVhbik7XG5cdFx0aWYgKHRoaXMucmF3Rm5zLmxlbmd0aCAhPT0gb3B0aW9ucy5mdW5jdGlvbnMubGVuZ3RoKSBjb25zb2xlLndhcm4oYFNvbWUgZnVuY3Rpb25zIHBhc3NlZCB0byBzZXJ2ZSgpIGFyZSB1bmRlZmluZWQgYW5kIG1pc2NvbmZpZ3VyZWQuICBQbGVhc2UgY2hlY2sgeW91ciBpbXBvcnRzLmApO1xuXHRcdHRoaXMuZm5zID0gdGhpcy5yYXdGbnMucmVkdWNlKChhY2MsIGZuKSA9PiB7XG5cdFx0XHRjb25zdCBjb25maWdzID0gZm5bXCJnZXRDb25maWdcIl0oe1xuXHRcdFx0XHRiYXNlVXJsOiBuZXcgVVJMKFwiaHR0cHM6Ly9leGFtcGxlLmNvbVwiKSxcblx0XHRcdFx0YXBwUHJlZml4OiB0aGlzLmlkXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGZucyA9IGNvbmZpZ3MucmVkdWNlKChhY2MkMSwgeyBpZCB9LCBpbmRleCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdC4uLmFjYyQxLFxuXHRcdFx0XHRcdFtpZF06IHtcblx0XHRcdFx0XHRcdGZuLFxuXHRcdFx0XHRcdFx0b25GYWlsdXJlOiBCb29sZWFuKGluZGV4KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sIHt9KTtcblx0XHRcdGNvbmZpZ3MuZm9yRWFjaCgoeyBpZCB9KSA9PiB7XG5cdFx0XHRcdGlmIChhY2NbaWRdKSB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBmdW5jdGlvbiBJRCBcIiR7aWR9XCI7IHBsZWFzZSBjaGFuZ2UgYSBmdW5jdGlvbidzIG5hbWUgb3IgcHJvdmlkZSBhbiBleHBsaWNpdCBJRCB0byBhdm9pZCBjb25mbGljdHMuYCk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdC4uLmFjYyxcblx0XHRcdFx0Li4uZm5zXG5cdFx0XHR9O1xuXHRcdH0sIHt9KTtcblx0XHR0aGlzLmlubmdlc3RSZWdpc3RlclVybCA9IG5ldyBVUkwoXCIvZm4vcmVnaXN0ZXJcIiwgdGhpcy5hcGlCYXNlVXJsKTtcblx0XHR0aGlzLnNpZ25pbmdLZXkgPSBvcHRpb25zLnNpZ25pbmdLZXk7XG5cdFx0dGhpcy5zaWduaW5nS2V5RmFsbGJhY2sgPSBvcHRpb25zLnNpZ25pbmdLZXlGYWxsYmFjaztcblx0XHR0aGlzLl9zZXJ2ZUhvc3QgPSBvcHRpb25zLnNlcnZlSG9zdCB8fCB0aGlzLmVudltlbnZLZXlzLklubmdlc3RTZXJ2ZUhvc3RdO1xuXHRcdHRoaXMuX3NlcnZlUGF0aCA9IG9wdGlvbnMuc2VydmVQYXRoIHx8IHRoaXMuZW52W2VudktleXMuSW5uZ2VzdFNlcnZlUGF0aF07XG5cdFx0dGhpcy5za2lwU2lnbmF0dXJlVmFsaWRhdGlvbiA9IG9wdGlvbnMuc2tpcFNpZ25hdHVyZVZhbGlkYXRpb24gfHwgZmFsc2U7XG5cdFx0Y29uc3QgZGVmYXVsdExvZ0xldmVsID0gXCJpbmZvXCI7XG5cdFx0dGhpcy5sb2dMZXZlbCA9IHouZW51bShsb2dMZXZlbHMpLmRlZmF1bHQoZGVmYXVsdExvZ0xldmVsKS5jYXRjaCgoY3R4KSA9PiB7XG5cdFx0XHR0aGlzLmxvZyhcIndhcm5cIiwgYFVua25vd24gbG9nIGxldmVsIHBhc3NlZDogJHtTdHJpbmcoY3R4LmlucHV0KX07IGRlZmF1bHRpbmcgdG8gJHtkZWZhdWx0TG9nTGV2ZWx9YCk7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdExvZ0xldmVsO1xuXHRcdH0pLnBhcnNlKG9wdGlvbnMubG9nTGV2ZWwgfHwgdGhpcy5lbnZbZW52S2V5cy5Jbm5nZXN0TG9nTGV2ZWxdKTtcblx0XHRpZiAodGhpcy5sb2dMZXZlbCA9PT0gXCJkZWJ1Z1wiKSB7XG5cdFx0XHQvKipcblx0XHRcdCogYGRlYnVnYCBpcyBhbiBvbGQgbGlicmFyeTsgc29tZXRpbWVzIGl0cyBydW50aW1lIGRldGVjdGlvbiBkb2Vzbid0IHdvcmtcblx0XHRcdCogZm9yIG5ld2VyIHBhaXJpbmdzIG9mIGZyYW1ld29yay9ydW50aW1lLlxuXHRcdFx0KlxuXHRcdFx0KiBPbmUgc2lsbHkgc3ltcHRvbSBvZiB0aGlzIGlzIHRoYXQgYERlYnVnKClgIHJldHVybnMgYW4gYW5vbnltb3VzXG5cdFx0XHQqIGZ1bmN0aW9uIHdpdGggbm8gZXh0cmEgcHJvcGVydGllcyBpbnN0ZWFkIG9mIGEgYERlYnVnZ2VyYCBpbnN0YW5jZSBpZlxuXHRcdFx0KiB0aGUgd3JvbmcgY29kZSBpcyBjb25zdW1lZCBmb2xsb3dpbmcgYSBiYWQgZGV0ZWN0aW9uLiBUaGlzIHJlc3VsdHMgaW5cblx0XHRcdCogdGhlIGZvbGxvd2luZyBgLmVuYWJsZSgpYCBjYWxsIGZhaWxpbmcsIHNvIHdlIGp1c3QgdHJ5IGNhcmVmdWxseSB0b1xuXHRcdFx0KiBlbmFibGUgaXQgaGVyZS5cblx0XHRcdCovXG5cdFx0XHRpZiAoRGVidWcuZW5hYmxlICYmIHR5cGVvZiBEZWJ1Zy5lbmFibGUgPT09IFwiZnVuY3Rpb25cIikgRGVidWcuZW5hYmxlKGAke2RlYnVnUHJlZml4fToqYCk7XG5cdFx0fVxuXHRcdGNvbnN0IGRlZmF1bHRTdHJlYW1pbmdPcHRpb24gPSBmYWxzZTtcblx0XHR0aGlzLnN0cmVhbWluZyA9IHoudW5pb24oW3ouZW51bShbXCJhbGxvd1wiLCBcImZvcmNlXCJdKSwgei5saXRlcmFsKGZhbHNlKV0pLmRlZmF1bHQoZGVmYXVsdFN0cmVhbWluZ09wdGlvbikuY2F0Y2goKGN0eCkgPT4ge1xuXHRcdFx0dGhpcy5sb2coXCJ3YXJuXCIsIGBVbmtub3duIHN0cmVhbWluZyBvcHRpb24gcGFzc2VkOiAke1N0cmluZyhjdHguaW5wdXQpfTsgZGVmYXVsdGluZyB0byAke1N0cmluZyhkZWZhdWx0U3RyZWFtaW5nT3B0aW9uKX1gKTtcblx0XHRcdHJldHVybiBkZWZhdWx0U3RyZWFtaW5nT3B0aW9uO1xuXHRcdH0pLnBhcnNlKG9wdGlvbnMuc3RyZWFtaW5nIHx8IHRoaXMuZW52W2VudktleXMuSW5uZ2VzdFN0cmVhbWluZ10pO1xuXHRcdHRoaXMuZmV0Y2ggPSBvcHRpb25zLmZldGNoID8gZ2V0RmV0Y2gob3B0aW9ucy5mZXRjaCkgOiB0aGlzLmNsaWVudFtcImZldGNoXCJdO1xuXHR9XG5cdC8qKlxuXHQqIEdldCB0aGUgQVBJIGJhc2UgVVJMIGZvciB0aGUgSW5uZ2VzdCBBUEkuXG5cdCpcblx0KiBUaGlzIGlzIGEgZ2V0dGVyIHRvIGVuY291cmFnZSBjaGVja2luZyB0aGUgZW52aXJvbm1lbnQgZm9yIHRoZSBBUEkgYmFzZSBVUkxcblx0KiBlYWNoIHRpbWUgaXQncyBhY2Nlc3NlZCwgYXMgaXQgbWF5IGNoYW5nZSBkdXJpbmcgZXhlY3V0aW9uLlxuXHQqL1xuXHRnZXQgYXBpQmFzZVVybCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fb3B0aW9ucy5iYXNlVXJsIHx8IHRoaXMuZW52W2VudktleXMuSW5uZ2VzdEFwaUJhc2VVcmxdIHx8IHRoaXMuZW52W2VudktleXMuSW5uZ2VzdEJhc2VVcmxdIHx8IHRoaXMuY2xpZW50LmFwaUJhc2VVcmwgfHwgZGVmYXVsdElubmdlc3RBcGlCYXNlVXJsO1xuXHR9XG5cdC8qKlxuXHQqIEdldCB0aGUgZXZlbnQgQVBJIGJhc2UgVVJMIGZvciB0aGUgSW5uZ2VzdCBBUEkuXG5cdCpcblx0KiBUaGlzIGlzIGEgZ2V0dGVyIHRvIGVuY291cmFnZSBjaGVja2luZyB0aGUgZW52aXJvbm1lbnQgZm9yIHRoZSBldmVudCBBUElcblx0KiBiYXNlIFVSTCBlYWNoIHRpbWUgaXQncyBhY2Nlc3NlZCwgYXMgaXQgbWF5IGNoYW5nZSBkdXJpbmcgZXhlY3V0aW9uLlxuXHQqL1xuXHRnZXQgZXZlbnRBcGlCYXNlVXJsKCkge1xuXHRcdHJldHVybiB0aGlzLl9vcHRpb25zLmJhc2VVcmwgfHwgdGhpcy5lbnZbZW52S2V5cy5Jbm5nZXN0RXZlbnRBcGlCYXNlVXJsXSB8fCB0aGlzLmVudltlbnZLZXlzLklubmdlc3RCYXNlVXJsXSB8fCB0aGlzLmNsaWVudC5ldmVudEJhc2VVcmwgfHwgZGVmYXVsdElubmdlc3RFdmVudEJhc2VVcmw7XG5cdH1cblx0LyoqXG5cdCogVGhlIGhvc3QgdXNlZCB0byBhY2Nlc3MgdGhlIElubmdlc3Qgc2VydmUgZW5kcG9pbnQsIGUuZy46XG5cdCpcblx0KiAgICAgXCJodHRwczovL215YXBwLmNvbVwiXG5cdCpcblx0KiBCeSBkZWZhdWx0LCB0aGUgbGlicmFyeSB3aWxsIHRyeSB0byBpbmZlciB0aGlzIHVzaW5nIHJlcXVlc3QgZGV0YWlscyBzdWNoXG5cdCogYXMgdGhlIFwiSG9zdFwiIGhlYWRlciBhbmQgcmVxdWVzdCBwYXRoLCBidXQgc29tZXRpbWVzIHRoaXMgaXNuJ3QgcG9zc2libGVcblx0KiAoZS5nLiB3aGVuIHJ1bm5pbmcgaW4gYSBtb3JlIGNvbnRyb2xsZWQgZW52aXJvbm1lbnRzIHN1Y2ggYXMgQVdTIExhbWJkYSBvclxuXHQqIHdoZW4gZGVhbGluZyB3aXRoIHByb3hpZXMvcmVkaXJlY3RzKS5cblx0KlxuXHQqIFByb3ZpZGUgdGhlIGN1c3RvbSBob3N0bmFtZSBoZXJlIHRvIGVuc3VyZSB0aGF0IHRoZSBwYXRoIGlzIHJlcG9ydGVkXG5cdCogY29ycmVjdGx5IHdoZW4gcmVnaXN0ZXJpbmcgZnVuY3Rpb25zIHdpdGggSW5uZ2VzdC5cblx0KlxuXHQqIFRvIGFsc28gcHJvdmlkZSBhIGN1c3RvbSBwYXRoLCB1c2UgYHNlcnZlUGF0aGAuXG5cdCovXG5cdGdldCBzZXJ2ZUhvc3QoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlcnZlSG9zdCB8fCB0aGlzLmVudltlbnZLZXlzLklubmdlc3RTZXJ2ZUhvc3RdO1xuXHR9XG5cdC8qKlxuXHQqIFRoZSBwYXRoIHRvIHRoZSBJbm5nZXN0IHNlcnZlIGVuZHBvaW50LiBlLmcuOlxuXHQqXG5cdCogICAgIFwiL3NvbWUvbG9uZy9wYXRoL3RvL2lubmdlc3QvZW5kcG9pbnRcIlxuXHQqXG5cdCogQnkgZGVmYXVsdCwgdGhlIGxpYnJhcnkgd2lsbCB0cnkgdG8gaW5mZXIgdGhpcyB1c2luZyByZXF1ZXN0IGRldGFpbHMgc3VjaFxuXHQqIGFzIHRoZSBcIkhvc3RcIiBoZWFkZXIgYW5kIHJlcXVlc3QgcGF0aCwgYnV0IHNvbWV0aW1lcyB0aGlzIGlzbid0IHBvc3NpYmxlXG5cdCogKGUuZy4gd2hlbiBydW5uaW5nIGluIGEgbW9yZSBjb250cm9sbGVkIGVudmlyb25tZW50cyBzdWNoIGFzIEFXUyBMYW1iZGEgb3Jcblx0KiB3aGVuIGRlYWxpbmcgd2l0aCBwcm94aWVzL3JlZGlyZWN0cykuXG5cdCpcblx0KiBQcm92aWRlIHRoZSBjdXN0b20gcGF0aCAoZXhjbHVkaW5nIHRoZSBob3N0bmFtZSkgaGVyZSB0byBlbnN1cmUgdGhhdCB0aGVcblx0KiBwYXRoIGlzIHJlcG9ydGVkIGNvcnJlY3RseSB3aGVuIHJlZ2lzdGVyaW5nIGZ1bmN0aW9ucyB3aXRoIElubmdlc3QuXG5cdCpcblx0KiBUbyBhbHNvIHByb3ZpZGUgYSBjdXN0b20gaG9zdG5hbWUsIHVzZSBgc2VydmVIb3N0YC5cblx0KlxuXHQqIFRoaXMgaXMgYSBnZXR0ZXIgdG8gZW5jb3VyYWdlIGNoZWNraW5nIHRoZSBlbnZpcm9ubWVudCBmb3IgdGhlIHNlcnZlIHBhdGhcblx0KiBlYWNoIHRpbWUgaXQncyBhY2Nlc3NlZCwgYXMgaXQgbWF5IGNoYW5nZSBkdXJpbmcgZXhlY3V0aW9uLlxuXHQqL1xuXHRnZXQgc2VydmVQYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZXJ2ZVBhdGggfHwgdGhpcy5lbnZbZW52S2V5cy5Jbm5nZXN0U2VydmVQYXRoXTtcblx0fVxuXHRnZXQgaGFzaGVkRXZlbnRLZXkoKSB7XG5cdFx0aWYgKCF0aGlzLmNsaWVudFtcImV2ZW50S2V5XCJdIHx8IHRoaXMuY2xpZW50W1wiZXZlbnRLZXlcIl0gPT09IGR1bW15RXZlbnRLZXkpIHJldHVybjtcblx0XHRyZXR1cm4gaGFzaEV2ZW50S2V5KHRoaXMuY2xpZW50W1wiZXZlbnRLZXlcIl0pO1xuXHR9XG5cdGdldCBoYXNoZWRTaWduaW5nS2V5KCkge1xuXHRcdGlmICghdGhpcy5zaWduaW5nS2V5KSByZXR1cm47XG5cdFx0cmV0dXJuIGhhc2hTaWduaW5nS2V5KHRoaXMuc2lnbmluZ0tleSk7XG5cdH1cblx0Z2V0IGhhc2hlZFNpZ25pbmdLZXlGYWxsYmFjaygpIHtcblx0XHRpZiAoIXRoaXMuc2lnbmluZ0tleUZhbGxiYWNrKSByZXR1cm47XG5cdFx0cmV0dXJuIGhhc2hTaWduaW5nS2V5KHRoaXMuc2lnbmluZ0tleUZhbGxiYWNrKTtcblx0fVxuXHQvKipcblx0KiBSZXR1cm5zIGEgYGJvb2xlYW5gIHJlcHJlc2VudGluZyB3aGV0aGVyIHRoaXMgaGFuZGxlciB3aWxsIHN0cmVhbSByZXNwb25zZXNcblx0KiBvciBub3QuIFRha2VzIGludG8gYWNjb3VudCB0aGUgdXNlcidzIHByZWZlcmVuY2UgYW5kIHRoZSBwbGF0Zm9ybSdzXG5cdCogY2FwYWJpbGl0aWVzLlxuXHQqL1xuXHRhc3luYyBzaG91bGRTdHJlYW0oYWN0aW9ucykge1xuXHRcdGlmIChhd2FpdCBhY3Rpb25zLnF1ZXJ5U3RyaW5nV2l0aERlZmF1bHRzKFwidGVzdGluZyBmb3IgcHJvYmVcIiwgcXVlcnlLZXlzLlByb2JlKSAhPT0gdm9pZCAwKSByZXR1cm4gZmFsc2U7XG5cdFx0aWYgKCFhY3Rpb25zLnRyYW5zZm9ybVN0cmVhbWluZ1Jlc3BvbnNlKSByZXR1cm4gZmFsc2U7XG5cdFx0aWYgKHRoaXMuc3RyZWFtaW5nID09PSBcImZvcmNlXCIpIHJldHVybiB0cnVlO1xuXHRcdHJldHVybiB0aGlzLnN0cmVhbWluZyA9PT0gXCJhbGxvd1wiICYmIHBsYXRmb3JtU3VwcG9ydHNTdHJlYW1pbmcodGhpcy5mcmFtZXdvcmtOYW1lLCB0aGlzLmVudik7XG5cdH1cblx0LyoqXG5cdCogYGNyZWF0ZUhhbmRsZXJgIHNob3VsZCBiZSB1c2VkIHRvIHJldHVybiBhIHR5cGUtZXF1aXZhbGVudCB2ZXJzaW9uIG9mIHRoZVxuXHQqIGBoYW5kbGVyYCBzcGVjaWZpZWQgZHVyaW5nIGluc3RhbnRpYXRpb24uXG5cdCpcblx0KiBAZXhhbXBsZVxuXHQqIGBgYFxuXHQqIC8vIG15LWN1c3RvbS1oYW5kbGVyLnRzXG5cdCogaW1wb3J0IHtcblx0KiAgIElubmdlc3RDb21tSGFuZGxlcixcblx0KiAgIHR5cGUgU2VydmVIYW5kbGVyT3B0aW9ucyxcblx0KiB9IGZyb20gXCIuL2NvbXBvbmVudHMvSW5uZ2VzdENvbW1IYW5kbGVyXCI7XG5cdCpcblx0KiBleHBvcnQgY29uc3Qgc2VydmUgPSAob3B0aW9uczogU2VydmVIYW5kbGVyT3B0aW9ucykgPT4ge1xuXHQqICAgY29uc3QgaGFuZGxlciA9IG5ldyBJbm5nZXN0Q29tbUhhbmRsZXIoe1xuXHQqICAgICBmcmFtZXdvcmtOYW1lOiBcIm15LWN1c3RvbS1oYW5kbGVyXCIsXG5cdCogICAgIC4uLm9wdGlvbnMsXG5cdCogICAgIGhhbmRsZXI6IChyZXE6IFJlcXVlc3QpID0+IHtcblx0KiAgICAgICByZXR1cm4ge1xuXHQqICAgICAgICAgYm9keTogKCkgPT4gcmVxLmpzb24oKSxcblx0KiAgICAgICAgIGhlYWRlcnM6IChrZXkpID0+IHJlcS5oZWFkZXJzLmdldChrZXkpLFxuXHQqICAgICAgICAgbWV0aG9kOiAoKSA9PiByZXEubWV0aG9kLFxuXHQqICAgICAgICAgdXJsOiAoKSA9PiBuZXcgVVJMKHJlcS51cmwsIGBodHRwczovLyR7cmVxLmhlYWRlcnMuZ2V0KFwiaG9zdFwiKSB8fCBcIlwifWApLFxuXHQqICAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6ICh7IGJvZHksIHN0YXR1cywgaGVhZGVycyB9KSA9PiB7XG5cdCogICAgICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoYm9keSwgeyBzdGF0dXMsIGhlYWRlcnMgfSk7XG5cdCogICAgICAgICB9LFxuXHQqICAgICAgIH07XG5cdCogICAgIH0sXG5cdCogICB9KTtcblx0KlxuXHQqICAgcmV0dXJuIGhhbmRsZXIuY3JlYXRlSGFuZGxlcigpO1xuXHQqIH07XG5cdCogYGBgXG5cdCovXG5cdGNyZWF0ZUhhbmRsZXIoKSB7XG5cdFx0Y29uc3QgaGFuZGxlciA9IGFzeW5jICguLi5hcmdzKSA9PiB7XG5cdFx0XHRjb25zdCB0aW1lciA9IG5ldyBTZXJ2ZXJUaW1pbmcoKTtcblx0XHRcdC8qKlxuXHRcdFx0KiBVc2VkIGZvciB0ZXN0aW5nLCBhbGxvdyBzZXR0aW5nIGFjdGlvbiBvdmVycmlkZXMgZXh0ZXJuYWxseSB3aGVuXG5cdFx0XHQqIGNhbGxpbmcgdGhlIGhhbmRsZXIuIEFsd2F5cyBzZWFyY2ggdGhlIGZpbmFsIGFyZ3VtZW50LlxuXHRcdFx0Ki9cblx0XHRcdGNvbnN0IGxhc3RBcmcgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG5cdFx0XHRjb25zdCBhY3Rpb25PdmVycmlkZXMgPSB0eXBlb2YgbGFzdEFyZyA9PT0gXCJvYmplY3RcIiAmJiBsYXN0QXJnICE9PSBudWxsICYmIFwiYWN0aW9uT3ZlcnJpZGVzXCIgaW4gbGFzdEFyZyAmJiB0eXBlb2YgbGFzdEFyZ1tcImFjdGlvbk92ZXJyaWRlc1wiXSA9PT0gXCJvYmplY3RcIiAmJiBsYXN0QXJnW1wiYWN0aW9uT3ZlcnJpZGVzXCJdICE9PSBudWxsID8gbGFzdEFyZ1tcImFjdGlvbk92ZXJyaWRlc1wiXSA6IHt9O1xuXHRcdFx0LyoqXG5cdFx0XHQqIFdlIHB1cnBvc2VmdWxseSBgYXdhaXRgIHRoZSBoYW5kbGVyLCBhcyBpdCBjb3VsZCBiZSBlaXRoZXIgc3luYyBvclxuXHRcdFx0KiBhc3luYy5cblx0XHRcdCovXG5cdFx0XHRjb25zdCByYXdBY3Rpb25zID0ge1xuXHRcdFx0XHQuLi5hd2FpdCB0aW1lci53cmFwKFwiaGFuZGxlclwiLCAoKSA9PiB0aGlzLmhhbmRsZXIoLi4uYXJncykpLmNhdGNoKHJldGhyb3dFcnJvcihcIlNlcnZlIGhhbmRsZXIgZmFpbGVkIHRvIHJ1blwiKSksXG5cdFx0XHRcdC4uLmFjdGlvbk92ZXJyaWRlc1xuXHRcdFx0fTtcblx0XHRcdC8qKlxuXHRcdFx0KiBNYXBwZWQgcHJvbWlzaWZpZWQgaGFuZGxlcnMgZnJvbSB1c2VybGFuZCBgc2VydmUoKWAgZnVuY3Rpb24gbWl4ZWQgaW5cblx0XHRcdCogd2l0aCBzb21lIGhlbHBlcnMuXG5cdFx0XHQqL1xuXHRcdFx0Y29uc3QgYWN0aW9ucyA9IHtcblx0XHRcdFx0Li4uT2JqZWN0LmVudHJpZXMocmF3QWN0aW9ucykucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGFjYztcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0Li4uYWNjLFxuXHRcdFx0XHRcdFx0W2tleV06IChyZWFzb24sIC4uLmFyZ3MkMSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBlcnJNZXNzYWdlID0gW2BGYWlsZWQgY2FsbGluZyBcXGAke2tleX1cXGAgZnJvbSBzZXJ2ZSBoYW5kbGVyYCwgcmVhc29uXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiB3aGVuIFwiKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZm4gPSAoKSA9PiB2YWx1ZSguLi5hcmdzJDEpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcnVuQXNQcm9taXNlKGZuKS5jYXRjaChyZXRocm93RXJyb3IoZXJyTWVzc2FnZSkpLmNhdGNoKChlcnIpID0+IHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmxvZyhcImVycm9yXCIsIGVycik7XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgZXJyO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LCB7fSksXG5cdFx0XHRcdHF1ZXJ5U3RyaW5nV2l0aERlZmF1bHRzOiBhc3luYyAocmVhc29uLCBrZXkpID0+IHtcblx0XHRcdFx0XHRjb25zdCB1cmwgPSBhd2FpdCBhY3Rpb25zLnVybChyZWFzb24pO1xuXHRcdFx0XHRcdHJldHVybiBhd2FpdCBhY3Rpb25zLnF1ZXJ5U3RyaW5nPy4ocmVhc29uLCBrZXksIHVybCkgfHwgdXJsLnNlYXJjaFBhcmFtcy5nZXQoa2V5KSB8fCB2b2lkIDA7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC4uLmFjdGlvbk92ZXJyaWRlc1xuXHRcdFx0fTtcblx0XHRcdGNvbnN0IFtlbnYsIGV4cGVjdGVkU2VydmVyS2luZF0gPSBhd2FpdCBQcm9taXNlLmFsbChbYWN0aW9ucy5lbnY/LihcInN0YXJ0aW5nIHRvIGhhbmRsZSByZXF1ZXN0XCIpLCBhY3Rpb25zLmhlYWRlcnMoXCJjaGVja2luZyBleHBlY3RlZCBzZXJ2ZXIga2luZFwiLCBoZWFkZXJLZXlzLklubmdlc3RTZXJ2ZXJLaW5kKV0pO1xuXHRcdFx0dGhpcy5lbnYgPSB7XG5cdFx0XHRcdC4uLmFsbFByb2Nlc3NFbnYoKSxcblx0XHRcdFx0Li4uZW52XG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgZ2V0SW5uZ2VzdEhlYWRlcnMgPSAoKSA9PiBpbm5nZXN0SGVhZGVycyh7XG5cdFx0XHRcdGVudjogdGhpcy5lbnYsXG5cdFx0XHRcdGZyYW1ld29yazogdGhpcy5mcmFtZXdvcmtOYW1lLFxuXHRcdFx0XHRjbGllbnQ6IHRoaXMuY2xpZW50LFxuXHRcdFx0XHRleHBlY3RlZFNlcnZlcktpbmQ6IGV4cGVjdGVkU2VydmVyS2luZCB8fCB2b2lkIDAsXG5cdFx0XHRcdGV4dHJhczogeyBcIlNlcnZlci1UaW1pbmdcIjogdGltZXIuZ2V0SGVhZGVyKCkgfVxuXHRcdFx0fSk7XG5cdFx0XHRjb25zdCBhc3N1bWVkTW9kZSA9IGdldE1vZGUoe1xuXHRcdFx0XHRlbnY6IHRoaXMuZW52LFxuXHRcdFx0XHRjbGllbnQ6IHRoaXMuY2xpZW50XG5cdFx0XHR9KTtcblx0XHRcdGlmIChhc3N1bWVkTW9kZS5pc0V4cGxpY2l0KSB0aGlzLl9tb2RlID0gYXNzdW1lZE1vZGU7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y29uc3Qgc2VydmVJc1Byb2QgPSBhd2FpdCBhY3Rpb25zLmlzUHJvZHVjdGlvbj8uKFwic3RhcnRpbmcgdG8gaGFuZGxlIHJlcXVlc3RcIik7XG5cdFx0XHRcdGlmICh0eXBlb2Ygc2VydmVJc1Byb2QgPT09IFwiYm9vbGVhblwiKSB0aGlzLl9tb2RlID0gbmV3IE1vZGUoe1xuXHRcdFx0XHRcdHR5cGU6IHNlcnZlSXNQcm9kID8gXCJjbG91ZFwiIDogXCJkZXZcIixcblx0XHRcdFx0XHRpc0V4cGxpY2l0OiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZWxzZSB0aGlzLl9tb2RlID0gYXNzdW1lZE1vZGU7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnVwc2VydEtleXNGcm9tRW52KCk7XG5cdFx0XHRjb25zdCBtZXRob2RQID0gYWN0aW9ucy5tZXRob2QoXCJzdGFydGluZyB0byBoYW5kbGUgcmVxdWVzdFwiKTtcblx0XHRcdGNvbnN0IGhlYWRlclByb21pc2VzID0gW2hlYWRlcktleXMuVHJhY2VQYXJlbnQsIGhlYWRlcktleXMuVHJhY2VTdGF0ZV0ubWFwKGFzeW5jIChoZWFkZXIpID0+IHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBhd2FpdCBhY3Rpb25zLmhlYWRlcnMoYGZldGNoaW5nICR7aGVhZGVyfSBmb3IgZm9yd2FyZGluZ2AsIGhlYWRlcik7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0aGVhZGVyLFxuXHRcdFx0XHRcdHZhbHVlXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGNvbnRlbnRMZW5ndGggPSBhd2FpdCBhY3Rpb25zLmhlYWRlcnMoXCJjaGVja2luZyBzaWduYXR1cmUgZm9yIHJlcXVlc3RcIiwgaGVhZGVyS2V5cy5Db250ZW50TGVuZ3RoKS50aGVuKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRpZiAoIXZhbHVlKSByZXR1cm47XG5cdFx0XHRcdHJldHVybiBOdW1iZXIucGFyc2VJbnQodmFsdWUsIDEwKTtcblx0XHRcdH0pO1xuXHRcdFx0Y29uc3QgW3NpZ25hdHVyZSwgbWV0aG9kLCBib2R5XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcblx0XHRcdFx0YWN0aW9ucy5oZWFkZXJzKFwiY2hlY2tpbmcgc2lnbmF0dXJlIGZvciByZXF1ZXN0XCIsIGhlYWRlcktleXMuU2lnbmF0dXJlKS50aGVuKChoZWFkZXJTaWduYXR1cmUpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaGVhZGVyU2lnbmF0dXJlID8/IHZvaWQgMDtcblx0XHRcdFx0fSksXG5cdFx0XHRcdG1ldGhvZFAsXG5cdFx0XHRcdG1ldGhvZFAudGhlbigobWV0aG9kJDEpID0+IHtcblx0XHRcdFx0XHRpZiAobWV0aG9kJDEgPT09IFwiUE9TVFwiIHx8IG1ldGhvZCQxID09PSBcIlBVVFwiKSB7XG5cdFx0XHRcdFx0XHRpZiAoIWNvbnRlbnRMZW5ndGgpIHJldHVybiBcIlwiO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGFjdGlvbnMuYm9keShgY2hlY2tpbmcgYm9keSBmb3IgcmVxdWVzdCBzaWduaW5nIGFzIG1ldGhvZCBpcyAke21ldGhvZCQxfWApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gXCJcIjtcblx0XHRcdFx0fSlcblx0XHRcdF0pO1xuXHRcdFx0Y29uc3Qgc2lnbmF0dXJlVmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVTaWduYXR1cmUoc2lnbmF0dXJlLCBib2R5KTtcblx0XHRcdGNvbnN0IGhlYWRlcnNUb0ZvcndhcmRQID0gUHJvbWlzZS5hbGwoaGVhZGVyUHJvbWlzZXMpLnRoZW4oKGZldGNoZWRIZWFkZXJzKSA9PiB7XG5cdFx0XHRcdHJldHVybiBmZXRjaGVkSGVhZGVycy5yZWR1Y2UoKGFjYywgeyBoZWFkZXIsIHZhbHVlIH0pID0+IHtcblx0XHRcdFx0XHRpZiAodmFsdWUpIGFjY1toZWFkZXJdID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuIGFjYztcblx0XHRcdFx0fSwge30pO1xuXHRcdFx0fSk7XG5cdFx0XHRjb25zdCBhY3Rpb25SZXMgPSB0aW1lci53cmFwKFwiYWN0aW9uXCIsICgpID0+IHRoaXMuaGFuZGxlQWN0aW9uKHtcblx0XHRcdFx0YWN0aW9ucyxcblx0XHRcdFx0dGltZXIsXG5cdFx0XHRcdGdldElubmdlc3RIZWFkZXJzLFxuXHRcdFx0XHRyZXFBcmdzOiBhcmdzLFxuXHRcdFx0XHRzaWduYXR1cmVWYWxpZGF0aW9uLFxuXHRcdFx0XHRib2R5LFxuXHRcdFx0XHRtZXRob2QsXG5cdFx0XHRcdGhlYWRlcnM6IGhlYWRlcnNUb0ZvcndhcmRQXG5cdFx0XHR9KSk7XG5cdFx0XHQvKipcblx0XHRcdCogUHJlcGFyZXMgYW4gYWN0aW9uIHJlc3BvbnNlIGJ5IG1lcmdpbmcgcmV0dXJuZWQgZGF0YSB0byBwcm92aWRlXG5cdFx0XHQqIHRyYWlsaW5nIGluZm9ybWF0aW9uIHN1Y2ggYXMgYFNlcnZlci1UaW1pbmdgIGhlYWRlcnMuXG5cdFx0XHQqXG5cdFx0XHQqIEl0IHNob3VsZCBhbHdheXMgcHJpb3JpdGl6ZSB0aGUgaGVhZGVycyByZXR1cm5lZCBieSB0aGUgYWN0aW9uLCBhcyB0aGV5XG5cdFx0XHQqIG1heSBjb250YWluIGltcG9ydGFudCBpbmZvcm1hdGlvbiBzdWNoIGFzIGBDb250ZW50LVR5cGVgLlxuXHRcdFx0Ki9cblx0XHRcdGNvbnN0IHByZXBhcmVBY3Rpb25SZXMgPSBhc3luYyAocmVzKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGhlYWRlcnMgPSB7XG5cdFx0XHRcdFx0Li4uZ2V0SW5uZ2VzdEhlYWRlcnMoKSxcblx0XHRcdFx0XHQuLi5hd2FpdCBoZWFkZXJzVG9Gb3J3YXJkUCxcblx0XHRcdFx0XHQuLi5yZXMuaGVhZGVycyxcblx0XHRcdFx0XHQuLi5yZXMudmVyc2lvbiA9PT0gbnVsbCA/IHt9IDogeyBbaGVhZGVyS2V5cy5SZXF1ZXN0VmVyc2lvbl06IChyZXMudmVyc2lvbiA/PyBQUkVGRVJSRURfRVhFQ1VUSU9OX1ZFUlNJT04pLnRvU3RyaW5nKCkgfVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRsZXQgc2lnbmF0dXJlJDE7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0c2lnbmF0dXJlJDEgPSBhd2FpdCBzaWduYXR1cmVWYWxpZGF0aW9uLnRoZW4oKHJlc3VsdCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKCFyZXN1bHQuc3VjY2VzcyB8fCAhcmVzdWx0LmtleVVzZWQpIHJldHVybjtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmdldFJlc3BvbnNlU2lnbmF0dXJlKHJlc3VsdC5rZXlVc2VkLCByZXMuYm9keSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHQuLi5yZXMsXG5cdFx0XHRcdFx0XHRoZWFkZXJzLFxuXHRcdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHNlcmlhbGl6ZUVycm9yKGVycikpLFxuXHRcdFx0XHRcdFx0c3RhdHVzOiA1MDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzaWduYXR1cmUkMSkgaGVhZGVyc1toZWFkZXJLZXlzLlNpZ25hdHVyZV0gPSBzaWduYXR1cmUkMTtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHQuLi5yZXMsXG5cdFx0XHRcdFx0aGVhZGVyc1xuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblx0XHRcdGlmIChhd2FpdCB0aGlzLnNob3VsZFN0cmVhbShhY3Rpb25zKSkge1xuXHRcdFx0XHRpZiAoYXdhaXQgYWN0aW9ucy5tZXRob2QoXCJzdGFydGluZyBzdHJlYW1pbmcgcmVzcG9uc2VcIikgPT09IFwiUE9TVFwiKSB7XG5cdFx0XHRcdFx0Y29uc3QgeyBzdHJlYW0sIGZpbmFsaXplIH0gPSBhd2FpdCBjcmVhdGVTdHJlYW0oKTtcblx0XHRcdFx0XHQvKipcblx0XHRcdFx0XHQqIEVycm9ycyBhcmUgaGFuZGxlZCBieSBgaGFuZGxlQWN0aW9uYCBoZXJlIHRvIGVuc3VyZSB0aGF0IGFuXG5cdFx0XHRcdFx0KiBhcHByb3ByaWF0ZSByZXNwb25zZSBpcyBhbHdheXMgZ2l2ZW4uXG5cdFx0XHRcdFx0Ki9cblx0XHRcdFx0XHRhY3Rpb25SZXMudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmluYWxpemUocHJlcGFyZUFjdGlvblJlcyhyZXMpKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm4gdGltZXIud3JhcChcInJlc1wiLCAoKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYWN0aW9ucy50cmFuc2Zvcm1TdHJlYW1pbmdSZXNwb25zZT8uKFwic3RhcnRpbmcgc3RyZWFtaW5nIHJlc3BvbnNlXCIsIHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiAyMDEsXG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IGdldElubmdlc3RIZWFkZXJzKCksXG5cdFx0XHRcdFx0XHRcdGJvZHk6IHN0cmVhbSxcblx0XHRcdFx0XHRcdFx0dmVyc2lvbjogbnVsbFxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aW1lci53cmFwKFwicmVzXCIsIGFzeW5jICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIGFjdGlvblJlcy50aGVuKHByZXBhcmVBY3Rpb25SZXMpLnRoZW4oKGFjdGlvblJlcyQxKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGFjdGlvbnMudHJhbnNmb3JtUmVzcG9uc2UoXCJzZW5kaW5nIGJhY2sgcmVzcG9uc2VcIiwgYWN0aW9uUmVzJDEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdFx0LyoqXG5cdFx0KiBTb21lIHBsYXRmb3JtcyBjaGVjayAoYXQgcnVudGltZSkgdGhlIGxlbmd0aCBvZiB0aGUgZnVuY3Rpb24gYmVpbmcgdXNlZFxuXHRcdCogdG8gaGFuZGxlIGFuIGVuZHBvaW50LiBJZiB0aGlzIGlzIGEgdmFyaWFkaWMgZnVuY3Rpb24sIGl0IHdpbGwgZmFpbCB0aGF0XG5cdFx0KiBjaGVjay5cblx0XHQqXG5cdFx0KiBUaGVyZWZvcmUsIHdlIGV4cGVjdCB0aGUgYXJndW1lbnRzIGFjY2VwdGVkIHRvIGJlIHRoZSBzYW1lIGxlbmd0aCBhcyB0aGVcblx0XHQqIGBoYW5kbGVyYCBmdW5jdGlvbiBwYXNzZWQgaW50ZXJuYWxseS5cblx0XHQqXG5cdFx0KiBXZSBhbHNvIHNldCBhIG5hbWUgdG8gYXZvaWQgYSBjb21tb24gdXNlbGVzcyBuYW1lIGluIHRyYWNpbmcgc3VjaCBhc1xuXHRcdCogYFwiYW5vbnltb3VzXCJgIG9yIGBcImJvdW5kIGZ1bmN0aW9uXCJgLlxuXHRcdCpcblx0XHQqIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzMyODRcblx0XHQqL1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGhhbmRsZXIsIHtcblx0XHRcdG5hbWU6IHsgdmFsdWU6IFwiSW5uZ2VzdEhhbmRsZXJcIiB9LFxuXHRcdFx0bGVuZ3RoOiB7IHZhbHVlOiB0aGlzLmhhbmRsZXIubGVuZ3RoIH1cblx0XHR9KTtcblx0XHRyZXR1cm4gaGFuZGxlcjtcblx0fVxuXHRnZXQgbW9kZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fbW9kZTtcblx0fVxuXHRzZXQgbW9kZShtKSB7XG5cdFx0dGhpcy5fbW9kZSA9IG07XG5cdFx0aWYgKG0pIHRoaXMuY2xpZW50W1wibW9kZVwiXSA9IG07XG5cdH1cblx0LyoqXG5cdCogR2l2ZW4gYSBzZXQgb2YgZnVuY3Rpb25zIHRvIGNoZWNrIGlmIGFuIGFjdGlvbiBpcyBhdmFpbGFibGUgZnJvbSB0aGVcblx0KiBpbnN0YW5jZSdzIGhhbmRsZXIsIGVuYWN0IGFueSBhY3Rpb24gdGhhdCBpcyBmb3VuZC5cblx0KlxuXHQqIFRoaXMgbWV0aG9kIGNhbiBmZXRjaCB2YXJ5aW5nIHBheWxvYWRzIG9mIGRhdGEsIGJ1dCB1bHRpbWF0ZWx5IGlzIHRoZSBwbGFjZVxuXHQqIHdoZXJlIF9kZWNpc2lvbnNfIGFyZSBtYWRlIHJlZ2FyZGluZyBmdW5jdGlvbmFsaXR5LlxuXHQqXG5cdCogRm9yIGV4YW1wbGUsIGlmIHdlIGZpbmQgdGhhdCB3ZSBzaG91bGQgYmUgdmlld2luZyB0aGUgVUksIHRoaXMgZnVuY3Rpb25cblx0KiB3aWxsIGRlY2lkZSB3aGV0aGVyIHRoZSBVSSBzaG91bGQgYmUgdmlzaWJsZSBiYXNlZCBvbiB0aGUgcGF5bG9hZCBpdCBoYXNcblx0KiBmb3VuZCAoZS5nLiBlbnYgdmFycywgb3B0aW9ucywgZXRjKS5cblx0Ki9cblx0YXN5bmMgaGFuZGxlQWN0aW9uKHsgYWN0aW9ucywgdGltZXIsIGdldElubmdlc3RIZWFkZXJzLCByZXFBcmdzLCBzaWduYXR1cmVWYWxpZGF0aW9uLCBib2R5LCBtZXRob2QsIGhlYWRlcnMgfSkge1xuXHRcdGNvbnN0IGlzTWlzc2luZ0JvZHkgPSBib2R5ID09PSB2b2lkIDA7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCB1cmwgPSBhd2FpdCBhY3Rpb25zLnVybChcInN0YXJ0aW5nIHRvIGhhbmRsZSByZXF1ZXN0XCIpO1xuXHRcdFx0aWYgKG1ldGhvZCA9PT0gXCJQT1NUXCIpIHtcblx0XHRcdFx0aWYgKGlzTWlzc2luZ0JvZHkpIHtcblx0XHRcdFx0XHR0aGlzLmxvZyhcImVycm9yXCIsIFwiTWlzc2luZyBib2R5IHdoZW4gZXhlY3V0aW5nLCBwb3NzaWJseSBkdWUgdG8gbWlzc2luZyByZXF1ZXN0IGJvZHkgbWlkZGxld2FyZVwiKTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0c3RhdHVzOiA1MDAsXG5cdFx0XHRcdFx0XHRoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG5cdFx0XHRcdFx0XHRib2R5OiBzdHJpbmdpZnkoc2VyaWFsaXplRXJyb3IoLyogQF9fUFVSRV9fICovIG5ldyBFcnJvcihcIk1pc3NpbmcgcmVxdWVzdCBib2R5IHdoZW4gZXhlY3V0aW5nLCBwb3NzaWJseSBkdWUgdG8gbWlzc2luZyByZXF1ZXN0IGJvZHkgbWlkZGxld2FyZVwiKSkpLFxuXHRcdFx0XHRcdFx0dmVyc2lvbjogdm9pZCAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCB2YWxpZGF0aW9uUmVzdWx0ID0gYXdhaXQgc2lnbmF0dXJlVmFsaWRhdGlvbjtcblx0XHRcdFx0aWYgKCF2YWxpZGF0aW9uUmVzdWx0LnN1Y2Nlc3MpIHJldHVybiB7XG5cdFx0XHRcdFx0c3RhdHVzOiA0MDEsXG5cdFx0XHRcdFx0aGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuXHRcdFx0XHRcdGJvZHk6IHN0cmluZ2lmeShzZXJpYWxpemVFcnJvcih2YWxpZGF0aW9uUmVzdWx0LmVycikpLFxuXHRcdFx0XHRcdHZlcnNpb246IHZvaWQgMFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRjb25zdCByYXdQcm9iZSA9IGF3YWl0IGFjdGlvbnMucXVlcnlTdHJpbmdXaXRoRGVmYXVsdHMoXCJ0ZXN0aW5nIGZvciBwcm9iZVwiLCBxdWVyeUtleXMuUHJvYmUpO1xuXHRcdFx0XHRpZiAocmF3UHJvYmUpIHtcblx0XHRcdFx0XHRjb25zdCBwcm9iZSQxID0gZW51bUZyb21WYWx1ZShwcm9iZSwgcmF3UHJvYmUpO1xuXHRcdFx0XHRcdGlmICghcHJvYmUkMSkgcmV0dXJuIHtcblx0XHRcdFx0XHRcdHN0YXR1czogNDAwLFxuXHRcdFx0XHRcdFx0aGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuXHRcdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHNlcmlhbGl6ZUVycm9yKC8qIEBfX1BVUkVfXyAqLyBuZXcgRXJyb3IoYFVua25vd24gcHJvYmUgXCIke3Jhd1Byb2JlfVwiYCkpKSxcblx0XHRcdFx0XHRcdHZlcnNpb246IHZvaWQgMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0cmV0dXJuIHsgW3Byb2JlLlRydXN0XTogKCkgPT4gKHtcblx0XHRcdFx0XHRcdHN0YXR1czogMjAwLFxuXHRcdFx0XHRcdFx0aGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuXHRcdFx0XHRcdFx0Ym9keTogXCJcIixcblx0XHRcdFx0XHRcdHZlcnNpb246IHZvaWQgMFxuXHRcdFx0XHRcdH0pIH1bcHJvYmUkMV0oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBmbklkID0gYXdhaXQgYWN0aW9ucy5xdWVyeVN0cmluZ1dpdGhEZWZhdWx0cyhcInByb2Nlc3NpbmcgcnVuIHJlcXVlc3RcIiwgcXVlcnlLZXlzLkZuSWQpO1xuXHRcdFx0XHRpZiAoIWZuSWQpIHRocm93IG5ldyBFcnJvcihcIk5vIGZ1bmN0aW9uIElEIGZvdW5kIGluIHJlcXVlc3RcIik7XG5cdFx0XHRcdGNvbnN0IHN0ZXBJZCA9IGF3YWl0IGFjdGlvbnMucXVlcnlTdHJpbmdXaXRoRGVmYXVsdHMoXCJwcm9jZXNzaW5nIHJ1biByZXF1ZXN0XCIsIHF1ZXJ5S2V5cy5TdGVwSWQpIHx8IG51bGw7XG5cdFx0XHRcdGNvbnN0IHsgdmVyc2lvbjogdmVyc2lvbiQxLCByZXN1bHQgfSA9IHRoaXMucnVuU3RlcCh7XG5cdFx0XHRcdFx0ZnVuY3Rpb25JZDogZm5JZCxcblx0XHRcdFx0XHRkYXRhOiBib2R5LFxuXHRcdFx0XHRcdHN0ZXBJZCxcblx0XHRcdFx0XHR0aW1lcixcblx0XHRcdFx0XHRyZXFBcmdzLFxuXHRcdFx0XHRcdGhlYWRlcnM6IGF3YWl0IGhlYWRlcnNcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnN0IHN0ZXBPdXRwdXQgPSBhd2FpdCByZXN1bHQ7XG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQqIEZ1bmN0aW9ucyBjYW4gcmV0dXJuIGB1bmRlZmluZWRgLCBidXQgd2UnbGwgYWx3YXlzIGNvbnZlcnQgdGhpcyB0b1xuXHRcdFx0XHQqIGBudWxsYCwgYXMgdGhpcyBpcyBhcHByb3ByaWF0ZWx5IHNlcmlhbGl6YWJsZSBieSBKU09OLlxuXHRcdFx0XHQqL1xuXHRcdFx0XHRjb25zdCBvcERhdGFVbmRlZmluZWRUb051bGwgPSAob3ApID0+IHtcblx0XHRcdFx0XHRvcC5kYXRhID0gdW5kZWZpbmVkVG9OdWxsKG9wLmRhdGEpO1xuXHRcdFx0XHRcdHJldHVybiBvcDtcblx0XHRcdFx0fTtcblx0XHRcdFx0Y29uc3QgaGFuZGxlciA9IHtcblx0XHRcdFx0XHRcImZ1bmN0aW9uLXJlamVjdGVkXCI6IChyZXN1bHQkMSkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiByZXN1bHQkMS5yZXRyaWFibGUgPyA1MDAgOiA0MDAsXG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHRcdFx0XHRcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcblx0XHRcdFx0XHRcdFx0XHRbaGVhZGVyS2V5cy5Ob1JldHJ5XTogcmVzdWx0JDEucmV0cmlhYmxlID8gXCJmYWxzZVwiIDogXCJ0cnVlXCIsXG5cdFx0XHRcdFx0XHRcdFx0Li4udHlwZW9mIHJlc3VsdCQxLnJldHJpYWJsZSA9PT0gXCJzdHJpbmdcIiA/IHsgW2hlYWRlcktleXMuUmV0cnlBZnRlcl06IHJlc3VsdCQxLnJldHJpYWJsZSB9IDoge31cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHVuZGVmaW5lZFRvTnVsbChyZXN1bHQkMS5lcnJvcikpLFxuXHRcdFx0XHRcdFx0XHR2ZXJzaW9uOiB2ZXJzaW9uJDFcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImZ1bmN0aW9uLXJlc29sdmVkXCI6IChyZXN1bHQkMSkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiAyMDAsXG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcblx0XHRcdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHVuZGVmaW5lZFRvTnVsbChyZXN1bHQkMS5kYXRhKSksXG5cdFx0XHRcdFx0XHRcdHZlcnNpb246IHZlcnNpb24kMVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwic3RlcC1ub3QtZm91bmRcIjogKHJlc3VsdCQxKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRzdGF0dXM6IDUwMCxcblx0XHRcdFx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdFx0XHRcdFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuXHRcdFx0XHRcdFx0XHRcdFtoZWFkZXJLZXlzLk5vUmV0cnldOiBcImZhbHNlXCJcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHsgZXJyb3I6IGBDb3VsZCBub3QgZmluZCBzdGVwIFwiJHtyZXN1bHQkMS5zdGVwLmRpc3BsYXlOYW1lIHx8IHJlc3VsdCQxLnN0ZXAuaWR9XCIgdG8gcnVuOyB0aW1lZCBvdXRgIH0pLFxuXHRcdFx0XHRcdFx0XHR2ZXJzaW9uOiB2ZXJzaW9uJDFcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcInN0ZXAtcmFuXCI6IChyZXN1bHQkMSkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RlcCA9IG9wRGF0YVVuZGVmaW5lZFRvTnVsbChyZXN1bHQkMS5zdGVwKTtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHN0YXR1czogMjA2LFxuXHRcdFx0XHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0XHRcdFx0XCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG5cdFx0XHRcdFx0XHRcdFx0Li4udHlwZW9mIHJlc3VsdCQxLnJldHJpYWJsZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHtcblx0XHRcdFx0XHRcdFx0XHRcdFtoZWFkZXJLZXlzLk5vUmV0cnldOiByZXN1bHQkMS5yZXRyaWFibGUgPyBcImZhbHNlXCIgOiBcInRydWVcIixcblx0XHRcdFx0XHRcdFx0XHRcdC4uLnR5cGVvZiByZXN1bHQkMS5yZXRyaWFibGUgPT09IFwic3RyaW5nXCIgPyB7IFtoZWFkZXJLZXlzLlJldHJ5QWZ0ZXJdOiByZXN1bHQkMS5yZXRyaWFibGUgfSA6IHt9XG5cdFx0XHRcdFx0XHRcdFx0fSA6IHt9XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGJvZHk6IHN0cmluZ2lmeShbc3RlcF0pLFxuXHRcdFx0XHRcdFx0XHR2ZXJzaW9uOiB2ZXJzaW9uJDFcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcInN0ZXBzLWZvdW5kXCI6IChyZXN1bHQkMSkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RlcHMgPSByZXN1bHQkMS5zdGVwcy5tYXAob3BEYXRhVW5kZWZpbmVkVG9OdWxsKTtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHN0YXR1czogMjA2LFxuXHRcdFx0XHRcdFx0XHRoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG5cdFx0XHRcdFx0XHRcdGJvZHk6IHN0cmluZ2lmeShzdGVwcyksXG5cdFx0XHRcdFx0XHRcdHZlcnNpb246IHZlcnNpb24kMVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1bc3RlcE91dHB1dC50eXBlXTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXR1cm4gYXdhaXQgaGFuZGxlcihzdGVwT3V0cHV0KTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0dGhpcy5sb2coXCJlcnJvclwiLCBcIkVycm9yIGhhbmRsaW5nIGV4ZWN1dGlvbiByZXN1bHRcIiwgZXJyKTtcblx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNvbnN0IGVudiA9IGdldElubmdlc3RIZWFkZXJzKClbaGVhZGVyS2V5cy5FbnZpcm9ubWVudF0gPz8gbnVsbDtcblx0XHRcdGlmIChtZXRob2QgPT09IFwiR0VUXCIpIHJldHVybiB7XG5cdFx0XHRcdHN0YXR1czogMjAwLFxuXHRcdFx0XHRib2R5OiBzdHJpbmdpZnkoYXdhaXQgdGhpcy5pbnRyb3NwZWN0aW9uQm9keSh7XG5cdFx0XHRcdFx0YWN0aW9ucyxcblx0XHRcdFx0XHRlbnYsXG5cdFx0XHRcdFx0c2lnbmF0dXJlVmFsaWRhdGlvbixcblx0XHRcdFx0XHR1cmxcblx0XHRcdFx0fSkpLFxuXHRcdFx0XHRoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG5cdFx0XHRcdHZlcnNpb246IHZvaWQgMFxuXHRcdFx0fTtcblx0XHRcdGlmIChtZXRob2QgPT09IFwiUFVUXCIpIHtcblx0XHRcdFx0Y29uc3QgW2RlcGxveUlkLCBpbkJhbmRTeW5jUmVxdWVzdGVkXSA9IGF3YWl0IFByb21pc2UuYWxsKFthY3Rpb25zLnF1ZXJ5U3RyaW5nV2l0aERlZmF1bHRzKFwicHJvY2Vzc2luZyBkZXBsb3ltZW50IHJlcXVlc3RcIiwgcXVlcnlLZXlzLkRlcGxveUlkKS50aGVuKChkZXBsb3lJZCQxKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGRlcGxveUlkJDEgPT09IFwidW5kZWZpbmVkXCIgPyB2b2lkIDAgOiBkZXBsb3lJZCQxO1xuXHRcdFx0XHR9KSwgUHJvbWlzZS5yZXNvbHZlKHBhcnNlQXNCb29sZWFuKHRoaXMuZW52W2VudktleXMuSW5uZ2VzdEFsbG93SW5CYW5kU3luY10pKS50aGVuKChhbGxvd0luQmFuZFN5bmMpID0+IHtcblx0XHRcdFx0XHRpZiAoYWxsb3dJbkJhbmRTeW5jICE9PSB2b2lkIDAgJiYgIWFsbG93SW5CYW5kU3luYykgcmV0dXJuIHN5bmNLaW5kLk91dE9mQmFuZDtcblx0XHRcdFx0XHRyZXR1cm4gYWN0aW9ucy5oZWFkZXJzKFwicHJvY2Vzc2luZyBkZXBsb3ltZW50IHJlcXVlc3RcIiwgaGVhZGVyS2V5cy5Jbm5nZXN0U3luY0tpbmQpO1xuXHRcdFx0XHR9KS50aGVuKChraW5kKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGtpbmQgPT09IHN5bmNLaW5kLkluQmFuZDtcblx0XHRcdFx0fSldKTtcblx0XHRcdFx0aWYgKGluQmFuZFN5bmNSZXF1ZXN0ZWQpIHtcblx0XHRcdFx0XHRpZiAoaXNNaXNzaW5nQm9keSkge1xuXHRcdFx0XHRcdFx0dGhpcy5sb2coXCJlcnJvclwiLCBcIk1pc3NpbmcgYm9keSB3aGVuIHN5bmNpbmcsIHBvc3NpYmx5IGR1ZSB0byBtaXNzaW5nIHJlcXVlc3QgYm9keSBtaWRkbGV3YXJlXCIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0c3RhdHVzOiA1MDAsXG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcblx0XHRcdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHNlcmlhbGl6ZUVycm9yKC8qIEBfX1BVUkVfXyAqLyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJlcXVlc3QgYm9keSB3aGVuIHN5bmNpbmcsIHBvc3NpYmx5IGR1ZSB0byBtaXNzaW5nIHJlcXVlc3QgYm9keSBtaWRkbGV3YXJlXCIpKSksXG5cdFx0XHRcdFx0XHRcdHZlcnNpb246IHZvaWQgMFxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCEoYXdhaXQgc2lnbmF0dXJlVmFsaWRhdGlvbikuc3VjY2VzcykgcmV0dXJuIHtcblx0XHRcdFx0XHRcdHN0YXR1czogNDAxLFxuXHRcdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHsgY29kZTogXCJzaWdfdmVyaWZpY2F0aW9uX2ZhaWxlZFwiIH0pLFxuXHRcdFx0XHRcdFx0aGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuXHRcdFx0XHRcdFx0dmVyc2lvbjogdm9pZCAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRjb25zdCByZXMgPSBpbkJhbmRTeW5jUmVxdWVzdEJvZHlTY2hlbWEuc2FmZVBhcnNlKGJvZHkpO1xuXHRcdFx0XHRcdGlmICghcmVzLnN1Y2Nlc3MpIHJldHVybiB7XG5cdFx0XHRcdFx0XHRzdGF0dXM6IDQwMCxcblx0XHRcdFx0XHRcdGJvZHk6IHN0cmluZ2lmeSh7XG5cdFx0XHRcdFx0XHRcdGNvZGU6IFwiaW52YWxpZF9yZXF1ZXN0XCIsXG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2U6IHJlcy5lcnJvci5tZXNzYWdlXG5cdFx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHRcdGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcblx0XHRcdFx0XHRcdHZlcnNpb246IHZvaWQgMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0dXJsID0gdGhpcy5yZXFVcmwobmV3IFVSTChyZXMuZGF0YS51cmwpKTtcblx0XHRcdFx0XHRjb25zdCByZXNwQm9keSA9IGF3YWl0IHRoaXMuaW5CYW5kUmVnaXN0ZXJCb2R5KHtcblx0XHRcdFx0XHRcdGFjdGlvbnMsXG5cdFx0XHRcdFx0XHRkZXBsb3lJZCxcblx0XHRcdFx0XHRcdGVudixcblx0XHRcdFx0XHRcdHNpZ25hdHVyZVZhbGlkYXRpb24sXG5cdFx0XHRcdFx0XHR1cmxcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0c3RhdHVzOiAyMDAsXG5cdFx0XHRcdFx0XHRib2R5OiBzdHJpbmdpZnkocmVzcEJvZHkpLFxuXHRcdFx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdFx0XHRcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcblx0XHRcdFx0XHRcdFx0W2hlYWRlcktleXMuSW5uZ2VzdFN5bmNLaW5kXTogc3luY0tpbmQuSW5CYW5kXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dmVyc2lvbjogdm9pZCAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCB7IHN0YXR1cywgbWVzc2FnZSwgbW9kaWZpZWQgfSA9IGF3YWl0IHRoaXMucmVnaXN0ZXIodGhpcy5yZXFVcmwodXJsKSwgZGVwbG95SWQsIGdldElubmdlc3RIZWFkZXJzKTtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRzdGF0dXMsXG5cdFx0XHRcdFx0Ym9keTogc3RyaW5naWZ5KHtcblx0XHRcdFx0XHRcdG1lc3NhZ2UsXG5cdFx0XHRcdFx0XHRtb2RpZmllZFxuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHRcdFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuXHRcdFx0XHRcdFx0W2hlYWRlcktleXMuSW5uZ2VzdFN5bmNLaW5kXTogc3luY0tpbmQuT3V0T2ZCYW5kXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR2ZXJzaW9uOiB2b2lkIDBcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN0YXR1czogNTAwLFxuXHRcdFx0XHRib2R5OiBzdHJpbmdpZnkoe1xuXHRcdFx0XHRcdHR5cGU6IFwiaW50ZXJuYWxcIixcblx0XHRcdFx0XHQuLi5zZXJpYWxpemVFcnJvcihlcnIpXG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG5cdFx0XHRcdHZlcnNpb246IHZvaWQgMFxuXHRcdFx0fTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1czogNDA1LFxuXHRcdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRtZXNzYWdlOiBcIk5vIGFjdGlvbiBmb3VuZDsgcmVxdWVzdCB3YXMgbGlrZWx5IG5vdCBQT1NULCBQVVQsIG9yIEdFVFwiLFxuXHRcdFx0XHRtb2RlOiB0aGlzLl9tb2RlXG5cdFx0XHR9KSxcblx0XHRcdGhlYWRlcnM6IHt9LFxuXHRcdFx0dmVyc2lvbjogdm9pZCAwXG5cdFx0fTtcblx0fVxuXHRydW5TdGVwKHsgZnVuY3Rpb25JZCwgc3RlcElkLCBkYXRhLCB0aW1lciwgcmVxQXJncywgaGVhZGVycyB9KSB7XG5cdFx0Y29uc3QgZm4gPSB0aGlzLmZuc1tmdW5jdGlvbklkXTtcblx0XHRpZiAoIWZuKSB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGZ1bmN0aW9uIHdpdGggSUQgXCIke2Z1bmN0aW9uSWR9XCJgKTtcblx0XHRjb25zdCBpbW1lZGlhdGVGbkRhdGEgPSBwYXJzZUZuRGF0YShkYXRhKTtcblx0XHRsZXQgeyB2ZXJzaW9uOiB2ZXJzaW9uJDEgfSA9IGltbWVkaWF0ZUZuRGF0YTtcblx0XHRpZiAodmVyc2lvbiQxID09PSBFeGVjdXRpb25WZXJzaW9uLlYxICYmIGZuLmZuW1wic2hvdWxkT3B0aW1pemVQYXJhbGxlbGlzbVwiXT8uKCkpIHZlcnNpb24kMSA9IEV4ZWN1dGlvblZlcnNpb24uVjI7XG5cdFx0Y29uc3QgcmVzdWx0ID0gcnVuQXNQcm9taXNlKGFzeW5jICgpID0+IHtcblx0XHRcdGNvbnN0IGFueUZuRGF0YSA9IGF3YWl0IGZldGNoQWxsRm5EYXRhKHtcblx0XHRcdFx0ZGF0YTogaW1tZWRpYXRlRm5EYXRhLFxuXHRcdFx0XHRhcGk6IHRoaXMuY2xpZW50W1wiaW5uZ2VzdEFwaVwiXSxcblx0XHRcdFx0dmVyc2lvbjogdmVyc2lvbiQxXG5cdFx0XHR9KTtcblx0XHRcdGlmICghYW55Rm5EYXRhLm9rKSB0aHJvdyBuZXcgRXJyb3IoYW55Rm5EYXRhLmVycm9yKTtcblx0XHRcdGNvbnN0IGV4ZWN1dGlvbk9wdGlvbnMgPSBhd2FpdCAoKHMpID0+IHMpKHtcblx0XHRcdFx0W0V4ZWN1dGlvblZlcnNpb24uVjBdOiAoeyBldmVudCwgZXZlbnRzLCBzdGVwcywgY3R4LCB2ZXJzaW9uOiB2ZXJzaW9uJDIgfSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHN0ZXBTdGF0ZSA9IE9iamVjdC5lbnRyaWVzKHN0ZXBzID8/IHt9KS5yZWR1Y2UoKGFjYywgW2lkLCBkYXRhJDFdKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHQuLi5hY2MsXG5cdFx0XHRcdFx0XHRcdFtpZF06IHtcblx0XHRcdFx0XHRcdFx0XHRpZCxcblx0XHRcdFx0XHRcdFx0XHRkYXRhOiBkYXRhJDFcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9LCB7fSk7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHZlcnNpb246IHZlcnNpb24kMixcblx0XHRcdFx0XHRcdHBhcnRpYWxPcHRpb25zOiB7XG5cdFx0XHRcdFx0XHRcdGNsaWVudDogdGhpcy5jbGllbnQsXG5cdFx0XHRcdFx0XHRcdHJ1bklkOiBjdHg/LnJ1bl9pZCB8fCBcIlwiLFxuXHRcdFx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnQsXG5cdFx0XHRcdFx0XHRcdFx0ZXZlbnRzLFxuXHRcdFx0XHRcdFx0XHRcdHJ1bklkOiBjdHg/LnJ1bl9pZCB8fCBcIlwiLFxuXHRcdFx0XHRcdFx0XHRcdGF0dGVtcHQ6IGN0eD8uYXR0ZW1wdCA/PyAwXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdHN0ZXBTdGF0ZSxcblx0XHRcdFx0XHRcdFx0cmVxdWVzdGVkUnVuU3RlcDogc3RlcElkID09PSBcInN0ZXBcIiA/IHZvaWQgMCA6IHN0ZXBJZCB8fCB2b2lkIDAsXG5cdFx0XHRcdFx0XHRcdHRpbWVyLFxuXHRcdFx0XHRcdFx0XHRpc0ZhaWx1cmVIYW5kbGVyOiBmbi5vbkZhaWx1cmUsXG5cdFx0XHRcdFx0XHRcdHN0ZXBDb21wbGV0aW9uT3JkZXI6IGN0eD8uc3RhY2s/LnN0YWNrID8/IFtdLFxuXHRcdFx0XHRcdFx0XHRyZXFBcmdzLFxuXHRcdFx0XHRcdFx0XHRoZWFkZXJzXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSxcblx0XHRcdFx0W0V4ZWN1dGlvblZlcnNpb24uVjFdOiAoeyBldmVudCwgZXZlbnRzLCBzdGVwcywgY3R4LCB2ZXJzaW9uOiB2ZXJzaW9uJDIgfSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHN0ZXBTdGF0ZSA9IE9iamVjdC5lbnRyaWVzKHN0ZXBzID8/IHt9KS5yZWR1Y2UoKGFjYywgW2lkLCByZXN1bHQkMV0pID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdC4uLmFjYyxcblx0XHRcdFx0XHRcdFx0W2lkXTogcmVzdWx0JDEudHlwZSA9PT0gXCJkYXRhXCIgPyB7XG5cdFx0XHRcdFx0XHRcdFx0aWQsXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YTogcmVzdWx0JDEuZGF0YVxuXHRcdFx0XHRcdFx0XHR9IDogcmVzdWx0JDEudHlwZSA9PT0gXCJpbnB1dFwiID8ge1xuXHRcdFx0XHRcdFx0XHRcdGlkLFxuXHRcdFx0XHRcdFx0XHRcdGlucHV0OiByZXN1bHQkMS5pbnB1dFxuXHRcdFx0XHRcdFx0XHR9IDoge1xuXHRcdFx0XHRcdFx0XHRcdGlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiByZXN1bHQkMS5lcnJvclxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0sIHt9KTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dmVyc2lvbjogdmVyc2lvbiQyLFxuXHRcdFx0XHRcdFx0cGFydGlhbE9wdGlvbnM6IHtcblx0XHRcdFx0XHRcdFx0Y2xpZW50OiB0aGlzLmNsaWVudCxcblx0XHRcdFx0XHRcdFx0cnVuSWQ6IGN0eD8ucnVuX2lkIHx8IFwiXCIsXG5cdFx0XHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdFx0XHRldmVudCxcblx0XHRcdFx0XHRcdFx0XHRldmVudHMsXG5cdFx0XHRcdFx0XHRcdFx0cnVuSWQ6IGN0eD8ucnVuX2lkIHx8IFwiXCIsXG5cdFx0XHRcdFx0XHRcdFx0YXR0ZW1wdDogY3R4Py5hdHRlbXB0ID8/IDBcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0c3RlcFN0YXRlLFxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0ZWRSdW5TdGVwOiBzdGVwSWQgPT09IFwic3RlcFwiID8gdm9pZCAwIDogc3RlcElkIHx8IHZvaWQgMCxcblx0XHRcdFx0XHRcdFx0dGltZXIsXG5cdFx0XHRcdFx0XHRcdGlzRmFpbHVyZUhhbmRsZXI6IGZuLm9uRmFpbHVyZSxcblx0XHRcdFx0XHRcdFx0ZGlzYWJsZUltbWVkaWF0ZUV4ZWN1dGlvbjogY3R4Py5kaXNhYmxlX2ltbWVkaWF0ZV9leGVjdXRpb24sXG5cdFx0XHRcdFx0XHRcdHN0ZXBDb21wbGV0aW9uT3JkZXI6IGN0eD8uc3RhY2s/LnN0YWNrID8/IFtdLFxuXHRcdFx0XHRcdFx0XHRyZXFBcmdzLFxuXHRcdFx0XHRcdFx0XHRoZWFkZXJzXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSxcblx0XHRcdFx0W0V4ZWN1dGlvblZlcnNpb24uVjJdOiAoeyBldmVudCwgZXZlbnRzLCBzdGVwcywgY3R4LCB2ZXJzaW9uOiB2ZXJzaW9uJDIgfSkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHN0ZXBTdGF0ZSA9IE9iamVjdC5lbnRyaWVzKHN0ZXBzID8/IHt9KS5yZWR1Y2UoKGFjYywgW2lkLCByZXN1bHQkMV0pID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdC4uLmFjYyxcblx0XHRcdFx0XHRcdFx0W2lkXTogcmVzdWx0JDEudHlwZSA9PT0gXCJkYXRhXCIgPyB7XG5cdFx0XHRcdFx0XHRcdFx0aWQsXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YTogcmVzdWx0JDEuZGF0YVxuXHRcdFx0XHRcdFx0XHR9IDogcmVzdWx0JDEudHlwZSA9PT0gXCJpbnB1dFwiID8ge1xuXHRcdFx0XHRcdFx0XHRcdGlkLFxuXHRcdFx0XHRcdFx0XHRcdGlucHV0OiByZXN1bHQkMS5pbnB1dFxuXHRcdFx0XHRcdFx0XHR9IDoge1xuXHRcdFx0XHRcdFx0XHRcdGlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiByZXN1bHQkMS5lcnJvclxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0sIHt9KTtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dmVyc2lvbjogdmVyc2lvbiQyLFxuXHRcdFx0XHRcdFx0cGFydGlhbE9wdGlvbnM6IHtcblx0XHRcdFx0XHRcdFx0Y2xpZW50OiB0aGlzLmNsaWVudCxcblx0XHRcdFx0XHRcdFx0cnVuSWQ6IGN0eD8ucnVuX2lkIHx8IFwiXCIsXG5cdFx0XHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdFx0XHRldmVudCxcblx0XHRcdFx0XHRcdFx0XHRldmVudHMsXG5cdFx0XHRcdFx0XHRcdFx0cnVuSWQ6IGN0eD8ucnVuX2lkIHx8IFwiXCIsXG5cdFx0XHRcdFx0XHRcdFx0YXR0ZW1wdDogY3R4Py5hdHRlbXB0ID8/IDBcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0c3RlcFN0YXRlLFxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0ZWRSdW5TdGVwOiBzdGVwSWQgPT09IFwic3RlcFwiID8gdm9pZCAwIDogc3RlcElkIHx8IHZvaWQgMCxcblx0XHRcdFx0XHRcdFx0dGltZXIsXG5cdFx0XHRcdFx0XHRcdGlzRmFpbHVyZUhhbmRsZXI6IGZuLm9uRmFpbHVyZSxcblx0XHRcdFx0XHRcdFx0ZGlzYWJsZUltbWVkaWF0ZUV4ZWN1dGlvbjogY3R4Py5kaXNhYmxlX2ltbWVkaWF0ZV9leGVjdXRpb24sXG5cdFx0XHRcdFx0XHRcdHN0ZXBDb21wbGV0aW9uT3JkZXI6IGN0eD8uc3RhY2s/LnN0YWNrID8/IFtdLFxuXHRcdFx0XHRcdFx0XHRyZXFBcmdzLFxuXHRcdFx0XHRcdFx0XHRoZWFkZXJzXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fSlbdmVyc2lvbiQxXShhbnlGbkRhdGEudmFsdWUpO1xuXHRcdFx0cmV0dXJuIGZuLmZuW1wiY3JlYXRlRXhlY3V0aW9uXCJdKGV4ZWN1dGlvbk9wdGlvbnMpLnN0YXJ0KCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHZlcnNpb246IHZlcnNpb24kMSxcblx0XHRcdHJlc3VsdFxuXHRcdH07XG5cdH1cblx0Y29uZmlncyh1cmwpIHtcblx0XHRjb25zdCBjb25maWdzID0gT2JqZWN0LnZhbHVlcyh0aGlzLnJhd0ZucykucmVkdWNlKChhY2MsIGZuKSA9PiBbLi4uYWNjLCAuLi5mbltcImdldENvbmZpZ1wiXSh7XG5cdFx0XHRiYXNlVXJsOiB1cmwsXG5cdFx0XHRhcHBQcmVmaXg6IHRoaXMuaWRcblx0XHR9KV0sIFtdKTtcblx0XHRmb3IgKGNvbnN0IGNvbmZpZyBvZiBjb25maWdzKSB7XG5cdFx0XHRjb25zdCBjaGVjayA9IGZ1bmN0aW9uQ29uZmlnU2NoZW1hLnNhZmVQYXJzZShjb25maWcpO1xuXHRcdFx0aWYgKCFjaGVjay5zdWNjZXNzKSB7XG5cdFx0XHRcdGNvbnN0IGVycm9ycyA9IGNoZWNrLmVycm9yLmVycm9ycy5tYXAoKGVycikgPT4gZXJyLm1lc3NhZ2UpLmpvaW4oXCI7IFwiKTtcblx0XHRcdFx0dGhpcy5sb2coXCJ3YXJuXCIsIGBDb25maWcgaW52YWxpZCBmb3IgZnVuY3Rpb24gXCIke2NvbmZpZy5pZH1cIiA6ICR7ZXJyb3JzfWApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY29uZmlncztcblx0fVxuXHQvKipcblx0KiBSZXR1cm4gYW4gSW5uZ2VzdCBzZXJ2ZSBlbmRwb2ludCBVUkwgZ2l2ZW4gYSBwb3RlbnRpYWwgYHBhdGhgIGFuZCBgaG9zdGAuXG5cdCpcblx0KiBXaWxsIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBgc2VydmVIb3N0YCBhbmQgYHNlcnZlUGF0aGAgaWYgdGhleSBoYXZlIGJlZW5cblx0KiBzZXQgd2hlbiByZWdpc3RlcmluZy5cblx0Ki9cblx0cmVxVXJsKHVybCkge1xuXHRcdGxldCByZXQgPSBuZXcgVVJMKHVybCk7XG5cdFx0Y29uc3Qgc2VydmVIb3N0ID0gdGhpcy5zZXJ2ZUhvc3QgfHwgdGhpcy5lbnZbZW52S2V5cy5Jbm5nZXN0U2VydmVIb3N0XTtcblx0XHRjb25zdCBzZXJ2ZVBhdGggPSB0aGlzLnNlcnZlUGF0aCB8fCB0aGlzLmVudltlbnZLZXlzLklubmdlc3RTZXJ2ZVBhdGhdO1xuXHRcdGlmIChzZXJ2ZVBhdGgpIHJldC5wYXRobmFtZSA9IHNlcnZlUGF0aDtcblx0XHRpZiAoc2VydmVIb3N0KSByZXQgPSBuZXcgVVJMKHJldC5wYXRobmFtZSArIHJldC5zZWFyY2gsIHNlcnZlSG9zdCk7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXHRyZWdpc3RlckJvZHkoeyB1cmwsIGRlcGxveUlkIH0pIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dXJsOiB1cmwuaHJlZixcblx0XHRcdGRlcGxveVR5cGU6IFwicGluZ1wiLFxuXHRcdFx0ZnJhbWV3b3JrOiB0aGlzLmZyYW1ld29ya05hbWUsXG5cdFx0XHRhcHBOYW1lOiB0aGlzLmlkLFxuXHRcdFx0ZnVuY3Rpb25zOiB0aGlzLmNvbmZpZ3ModXJsKSxcblx0XHRcdHNkazogYGpzOnYke3ZlcnNpb259YCxcblx0XHRcdHY6IFwiMC4xXCIsXG5cdFx0XHRkZXBsb3lJZDogZGVwbG95SWQgfHwgdm9pZCAwLFxuXHRcdFx0Y2FwYWJpbGl0aWVzOiB7XG5cdFx0XHRcdHRydXN0X3Byb2JlOiBcInYxXCIsXG5cdFx0XHRcdGNvbm5lY3Q6IFwidjFcIlxuXHRcdFx0fSxcblx0XHRcdGFwcFZlcnNpb246IHRoaXMuY2xpZW50LmFwcFZlcnNpb25cblx0XHR9O1xuXHR9XG5cdGFzeW5jIGluQmFuZFJlZ2lzdGVyQm9keSh7IGFjdGlvbnMsIGRlcGxveUlkLCBlbnYsIHNpZ25hdHVyZVZhbGlkYXRpb24sIHVybCB9KSB7XG5cdFx0Y29uc3QgcmVnaXN0ZXJCb2R5ID0gdGhpcy5yZWdpc3RlckJvZHkoe1xuXHRcdFx0ZGVwbG95SWQsXG5cdFx0XHR1cmxcblx0XHR9KTtcblx0XHRjb25zdCBpbnRyb3NwZWN0aW9uQm9keSA9IGF3YWl0IHRoaXMuaW50cm9zcGVjdGlvbkJvZHkoe1xuXHRcdFx0YWN0aW9ucyxcblx0XHRcdGVudixcblx0XHRcdHNpZ25hdHVyZVZhbGlkYXRpb24sXG5cdFx0XHR1cmxcblx0XHR9KTtcblx0XHRjb25zdCBib2R5ID0ge1xuXHRcdFx0YXBwX2lkOiB0aGlzLmlkLFxuXHRcdFx0YXBwVmVyc2lvbjogdGhpcy5jbGllbnQuYXBwVmVyc2lvbixcblx0XHRcdGNhcGFiaWxpdGllczogcmVnaXN0ZXJCb2R5LmNhcGFiaWxpdGllcyxcblx0XHRcdGVudixcblx0XHRcdGZyYW1ld29yazogcmVnaXN0ZXJCb2R5LmZyYW1ld29yayxcblx0XHRcdGZ1bmN0aW9uczogcmVnaXN0ZXJCb2R5LmZ1bmN0aW9ucyxcblx0XHRcdGluc3BlY3Rpb246IGludHJvc3BlY3Rpb25Cb2R5LFxuXHRcdFx0cGxhdGZvcm06IGdldFBsYXRmb3JtTmFtZSh7XG5cdFx0XHRcdC4uLmFsbFByb2Nlc3NFbnYoKSxcblx0XHRcdFx0Li4udGhpcy5lbnZcblx0XHRcdH0pLFxuXHRcdFx0c2RrX2F1dGhvcjogXCJpbm5nZXN0XCIsXG5cdFx0XHRzZGtfbGFuZ3VhZ2U6IFwiXCIsXG5cdFx0XHRzZGtfdmVyc2lvbjogXCJcIixcblx0XHRcdHNkazogcmVnaXN0ZXJCb2R5LnNkayxcblx0XHRcdHVybDogcmVnaXN0ZXJCb2R5LnVybFxuXHRcdH07XG5cdFx0aWYgKGludHJvc3BlY3Rpb25Cb2R5LmF1dGhlbnRpY2F0aW9uX3N1Y2NlZWRlZCkge1xuXHRcdFx0Ym9keS5zZGtfbGFuZ3VhZ2UgPSBpbnRyb3NwZWN0aW9uQm9keS5zZGtfbGFuZ3VhZ2U7XG5cdFx0XHRib2R5LnNka192ZXJzaW9uID0gaW50cm9zcGVjdGlvbkJvZHkuc2RrX3ZlcnNpb247XG5cdFx0fVxuXHRcdHJldHVybiBib2R5O1xuXHR9XG5cdGFzeW5jIGludHJvc3BlY3Rpb25Cb2R5KHsgYWN0aW9ucywgZW52LCBzaWduYXR1cmVWYWxpZGF0aW9uLCB1cmwgfSkge1xuXHRcdGNvbnN0IHJlZ2lzdGVyQm9keSA9IHRoaXMucmVnaXN0ZXJCb2R5KHtcblx0XHRcdHVybDogdGhpcy5yZXFVcmwodXJsKSxcblx0XHRcdGRlcGxveUlkOiBudWxsXG5cdFx0fSk7XG5cdFx0aWYgKCF0aGlzLl9tb2RlKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBtb2RlIHNldDsgY2Fubm90IGludHJvc3BlY3Qgd2l0aG91dCBtb2RlXCIpO1xuXHRcdGxldCBpbnRyb3NwZWN0aW9uID0ge1xuXHRcdFx0YXV0aGVudGljYXRpb25fc3VjY2VlZGVkOiBudWxsLFxuXHRcdFx0ZXh0cmE6IHsgaXNfbW9kZV9leHBsaWNpdDogdGhpcy5fbW9kZS5pc0V4cGxpY2l0IH0sXG5cdFx0XHRoYXNfZXZlbnRfa2V5OiB0aGlzLmNsaWVudFtcImV2ZW50S2V5U2V0XCJdKCksXG5cdFx0XHRoYXNfc2lnbmluZ19rZXk6IEJvb2xlYW4odGhpcy5zaWduaW5nS2V5KSxcblx0XHRcdGZ1bmN0aW9uX2NvdW50OiByZWdpc3RlckJvZHkuZnVuY3Rpb25zLmxlbmd0aCxcblx0XHRcdG1vZGU6IHRoaXMuX21vZGUudHlwZSxcblx0XHRcdHNjaGVtYV92ZXJzaW9uOiBcIjIwMjQtMDUtMjRcIlxuXHRcdH07XG5cdFx0aWYgKHRoaXMuX21vZGUudHlwZSA9PT0gXCJjbG91ZFwiKSB0cnkge1xuXHRcdFx0aWYgKCEoYXdhaXQgc2lnbmF0dXJlVmFsaWRhdGlvbikuc3VjY2VzcykgdGhyb3cgbmV3IEVycm9yKFwiU2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpO1xuXHRcdFx0aW50cm9zcGVjdGlvbiA9IHtcblx0XHRcdFx0Li4uaW50cm9zcGVjdGlvbixcblx0XHRcdFx0YXV0aGVudGljYXRpb25fc3VjY2VlZGVkOiB0cnVlLFxuXHRcdFx0XHRhcGlfb3JpZ2luOiB0aGlzLmFwaUJhc2VVcmwsXG5cdFx0XHRcdGFwcF9pZDogdGhpcy5pZCxcblx0XHRcdFx0Y2FwYWJpbGl0aWVzOiB7XG5cdFx0XHRcdFx0dHJ1c3RfcHJvYmU6IFwidjFcIixcblx0XHRcdFx0XHRjb25uZWN0OiBcInYxXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0ZW52LFxuXHRcdFx0XHRldmVudF9hcGlfb3JpZ2luOiB0aGlzLmV2ZW50QXBpQmFzZVVybCxcblx0XHRcdFx0ZXZlbnRfa2V5X2hhc2g6IHRoaXMuaGFzaGVkRXZlbnRLZXkgPz8gbnVsbCxcblx0XHRcdFx0ZXh0cmE6IHtcblx0XHRcdFx0XHQuLi5pbnRyb3NwZWN0aW9uLmV4dHJhLFxuXHRcdFx0XHRcdGlzX3N0cmVhbWluZzogYXdhaXQgdGhpcy5zaG91bGRTdHJlYW0oYWN0aW9ucylcblx0XHRcdFx0fSxcblx0XHRcdFx0ZnJhbWV3b3JrOiB0aGlzLmZyYW1ld29ya05hbWUsXG5cdFx0XHRcdHNka19sYW5ndWFnZTogXCJqc1wiLFxuXHRcdFx0XHRzZGtfdmVyc2lvbjogdmVyc2lvbixcblx0XHRcdFx0c2VydmVfb3JpZ2luOiB0aGlzLnNlcnZlSG9zdCA/PyBudWxsLFxuXHRcdFx0XHRzZXJ2ZV9wYXRoOiB0aGlzLnNlcnZlUGF0aCA/PyBudWxsLFxuXHRcdFx0XHRzaWduaW5nX2tleV9mYWxsYmFja19oYXNoOiB0aGlzLmhhc2hlZFNpZ25pbmdLZXlGYWxsYmFjayA/PyBudWxsLFxuXHRcdFx0XHRzaWduaW5nX2tleV9oYXNoOiB0aGlzLmhhc2hlZFNpZ25pbmdLZXkgPz8gbnVsbFxuXHRcdFx0fTtcblx0XHR9IGNhdGNoIHtcblx0XHRcdGludHJvc3BlY3Rpb24gPSB7XG5cdFx0XHRcdC4uLmludHJvc3BlY3Rpb24sXG5cdFx0XHRcdGF1dGhlbnRpY2F0aW9uX3N1Y2NlZWRlZDogZmFsc2Vcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiBpbnRyb3NwZWN0aW9uO1xuXHR9XG5cdGFzeW5jIHJlZ2lzdGVyKHVybCwgZGVwbG95SWQsIGdldEhlYWRlcnMpIHtcblx0XHRjb25zdCBib2R5ID0gdGhpcy5yZWdpc3RlckJvZHkoe1xuXHRcdFx0dXJsLFxuXHRcdFx0ZGVwbG95SWRcblx0XHR9KTtcblx0XHRsZXQgcmVzO1xuXHRcdGxldCByZWdpc3RlclVSTCA9IG5ldyBVUkwodGhpcy5pbm5nZXN0UmVnaXN0ZXJVcmwuaHJlZik7XG5cdFx0aWYgKHRoaXMuX21vZGUgJiYgdGhpcy5fbW9kZS5pc0luZmVycmVkICYmIHRoaXMuX21vZGUuaXNEZXYpIHtcblx0XHRcdGNvbnN0IGhvc3QgPSBkZXZTZXJ2ZXJIb3N0KHRoaXMuZW52KTtcblx0XHRcdGlmIChhd2FpdCBkZXZTZXJ2ZXJBdmFpbGFibGUoaG9zdCwgdGhpcy5mZXRjaCkpIHJlZ2lzdGVyVVJMID0gZGV2U2VydmVyVXJsKGhvc3QsIFwiL2ZuL3JlZ2lzdGVyXCIpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5fbW9kZT8uZXhwbGljaXREZXZVcmwpIHJlZ2lzdGVyVVJMID0gZGV2U2VydmVyVXJsKHRoaXMuX21vZGUuZXhwbGljaXREZXZVcmwuaHJlZiwgXCIvZm4vcmVnaXN0ZXJcIik7XG5cdFx0aWYgKGRlcGxveUlkKSByZWdpc3RlclVSTC5zZWFyY2hQYXJhbXMuc2V0KHF1ZXJ5S2V5cy5EZXBsb3lJZCwgZGVwbG95SWQpO1xuXHRcdHRyeSB7XG5cdFx0XHRyZXMgPSBhd2FpdCBmZXRjaFdpdGhBdXRoRmFsbGJhY2soe1xuXHRcdFx0XHRhdXRoVG9rZW46IHRoaXMuaGFzaGVkU2lnbmluZ0tleSxcblx0XHRcdFx0YXV0aFRva2VuRmFsbGJhY2s6IHRoaXMuaGFzaGVkU2lnbmluZ0tleUZhbGxiYWNrLFxuXHRcdFx0XHRmZXRjaDogdGhpcy5mZXRjaCxcblx0XHRcdFx0dXJsOiByZWdpc3RlclVSTC5ocmVmLFxuXHRcdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcdFx0XHRib2R5OiBzdHJpbmdpZnkoYm9keSksXG5cdFx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdFx0Li4uZ2V0SGVhZGVycygpLFxuXHRcdFx0XHRcdFx0W2hlYWRlcktleXMuSW5uZ2VzdFN5bmNLaW5kXTogc3luY0tpbmQuT3V0T2ZCYW5kXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyZWRpcmVjdDogXCJmb2xsb3dcIlxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHRoaXMubG9nKFwiZXJyb3JcIiwgZXJyKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN0YXR1czogNTAwLFxuXHRcdFx0XHRtZXNzYWdlOiBgRmFpbGVkIHRvIHJlZ2lzdGVyJHtlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGA7ICR7ZXJyLm1lc3NhZ2V9YCA6IFwiXCJ9YCxcblx0XHRcdFx0bW9kaWZpZWQ6IGZhbHNlXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRjb25zdCByYXcgPSBhd2FpdCByZXMudGV4dCgpO1xuXHRcdGxldCBkYXRhID0ge307XG5cdFx0dHJ5IHtcblx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKHJhdyk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHR0aGlzLmxvZyhcIndhcm5cIiwgXCJDb3VsZG4ndCB1bnBhY2sgcmVnaXN0ZXIgcmVzcG9uc2U6XCIsIGVycik7XG5cdFx0XHRsZXQgbWVzc2FnZSA9IFwiRmFpbGVkIHRvIHJlZ2lzdGVyXCI7XG5cdFx0XHRpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIG1lc3NhZ2UgKz0gYDsgJHtlcnIubWVzc2FnZX1gO1xuXHRcdFx0bWVzc2FnZSArPSBgOyBzdGF0dXMgY29kZTogJHtyZXMuc3RhdHVzfWA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzdGF0dXM6IDUwMCxcblx0XHRcdFx0bWVzc2FnZSxcblx0XHRcdFx0bW9kaWZpZWQ6IGZhbHNlXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRsZXQgc3RhdHVzO1xuXHRcdGxldCBlcnJvcjtcblx0XHRsZXQgc2tpcHBlZDtcblx0XHRsZXQgbW9kaWZpZWQ7XG5cdFx0dHJ5IHtcblx0XHRcdCh7c3RhdHVzLCBlcnJvciwgc2tpcHBlZCwgbW9kaWZpZWR9ID0gcmVnaXN0ZXJSZXNTY2hlbWEucGFyc2UoZGF0YSkpO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dGhpcy5sb2coXCJ3YXJuXCIsIFwiSW52YWxpZCByZWdpc3RlciByZXNwb25zZSBzY2hlbWE6XCIsIGVycik7XG5cdFx0XHRsZXQgbWVzc2FnZSA9IFwiRmFpbGVkIHRvIHJlZ2lzdGVyXCI7XG5cdFx0XHRpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIG1lc3NhZ2UgKz0gYDsgJHtlcnIubWVzc2FnZX1gO1xuXHRcdFx0bWVzc2FnZSArPSBgOyBzdGF0dXMgY29kZTogJHtyZXMuc3RhdHVzfWA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzdGF0dXM6IDUwMCxcblx0XHRcdFx0bWVzc2FnZSxcblx0XHRcdFx0bW9kaWZpZWQ6IGZhbHNlXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRpZiAoIXNraXBwZWQpIHRoaXMubG9nKFwiZGVidWdcIiwgXCJyZWdpc3RlcmVkIGlubmdlc3QgZnVuY3Rpb25zOlwiLCByZXMuc3RhdHVzLCByZXMuc3RhdHVzVGV4dCwgZGF0YSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1cyxcblx0XHRcdG1lc3NhZ2U6IGVycm9yLFxuXHRcdFx0bW9kaWZpZWRcblx0XHR9O1xuXHR9XG5cdC8qKlxuXHQqIEdpdmVuIGFuIGVudmlyb25tZW50LCB1cHNlcnQgYW55IG1pc3Npbmcga2V5cy4gVGhpcyBpcyB1c2VmdWwgaW5cblx0KiBzaXR1YXRpb25zIHdoZXJlIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgcGFzc2VkIGRpcmVjdGx5IHRvIGhhbmRsZXJzIG9yXG5cdCogYXJlIG90aGVyd2lzZSBkaWZmaWN1bHQgdG8gYWNjZXNzIGR1cmluZyBpbml0aWFsaXphdGlvbi5cblx0Ki9cblx0dXBzZXJ0S2V5c0Zyb21FbnYoKSB7XG5cdFx0aWYgKHRoaXMuZW52W2VudktleXMuSW5uZ2VzdFNpZ25pbmdLZXldKSB7XG5cdFx0XHRpZiAoIXRoaXMuc2lnbmluZ0tleSkgdGhpcy5zaWduaW5nS2V5ID0gU3RyaW5nKHRoaXMuZW52W2VudktleXMuSW5uZ2VzdFNpZ25pbmdLZXldKTtcblx0XHRcdHRoaXMuY2xpZW50W1wiaW5uZ2VzdEFwaVwiXS5zZXRTaWduaW5nS2V5KHRoaXMuc2lnbmluZ0tleSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmVudltlbnZLZXlzLklubmdlc3RTaWduaW5nS2V5RmFsbGJhY2tdKSB7XG5cdFx0XHRpZiAoIXRoaXMuc2lnbmluZ0tleUZhbGxiYWNrKSB0aGlzLnNpZ25pbmdLZXlGYWxsYmFjayA9IFN0cmluZyh0aGlzLmVudltlbnZLZXlzLklubmdlc3RTaWduaW5nS2V5RmFsbGJhY2tdKTtcblx0XHRcdHRoaXMuY2xpZW50W1wiaW5uZ2VzdEFwaVwiXS5zZXRTaWduaW5nS2V5RmFsbGJhY2sodGhpcy5zaWduaW5nS2V5RmFsbGJhY2spO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuY2xpZW50W1wiZXZlbnRLZXlTZXRcIl0oKSAmJiB0aGlzLmVudltlbnZLZXlzLklubmdlc3RFdmVudEtleV0pIHRoaXMuY2xpZW50LnNldEV2ZW50S2V5KFN0cmluZyh0aGlzLmVudltlbnZLZXlzLklubmdlc3RFdmVudEtleV0pKTtcblx0XHRpZiAodGhpcy5lbnZbZW52S2V5cy5Jbm5nZXN0RGV2U2VydmVyVXJsXSkgdGhpcy5sb2coXCJ3YXJuXCIsIGBVc2Ugb2YgJHtlbnZLZXlzLklubmdlc3REZXZTZXJ2ZXJVcmx9IGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gdjM7IHBsZWFzZSB1c2UgJHtlbnZLZXlzLklubmdlc3RCYXNlVXJsfSBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly93d3cuaW5uZ2VzdC5jb20vZG9jcy9zZGsvbWlncmF0aW9uYCk7XG5cdH1cblx0LyoqXG5cdCogVmFsaWRhdGUgdGhlIHNpZ25hdHVyZSBvZiBhIHJlcXVlc3QgYW5kIHJldHVybiB0aGUgc2lnbmluZyBrZXkgdXNlZCB0b1xuXHQqIHZhbGlkYXRlIGl0LlxuXHQqL1xuXHRhc3luYyB2YWxpZGF0ZVNpZ25hdHVyZShzaWcsIGJvZHkpIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKHRoaXMuc2tpcFNpZ25hdHVyZVZhbGlkYXRpb24pIHJldHVybiB7XG5cdFx0XHRcdHN1Y2Nlc3M6IHRydWUsXG5cdFx0XHRcdGtleVVzZWQ6IFwiXCJcblx0XHRcdH07XG5cdFx0XHRpZiAodGhpcy5fbW9kZSAmJiAhdGhpcy5fbW9kZS5pc0Nsb3VkKSByZXR1cm4ge1xuXHRcdFx0XHRzdWNjZXNzOiB0cnVlLFxuXHRcdFx0XHRrZXlVc2VkOiBcIlwiXG5cdFx0XHR9O1xuXHRcdFx0aWYgKCF0aGlzLnNpZ25pbmdLZXkpIHRocm93IG5ldyBFcnJvcihgTm8gc2lnbmluZyBrZXkgZm91bmQgaW4gY2xpZW50IG9wdGlvbnMgb3IgJHtlbnZLZXlzLklubmdlc3RTaWduaW5nS2V5fSBlbnYgdmFyLiBGaW5kIHlvdXIga2V5cyBhdCBodHRwczovL2FwcC5pbm5nZXN0LmNvbS9zZWNyZXRzYCk7XG5cdFx0XHRpZiAoIXNpZykgdGhyb3cgbmV3IEVycm9yKGBObyAke2hlYWRlcktleXMuU2lnbmF0dXJlfSBwcm92aWRlZGApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c3VjY2VzczogdHJ1ZSxcblx0XHRcdFx0a2V5VXNlZDogbmV3IFJlcXVlc3RTaWduYXR1cmUoc2lnKS52ZXJpZnlTaWduYXR1cmUoe1xuXHRcdFx0XHRcdGJvZHksXG5cdFx0XHRcdFx0YWxsb3dFeHBpcmVkU2lnbmF0dXJlczogdGhpcy5hbGxvd0V4cGlyZWRTaWduYXR1cmVzLFxuXHRcdFx0XHRcdHNpZ25pbmdLZXk6IHRoaXMuc2lnbmluZ0tleSxcblx0XHRcdFx0XHRzaWduaW5nS2V5RmFsbGJhY2s6IHRoaXMuc2lnbmluZ0tleUZhbGxiYWNrXG5cdFx0XHRcdH0pXG5cdFx0XHR9O1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRcdGVyclxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblx0Z2V0UmVzcG9uc2VTaWduYXR1cmUoa2V5LCBib2R5KSB7XG5cdFx0Y29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblx0XHRjb25zdCBtYWMgPSBzaWduRGF0YVdpdGhLZXkoYm9keSwga2V5LCBub3cudG9TdHJpbmcoKSk7XG5cdFx0cmV0dXJuIGB0PSR7bm93fSZzPSR7bWFjfWA7XG5cdH1cblx0LyoqXG5cdCogTG9nIHRvIHN0ZG91dC9zdGRlcnIgaWYgdGhlIGxvZyBsZXZlbCBpcyBzZXQgdG8gaW5jbHVkZSB0aGUgZ2l2ZW4gbGV2ZWwuXG5cdCogVGhlIGRlZmF1bHQgbG9nIGxldmVsIGlzIGBcImluZm9cImAuXG5cdCpcblx0KiBUaGlzIGlzIGFuIGFic3RyYWN0aW9uIG92ZXIgYGNvbnNvbGUubG9nYCBhbmQgd2lsbCB0cnkgdG8gdXNlIHRoZSBjb3JyZWN0XG5cdCogbWV0aG9kIGZvciB0aGUgZ2l2ZW4gbG9nIGxldmVsLiAgRm9yIGV4YW1wbGUsIGBsb2coXCJlcnJvclwiLCBcImZvb1wiKWAgd2lsbFxuXHQqIGNhbGwgYGNvbnNvbGUuZXJyb3IoXCJmb29cIilgLlxuXHQqL1xuXHRsb2cobGV2ZWwsIC4uLmFyZ3MpIHtcblx0XHRjb25zdCBsb2dMZXZlbHMkMSA9IFtcblx0XHRcdFwiZGVidWdcIixcblx0XHRcdFwiaW5mb1wiLFxuXHRcdFx0XCJ3YXJuXCIsXG5cdFx0XHRcImVycm9yXCIsXG5cdFx0XHRcImZhdGFsXCIsXG5cdFx0XHRcInNpbGVudFwiXG5cdFx0XTtcblx0XHRjb25zdCBsb2dMZXZlbFNldHRpbmcgPSBsb2dMZXZlbHMkMS5pbmRleE9mKHRoaXMubG9nTGV2ZWwpO1xuXHRcdGlmIChsb2dMZXZlbHMkMS5pbmRleE9mKGxldmVsKSA+PSBsb2dMZXZlbFNldHRpbmcpIHtcblx0XHRcdGxldCBsb2dnZXIgPSBjb25zb2xlLmxvZztcblx0XHRcdGlmIChPYmplY3QuaGFzT3duKGNvbnNvbGUsIGxldmVsKSkgbG9nZ2VyID0gY29uc29sZVtsZXZlbF07XG5cdFx0XHRsb2dnZXIoYCR7bG9nUHJlZml4fSAke2xldmVsfSAtYCwgLi4uYXJncyk7XG5cdFx0fVxuXHR9XG59O1xudmFyIFJlcXVlc3RTaWduYXR1cmUgPSBjbGFzcyB7XG5cdHRpbWVzdGFtcDtcblx0c2lnbmF0dXJlO1xuXHRjb25zdHJ1Y3RvcihzaWcpIHtcblx0XHRjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNpZyk7XG5cdFx0dGhpcy50aW1lc3RhbXAgPSBwYXJhbXMuZ2V0KFwidFwiKSB8fCBcIlwiO1xuXHRcdHRoaXMuc2lnbmF0dXJlID0gcGFyYW1zLmdldChcInNcIikgfHwgXCJcIjtcblx0XHRpZiAoIXRoaXMudGltZXN0YW1wIHx8ICF0aGlzLnNpZ25hdHVyZSkgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkICR7aGVhZGVyS2V5cy5TaWduYXR1cmV9IHByb3ZpZGVkYCk7XG5cdH1cblx0aGFzRXhwaXJlZChhbGxvd0V4cGlyZWRTaWduYXR1cmVzKSB7XG5cdFx0aWYgKGFsbG93RXhwaXJlZFNpZ25hdHVyZXMpIHJldHVybiBmYWxzZTtcblx0XHRyZXR1cm4gRGF0ZS5ub3coKSAtICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoTnVtYmVyLnBhcnNlSW50KHRoaXMudGltZXN0YW1wKSAqIDFlMykpLnZhbHVlT2YoKSA+IDFlMyAqIDYwICogNTtcblx0fVxuXHQjdmVyaWZ5U2lnbmF0dXJlKHsgYm9keSwgc2lnbmluZ0tleSwgYWxsb3dFeHBpcmVkU2lnbmF0dXJlcyB9KSB7XG5cdFx0aWYgKHRoaXMuaGFzRXhwaXJlZChhbGxvd0V4cGlyZWRTaWduYXR1cmVzKSkgdGhyb3cgbmV3IEVycm9yKFwiU2lnbmF0dXJlIGhhcyBleHBpcmVkXCIpO1xuXHRcdGlmIChzaWduRGF0YVdpdGhLZXkoYm9keSwgc2lnbmluZ0tleSwgdGhpcy50aW1lc3RhbXApICE9PSB0aGlzLnNpZ25hdHVyZSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzaWduYXR1cmVcIik7XG5cdH1cblx0dmVyaWZ5U2lnbmF0dXJlKHsgYm9keSwgc2lnbmluZ0tleSwgc2lnbmluZ0tleUZhbGxiYWNrLCBhbGxvd0V4cGlyZWRTaWduYXR1cmVzIH0pIHtcblx0XHR0cnkge1xuXHRcdFx0dGhpcy4jdmVyaWZ5U2lnbmF0dXJlKHtcblx0XHRcdFx0Ym9keSxcblx0XHRcdFx0c2lnbmluZ0tleSxcblx0XHRcdFx0YWxsb3dFeHBpcmVkU2lnbmF0dXJlc1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gc2lnbmluZ0tleTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGlmICghc2lnbmluZ0tleUZhbGxiYWNrKSB0aHJvdyBlcnI7XG5cdFx0XHR0aGlzLiN2ZXJpZnlTaWduYXR1cmUoe1xuXHRcdFx0XHRib2R5LFxuXHRcdFx0XHRzaWduaW5nS2V5OiBzaWduaW5nS2V5RmFsbGJhY2ssXG5cdFx0XHRcdGFsbG93RXhwaXJlZFNpZ25hdHVyZXNcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHNpZ25pbmdLZXlGYWxsYmFjaztcblx0XHR9XG5cdH1cbn07XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgSW5uZ2VzdENvbW1IYW5kbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jbm5nZXN0Q29tbUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestCommHandler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestFunction.js":
/*!************************************************************!*\
  !*** ./node_modules/inngest/components/InngestFunction.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InngestFunction: () => (/* binding */ InngestFunction)\n/* harmony export */ });\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _helpers_strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/* harmony import */ var _execution_v0_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./execution/v0.js */ \"(rsc)/./node_modules/inngest/components/execution/v0.js\");\n/* harmony import */ var _execution_v1_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./execution/v1.js */ \"(rsc)/./node_modules/inngest/components/execution/v1.js\");\n/* harmony import */ var _execution_v2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./execution/v2.js */ \"(rsc)/./node_modules/inngest/components/execution/v2.js\");\n\n\n\n\n\n\n//#region src/components/InngestFunction.ts\n/**\n* A stateless Inngest function, wrapping up function configuration and any\n* in-memory steps to run when triggered.\n*\n* This function can be \"registered\" to create a handler that Inngest can\n* trigger remotely.\n*\n* @public\n*/\nvar InngestFunction = class InngestFunction {\n\tstatic stepId = \"step\";\n\tstatic failureSuffix = \"-failure\";\n\tget [Symbol.toStringTag]() {\n\t\treturn InngestFunction.Tag;\n\t}\n\topts;\n\tfn;\n\tonFailureFn;\n\tclient;\n\tmiddleware;\n\t/**\n\t* A stateless Inngest function, wrapping up function configuration and any\n\t* in-memory steps to run when triggered.\n\t*\n\t* This function can be \"registered\" to create a handler that Inngest can\n\t* trigger remotely.\n\t*/\n\tconstructor(client, opts, fn) {\n\t\tthis.client = client;\n\t\tthis.opts = opts;\n\t\tthis.fn = fn;\n\t\tthis.onFailureFn = this.opts.onFailure;\n\t\tthis.middleware = this.client[\"initializeMiddleware\"](this.opts.middleware, {\n\t\t\tregisterInput: { fn: this },\n\t\t\tprefixStack: this.client[\"middleware\"]\n\t\t});\n\t}\n\t/**\n\t* The generated or given ID for this function.\n\t*/\n\tid(prefix) {\n\t\treturn [prefix, this.opts.id].filter(Boolean).join(\"-\");\n\t}\n\t/**\n\t* The generated or given ID for this function, prefixed with the app ID. This\n\t* is used for routing invokes and identifying the function across apps.\n\t*/\n\tget absoluteId() {\n\t\treturn this.id(this.client.id);\n\t}\n\t/**\n\t* The name of this function as it will appear in the Inngest Cloud UI.\n\t*/\n\tget name() {\n\t\treturn this.opts.name || this.id();\n\t}\n\t/**\n\t* The description of this function.\n\t*/\n\tget description() {\n\t\treturn this.opts.description;\n\t}\n\t/**\n\t* Retrieve the Inngest config for this function.\n\t*/\n\tgetConfig({ baseUrl, appPrefix, isConnect }) {\n\t\tconst fnId = this.id(appPrefix);\n\t\tconst stepUrl = new URL(baseUrl.href);\n\t\tstepUrl.searchParams.set(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.queryKeys.FnId, fnId);\n\t\tstepUrl.searchParams.set(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.queryKeys.StepId, InngestFunction.stepId);\n\t\tconst { retries: attempts, cancelOn, idempotency, batchEvents, rateLimit, throttle, concurrency, debounce, timeouts, priority, singleton } = this.opts;\n\t\t/**\n\t\t* Convert retries into the format required when defining function\n\t\t* configuration.\n\t\t*/\n\t\tconst retries = typeof attempts === \"undefined\" ? void 0 : { attempts };\n\t\tconst fn = {\n\t\t\tid: fnId,\n\t\t\tname: this.name,\n\t\t\ttriggers: (this.opts.triggers ?? []).map((trigger) => {\n\t\t\t\tif (\"event\" in trigger) return {\n\t\t\t\t\tevent: trigger.event,\n\t\t\t\t\texpression: trigger.if\n\t\t\t\t};\n\t\t\t\treturn { cron: trigger.cron };\n\t\t\t}),\n\t\t\tsteps: { [InngestFunction.stepId]: {\n\t\t\t\tid: InngestFunction.stepId,\n\t\t\t\tname: InngestFunction.stepId,\n\t\t\t\truntime: {\n\t\t\t\t\ttype: isConnect ? \"ws\" : \"http\",\n\t\t\t\t\turl: stepUrl.href\n\t\t\t\t},\n\t\t\t\tretries\n\t\t\t} },\n\t\t\tidempotency,\n\t\t\tbatchEvents,\n\t\t\trateLimit,\n\t\t\tthrottle,\n\t\t\tconcurrency,\n\t\t\tdebounce,\n\t\t\tpriority,\n\t\t\ttimeouts,\n\t\t\tsingleton\n\t\t};\n\t\tif (cancelOn) fn.cancel = cancelOn.map(({ event, timeout, if: ifStr, match }) => {\n\t\t\tconst ret = { event };\n\t\t\tif (timeout) ret.timeout = (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_1__.timeStr)(timeout);\n\t\t\tif (match) ret.if = `event.${match} == async.${match}`;\n\t\t\telse if (ifStr) ret.if = ifStr;\n\t\t\treturn ret;\n\t\t}, []);\n\t\tconst config = [fn];\n\t\tif (this.onFailureFn) {\n\t\t\tconst id = `${fn.id}${InngestFunction.failureSuffix}`;\n\t\t\tconst name = `${fn.name ?? fn.id} (failure)`;\n\t\t\tconst failureStepUrl = new URL(stepUrl.href);\n\t\t\tfailureStepUrl.searchParams.set(_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.queryKeys.FnId, id);\n\t\t\tconfig.push({\n\t\t\t\tid,\n\t\t\t\tname,\n\t\t\t\ttriggers: [{\n\t\t\t\t\tevent: _helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.internalEvents.FunctionFailed,\n\t\t\t\t\texpression: `event.data.function_id == '${fnId}'`\n\t\t\t\t}],\n\t\t\t\tsteps: { [InngestFunction.stepId]: {\n\t\t\t\t\tid: InngestFunction.stepId,\n\t\t\t\t\tname: InngestFunction.stepId,\n\t\t\t\t\truntime: {\n\t\t\t\t\t\ttype: \"http\",\n\t\t\t\t\t\turl: failureStepUrl.href\n\t\t\t\t\t},\n\t\t\t\t\tretries: { attempts: 1 }\n\t\t\t\t} }\n\t\t\t});\n\t\t}\n\t\treturn config;\n\t}\n\tcreateExecution(opts) {\n\t\tconst options = {\n\t\t\tfn: this,\n\t\t\t...opts.partialOptions\n\t\t};\n\t\treturn {\n\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.ExecutionVersion.V2]: () => (0,_execution_v2_js__WEBPACK_IMPORTED_MODULE_2__.createV2InngestExecution)(options),\n\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.ExecutionVersion.V1]: () => (0,_execution_v1_js__WEBPACK_IMPORTED_MODULE_3__.createV1InngestExecution)(options),\n\t\t\t[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_0__.ExecutionVersion.V0]: () => (0,_execution_v0_js__WEBPACK_IMPORTED_MODULE_4__.createV0InngestExecution)(options)\n\t\t}[opts.version]();\n\t}\n\tshouldOptimizeParallelism() {\n\t\treturn this.opts.optimizeParallelism ?? this.client[\"options\"].optimizeParallelism ?? false;\n\t}\n};\n(function(_InngestFunction) {\n\t_InngestFunction.Tag = \"Inngest.Function\";\n})(InngestFunction || (InngestFunction = {}));\n\n//#endregion\n\n//# sourceMappingURL=InngestFunction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestFunction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestFunctionReference.js":
/*!*********************************************************************!*\
  !*** ./node_modules/inngest/components/InngestFunctionReference.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InngestFunctionReference: () => (/* binding */ InngestFunctionReference),\n/* harmony export */   referenceFunction: () => (/* binding */ referenceFunction)\n/* harmony export */ });\n//#region src/components/InngestFunctionReference.ts\n/**\n* A reference to an `InngestFunction` that can be used to represent both local\n* and remote functions without pulling in the full function definition (i.e.\n* dependencies).\n*\n* These references can be invoked in the same manner as a regular\n* `InngestFunction`.\n*\n* To create a reference function, use the {@link referenceFunction} helper.\n*\n* @public\n*/\nvar InngestFunctionReference = class {\n\tconstructor(opts) {\n\t\tthis.opts = opts;\n\t}\n};\n/**\n* Create a reference to an `InngestFunction` that can be used to represent both\n* local and remote functions without pulling in the full function definition\n* (i.e. dependencies).\n*\n* These references can be invoked in the same manner as a regular\n* `InngestFunction`.\n*\n* @public\n*/\nconst referenceFunction = ({ functionId, appId }) => {\n\treturn new InngestFunctionReference({\n\t\tfunctionId,\n\t\tappId\n\t});\n};\n\n//#endregion\n\n//# sourceMappingURL=InngestFunctionReference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RGdW5jdGlvblJlZmVyZW5jZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx5QkFBeUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG1CQUFtQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDdUQ7QUFDdkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RGdW5jdGlvblJlZmVyZW5jZS5qcz82ZTc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvY29tcG9uZW50cy9Jbm5nZXN0RnVuY3Rpb25SZWZlcmVuY2UudHNcbi8qKlxuKiBBIHJlZmVyZW5jZSB0byBhbiBgSW5uZ2VzdEZ1bmN0aW9uYCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBib3RoIGxvY2FsXG4qIGFuZCByZW1vdGUgZnVuY3Rpb25zIHdpdGhvdXQgcHVsbGluZyBpbiB0aGUgZnVsbCBmdW5jdGlvbiBkZWZpbml0aW9uIChpLmUuXG4qIGRlcGVuZGVuY2llcykuXG4qXG4qIFRoZXNlIHJlZmVyZW5jZXMgY2FuIGJlIGludm9rZWQgaW4gdGhlIHNhbWUgbWFubmVyIGFzIGEgcmVndWxhclxuKiBgSW5uZ2VzdEZ1bmN0aW9uYC5cbipcbiogVG8gY3JlYXRlIGEgcmVmZXJlbmNlIGZ1bmN0aW9uLCB1c2UgdGhlIHtAbGluayByZWZlcmVuY2VGdW5jdGlvbn0gaGVscGVyLlxuKlxuKiBAcHVibGljXG4qL1xudmFyIElubmdlc3RGdW5jdGlvblJlZmVyZW5jZSA9IGNsYXNzIHtcblx0Y29uc3RydWN0b3Iob3B0cykge1xuXHRcdHRoaXMub3B0cyA9IG9wdHM7XG5cdH1cbn07XG4vKipcbiogQ3JlYXRlIGEgcmVmZXJlbmNlIHRvIGFuIGBJbm5nZXN0RnVuY3Rpb25gIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50IGJvdGhcbiogbG9jYWwgYW5kIHJlbW90ZSBmdW5jdGlvbnMgd2l0aG91dCBwdWxsaW5nIGluIHRoZSBmdWxsIGZ1bmN0aW9uIGRlZmluaXRpb25cbiogKGkuZS4gZGVwZW5kZW5jaWVzKS5cbipcbiogVGhlc2UgcmVmZXJlbmNlcyBjYW4gYmUgaW52b2tlZCBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgYSByZWd1bGFyXG4qIGBJbm5nZXN0RnVuY3Rpb25gLlxuKlxuKiBAcHVibGljXG4qL1xuY29uc3QgcmVmZXJlbmNlRnVuY3Rpb24gPSAoeyBmdW5jdGlvbklkLCBhcHBJZCB9KSA9PiB7XG5cdHJldHVybiBuZXcgSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlKHtcblx0XHRmdW5jdGlvbklkLFxuXHRcdGFwcElkXG5cdH0pO1xufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBJbm5nZXN0RnVuY3Rpb25SZWZlcmVuY2UsIHJlZmVyZW5jZUZ1bmN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jbm5nZXN0RnVuY3Rpb25SZWZlcmVuY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestMiddleware.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/components/InngestMiddleware.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InngestMiddleware: () => (/* binding */ InngestMiddleware),\n/* harmony export */   getHookStack: () => (/* binding */ getHookStack)\n/* harmony export */ });\n/* harmony import */ var _helpers_functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\n\n\n//#region src/components/InngestMiddleware.ts\n/**\n* A middleware that can be registered with Inngest to hook into various\n* lifecycles of the SDK and affect input and output of Inngest functionality.\n*\n* See {@link https://innge.st/middleware}\n*\n* @example\n*\n* ```ts\n* export const inngest = new Inngest({\n*   middleware: [\n*     new InngestMiddleware({\n*       name: \"My Middleware\",\n*       init: () => {\n*         // ...\n*       }\n*     })\n*   ]\n* });\n* ```\n*\n* @public\n*/\nvar InngestMiddleware = class InngestMiddleware {\n\tget [Symbol.toStringTag]() {\n\t\treturn InngestMiddleware.Tag;\n\t}\n\t/**\n\t* The name of this middleware. Used primarily for debugging and logging\n\t* purposes.\n\t*/\n\tname;\n\t/**\n\t* This function is used to initialize your middleware and register any hooks\n\t* you want to use. It will be called once when the SDK is initialized, and\n\t* should be used to store any state you want to use in other parts of your\n\t* middleware.\n\t*\n\t* It can be synchronous or asynchronous, in which case the client will wait\n\t* for it to resolve before continuing to initialize the next middleware.\n\t*\n\t* Multiple clients could be used in the same application with differing\n\t* middleware, so do not store state in global variables or assume that your\n\t* middleware will only be used once.\n\t*\n\t* Must return an object detailing the hooks you want to register.\n\t*/\n\tinit;\n\tconstructor({ name, init }) {\n\t\tthis.name = name;\n\t\tthis.init = init;\n\t}\n};\n(function(_InngestMiddleware) {\n\t_InngestMiddleware.Tag = \"Inngest.Middleware\";\n})(InngestMiddleware || (InngestMiddleware = {}));\n/**\n* Given some middleware and an entrypoint, runs the initializer for the given\n* `key` and returns functions that will pass arguments through a stack of each\n* given hook in a middleware's lifecycle.\n*\n* Lets the middleware initialize before starting.\n*/\nconst getHookStack = async (middleware, key, arg, transforms) => {\n\tconst hookDirs = hookDirections[key];\n\tif (!hookDirs) throw new Error(`No hook directions found for key \"${String(key)}\". This is likely a bug in the Inngest SDK.`);\n\tconst hooksRegistered = await (await middleware).reduce((acc, mw) => {\n\t\tconst fn = mw[key];\n\t\tif (fn) return [...acc, fn];\n\t\treturn acc;\n\t}, []).reduce(async (acc, fn) => {\n\t\treturn [...await acc, await fn(arg)];\n\t}, Promise.resolve([]));\n\tconst ret = {};\n\tfor (const hook of hooksRegistered) {\n\t\tconst hookKeys = Object.keys(hook);\n\t\tfor (const key$1 of hookKeys) {\n\t\t\tlet fns = [hook[key$1]];\n\t\t\tconst existingWaterfall = ret[key$1];\n\t\t\tif (existingWaterfall) if (hookDirs[key$1] === \"forward\") fns = [existingWaterfall, hook[key$1]];\n\t\t\telse fns = [hook[key$1], existingWaterfall];\n\t\t\tconst transform = transforms[key$1];\n\t\t\tret[key$1] = (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_0__.waterfall)(fns, transform);\n\t\t}\n\t}\n\tfor (const k of Object.keys(ret)) {\n\t\tconst key$1 = k;\n\t\tret[key$1] = (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_0__.cacheFn)(ret[key$1]);\n\t}\n\treturn ret;\n};\n/**\n* The direction of each hook that exists in the middleware lifecycle.\n* This is used to determine whether hooks found in a stack run forwards or\n* backwards, creating onion-like behaviour.\n*/\nconst hookDirections = {\n\tonFunctionRun: {\n\t\ttransformInput: \"forward\",\n\t\tbeforeMemoization: \"forward\",\n\t\tafterMemoization: \"backward\",\n\t\tbeforeExecution: \"forward\",\n\t\tafterExecution: \"backward\",\n\t\ttransformOutput: \"backward\",\n\t\tbeforeResponse: \"forward\",\n\t\tfinished: \"forward\"\n\t},\n\tonSendEvent: {\n\t\ttransformInput: \"forward\",\n\t\ttransformOutput: \"backward\"\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=InngestMiddleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RNaWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RDs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLFlBQVk7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdFQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4REFBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUMyQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvSW5uZ2VzdE1pZGRsZXdhcmUuanM/NmRjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWNoZUZuLCB3YXRlcmZhbGwgfSBmcm9tIFwiLi4vaGVscGVycy9mdW5jdGlvbnMuanNcIjtcblxuLy8jcmVnaW9uIHNyYy9jb21wb25lbnRzL0lubmdlc3RNaWRkbGV3YXJlLnRzXG4vKipcbiogQSBtaWRkbGV3YXJlIHRoYXQgY2FuIGJlIHJlZ2lzdGVyZWQgd2l0aCBJbm5nZXN0IHRvIGhvb2sgaW50byB2YXJpb3VzXG4qIGxpZmVjeWNsZXMgb2YgdGhlIFNESyBhbmQgYWZmZWN0IGlucHV0IGFuZCBvdXRwdXQgb2YgSW5uZ2VzdCBmdW5jdGlvbmFsaXR5LlxuKlxuKiBTZWUge0BsaW5rIGh0dHBzOi8vaW5uZ2Uuc3QvbWlkZGxld2FyZX1cbipcbiogQGV4YW1wbGVcbipcbiogYGBgdHNcbiogZXhwb3J0IGNvbnN0IGlubmdlc3QgPSBuZXcgSW5uZ2VzdCh7XG4qICAgbWlkZGxld2FyZTogW1xuKiAgICAgbmV3IElubmdlc3RNaWRkbGV3YXJlKHtcbiogICAgICAgbmFtZTogXCJNeSBNaWRkbGV3YXJlXCIsXG4qICAgICAgIGluaXQ6ICgpID0+IHtcbiogICAgICAgICAvLyAuLi5cbiogICAgICAgfVxuKiAgICAgfSlcbiogICBdXG4qIH0pO1xuKiBgYGBcbipcbiogQHB1YmxpY1xuKi9cbnZhciBJbm5nZXN0TWlkZGxld2FyZSA9IGNsYXNzIElubmdlc3RNaWRkbGV3YXJlIHtcblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuXHRcdHJldHVybiBJbm5nZXN0TWlkZGxld2FyZS5UYWc7XG5cdH1cblx0LyoqXG5cdCogVGhlIG5hbWUgb2YgdGhpcyBtaWRkbGV3YXJlLiBVc2VkIHByaW1hcmlseSBmb3IgZGVidWdnaW5nIGFuZCBsb2dnaW5nXG5cdCogcHVycG9zZXMuXG5cdCovXG5cdG5hbWU7XG5cdC8qKlxuXHQqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBpbml0aWFsaXplIHlvdXIgbWlkZGxld2FyZSBhbmQgcmVnaXN0ZXIgYW55IGhvb2tzXG5cdCogeW91IHdhbnQgdG8gdXNlLiBJdCB3aWxsIGJlIGNhbGxlZCBvbmNlIHdoZW4gdGhlIFNESyBpcyBpbml0aWFsaXplZCwgYW5kXG5cdCogc2hvdWxkIGJlIHVzZWQgdG8gc3RvcmUgYW55IHN0YXRlIHlvdSB3YW50IHRvIHVzZSBpbiBvdGhlciBwYXJ0cyBvZiB5b3VyXG5cdCogbWlkZGxld2FyZS5cblx0KlxuXHQqIEl0IGNhbiBiZSBzeW5jaHJvbm91cyBvciBhc3luY2hyb25vdXMsIGluIHdoaWNoIGNhc2UgdGhlIGNsaWVudCB3aWxsIHdhaXRcblx0KiBmb3IgaXQgdG8gcmVzb2x2ZSBiZWZvcmUgY29udGludWluZyB0byBpbml0aWFsaXplIHRoZSBuZXh0IG1pZGRsZXdhcmUuXG5cdCpcblx0KiBNdWx0aXBsZSBjbGllbnRzIGNvdWxkIGJlIHVzZWQgaW4gdGhlIHNhbWUgYXBwbGljYXRpb24gd2l0aCBkaWZmZXJpbmdcblx0KiBtaWRkbGV3YXJlLCBzbyBkbyBub3Qgc3RvcmUgc3RhdGUgaW4gZ2xvYmFsIHZhcmlhYmxlcyBvciBhc3N1bWUgdGhhdCB5b3VyXG5cdCogbWlkZGxld2FyZSB3aWxsIG9ubHkgYmUgdXNlZCBvbmNlLlxuXHQqXG5cdCogTXVzdCByZXR1cm4gYW4gb2JqZWN0IGRldGFpbGluZyB0aGUgaG9va3MgeW91IHdhbnQgdG8gcmVnaXN0ZXIuXG5cdCovXG5cdGluaXQ7XG5cdGNvbnN0cnVjdG9yKHsgbmFtZSwgaW5pdCB9KSB7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmluaXQgPSBpbml0O1xuXHR9XG59O1xuKGZ1bmN0aW9uKF9Jbm5nZXN0TWlkZGxld2FyZSkge1xuXHRfSW5uZ2VzdE1pZGRsZXdhcmUuVGFnID0gXCJJbm5nZXN0Lk1pZGRsZXdhcmVcIjtcbn0pKElubmdlc3RNaWRkbGV3YXJlIHx8IChJbm5nZXN0TWlkZGxld2FyZSA9IHt9KSk7XG4vKipcbiogR2l2ZW4gc29tZSBtaWRkbGV3YXJlIGFuZCBhbiBlbnRyeXBvaW50LCBydW5zIHRoZSBpbml0aWFsaXplciBmb3IgdGhlIGdpdmVuXG4qIGBrZXlgIGFuZCByZXR1cm5zIGZ1bmN0aW9ucyB0aGF0IHdpbGwgcGFzcyBhcmd1bWVudHMgdGhyb3VnaCBhIHN0YWNrIG9mIGVhY2hcbiogZ2l2ZW4gaG9vayBpbiBhIG1pZGRsZXdhcmUncyBsaWZlY3ljbGUuXG4qXG4qIExldHMgdGhlIG1pZGRsZXdhcmUgaW5pdGlhbGl6ZSBiZWZvcmUgc3RhcnRpbmcuXG4qL1xuY29uc3QgZ2V0SG9va1N0YWNrID0gYXN5bmMgKG1pZGRsZXdhcmUsIGtleSwgYXJnLCB0cmFuc2Zvcm1zKSA9PiB7XG5cdGNvbnN0IGhvb2tEaXJzID0gaG9va0RpcmVjdGlvbnNba2V5XTtcblx0aWYgKCFob29rRGlycykgdGhyb3cgbmV3IEVycm9yKGBObyBob29rIGRpcmVjdGlvbnMgZm91bmQgZm9yIGtleSBcIiR7U3RyaW5nKGtleSl9XCIuIFRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIHRoZSBJbm5nZXN0IFNESy5gKTtcblx0Y29uc3QgaG9va3NSZWdpc3RlcmVkID0gYXdhaXQgKGF3YWl0IG1pZGRsZXdhcmUpLnJlZHVjZSgoYWNjLCBtdykgPT4ge1xuXHRcdGNvbnN0IGZuID0gbXdba2V5XTtcblx0XHRpZiAoZm4pIHJldHVybiBbLi4uYWNjLCBmbl07XG5cdFx0cmV0dXJuIGFjYztcblx0fSwgW10pLnJlZHVjZShhc3luYyAoYWNjLCBmbikgPT4ge1xuXHRcdHJldHVybiBbLi4uYXdhaXQgYWNjLCBhd2FpdCBmbihhcmcpXTtcblx0fSwgUHJvbWlzZS5yZXNvbHZlKFtdKSk7XG5cdGNvbnN0IHJldCA9IHt9O1xuXHRmb3IgKGNvbnN0IGhvb2sgb2YgaG9va3NSZWdpc3RlcmVkKSB7XG5cdFx0Y29uc3QgaG9va0tleXMgPSBPYmplY3Qua2V5cyhob29rKTtcblx0XHRmb3IgKGNvbnN0IGtleSQxIG9mIGhvb2tLZXlzKSB7XG5cdFx0XHRsZXQgZm5zID0gW2hvb2tba2V5JDFdXTtcblx0XHRcdGNvbnN0IGV4aXN0aW5nV2F0ZXJmYWxsID0gcmV0W2tleSQxXTtcblx0XHRcdGlmIChleGlzdGluZ1dhdGVyZmFsbCkgaWYgKGhvb2tEaXJzW2tleSQxXSA9PT0gXCJmb3J3YXJkXCIpIGZucyA9IFtleGlzdGluZ1dhdGVyZmFsbCwgaG9va1trZXkkMV1dO1xuXHRcdFx0ZWxzZSBmbnMgPSBbaG9va1trZXkkMV0sIGV4aXN0aW5nV2F0ZXJmYWxsXTtcblx0XHRcdGNvbnN0IHRyYW5zZm9ybSA9IHRyYW5zZm9ybXNba2V5JDFdO1xuXHRcdFx0cmV0W2tleSQxXSA9IHdhdGVyZmFsbChmbnMsIHRyYW5zZm9ybSk7XG5cdFx0fVxuXHR9XG5cdGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhyZXQpKSB7XG5cdFx0Y29uc3Qga2V5JDEgPSBrO1xuXHRcdHJldFtrZXkkMV0gPSBjYWNoZUZuKHJldFtrZXkkMV0pO1xuXHR9XG5cdHJldHVybiByZXQ7XG59O1xuLyoqXG4qIFRoZSBkaXJlY3Rpb24gb2YgZWFjaCBob29rIHRoYXQgZXhpc3RzIGluIHRoZSBtaWRkbGV3YXJlIGxpZmVjeWNsZS5cbiogVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIGhvb2tzIGZvdW5kIGluIGEgc3RhY2sgcnVuIGZvcndhcmRzIG9yXG4qIGJhY2t3YXJkcywgY3JlYXRpbmcgb25pb24tbGlrZSBiZWhhdmlvdXIuXG4qL1xuY29uc3QgaG9va0RpcmVjdGlvbnMgPSB7XG5cdG9uRnVuY3Rpb25SdW46IHtcblx0XHR0cmFuc2Zvcm1JbnB1dDogXCJmb3J3YXJkXCIsXG5cdFx0YmVmb3JlTWVtb2l6YXRpb246IFwiZm9yd2FyZFwiLFxuXHRcdGFmdGVyTWVtb2l6YXRpb246IFwiYmFja3dhcmRcIixcblx0XHRiZWZvcmVFeGVjdXRpb246IFwiZm9yd2FyZFwiLFxuXHRcdGFmdGVyRXhlY3V0aW9uOiBcImJhY2t3YXJkXCIsXG5cdFx0dHJhbnNmb3JtT3V0cHV0OiBcImJhY2t3YXJkXCIsXG5cdFx0YmVmb3JlUmVzcG9uc2U6IFwiZm9yd2FyZFwiLFxuXHRcdGZpbmlzaGVkOiBcImZvcndhcmRcIlxuXHR9LFxuXHRvblNlbmRFdmVudDoge1xuXHRcdHRyYW5zZm9ybUlucHV0OiBcImZvcndhcmRcIixcblx0XHR0cmFuc2Zvcm1PdXRwdXQ6IFwiYmFja3dhcmRcIlxuXHR9XG59O1xuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IElubmdlc3RNaWRkbGV3YXJlLCBnZXRIb29rU3RhY2sgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmdlc3RNaWRkbGV3YXJlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestMiddleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestStepTools.js":
/*!*************************************************************!*\
  !*** ./node_modules/inngest/components/InngestStepTools.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STEP_INDEXING_SUFFIX: () => (/* binding */ STEP_INDEXING_SUFFIX),\n/* harmony export */   createStepTools: () => (/* binding */ createStepTools),\n/* harmony export */   gatewaySymbol: () => (/* binding */ gatewaySymbol),\n/* harmony export */   getStepOptions: () => (/* binding */ getStepOptions),\n/* harmony export */   invokePayloadSchema: () => (/* binding */ invokePayloadSchema)\n/* harmony export */ });\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _helpers_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _helpers_temporal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/temporal.js */ \"(rsc)/./node_modules/inngest/helpers/temporal.js\");\n/* harmony import */ var _InngestFunction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./InngestFunction.js */ \"(rsc)/./node_modules/inngest/components/InngestFunction.js\");\n/* harmony import */ var _InngestFunctionReference_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./InngestFunctionReference.js */ \"(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\");\n/* harmony import */ var _Fetch_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Fetch.js */ \"(rsc)/./node_modules/inngest/components/Fetch.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n/* harmony import */ var _inngest_ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @inngest/ai */ \"(rsc)/./node_modules/@inngest/ai/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n//#region src/components/InngestStepTools.ts\nconst getStepOptions = (options) => {\n\tif (typeof options === \"string\") return { id: options };\n\treturn options;\n};\n/**\n* Suffix used to namespace steps that are automatically indexed.\n*/\nconst STEP_INDEXING_SUFFIX = \":\";\n/**\n* Create a new set of step function tools ready to be used in a step function.\n* This function should be run and a fresh set of tools provided every time a\n* function is run.\n*\n* An op stack (function state) is passed in as well as some mutable properties\n* that the tools can use to submit a new op.\n*/\nconst createStepTools = (client, execution, stepHandler) => {\n\t/**\n\t* A local helper used to create tools that can be used to submit an op.\n\t*\n\t* When using this function, a generic type should be provided which is the\n\t* function signature exposed to the user.\n\t*/\n\tconst createTool = (matchOp, opts) => {\n\t\treturn (async (...args) => {\n\t\t\treturn stepHandler({\n\t\t\t\targs,\n\t\t\t\tmatchOp,\n\t\t\t\topts\n\t\t\t});\n\t\t});\n\t};\n\t/**\n\t* Create a new step run tool that can be used to run a step function using\n\t* `step.run()` as a shim.\n\t*/\n\tconst createStepRun = (type) => {\n\t\treturn createTool(({ id, name }, _fn, ...input) => {\n\t\t\tconst opts = {\n\t\t\t\t...input.length ? { input } : {},\n\t\t\t\t...type ? { type } : {}\n\t\t\t};\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.StepPlanned,\n\t\t\t\tname: id,\n\t\t\t\tdisplayName: name ?? id,\n\t\t\t\t...Object.keys(opts).length ? { opts } : {}\n\t\t\t};\n\t\t}, { fn: (_, fn, ...input) => fn(...input) });\n\t};\n\t/**\n\t* Define the set of tools the user has access to for their step functions.\n\t*\n\t* Each key is the function name and is expected to run `createTool` and pass\n\t* a generic type for that function as it will appear in the user's code.\n\t*/\n\tconst tools = {\n\t\tsendEvent: createTool(({ id, name }) => {\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.StepPlanned,\n\t\t\t\tname: \"sendEvent\",\n\t\t\t\tdisplayName: name ?? id,\n\t\t\t\topts: { type: \"step.sendEvent\" }\n\t\t\t};\n\t\t}, { fn: (_idOrOptions, payload) => {\n\t\t\treturn client[\"_send\"]({\n\t\t\t\tpayload,\n\t\t\t\theaders: execution[\"options\"][\"headers\"]\n\t\t\t});\n\t\t} }),\n\t\twaitForSignal: createTool(({ id, name }, opts) => {\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.WaitForSignal,\n\t\t\t\tname: opts.signal,\n\t\t\t\tdisplayName: name ?? id,\n\t\t\t\topts: {\n\t\t\t\t\tsignal: opts.signal,\n\t\t\t\t\ttimeout: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_3__.timeStr)(opts.timeout),\n\t\t\t\t\tconflict: opts.onConflict\n\t\t\t\t}\n\t\t\t};\n\t\t}),\n\t\tsendSignal: createTool(({ id, name }, opts) => {\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.StepPlanned,\n\t\t\t\tname: \"sendSignal\",\n\t\t\t\tdisplayName: name ?? id,\n\t\t\t\topts: {\n\t\t\t\t\ttype: \"step.sendSignal\",\n\t\t\t\t\tsignal: opts.signal\n\t\t\t\t}\n\t\t\t};\n\t\t}, { fn: (_idOrOptions, opts) => {\n\t\t\treturn client[\"_sendSignal\"]({\n\t\t\t\tsignal: opts.signal,\n\t\t\t\tdata: opts.data,\n\t\t\t\theaders: execution[\"options\"][\"headers\"]\n\t\t\t});\n\t\t} }),\n\t\twaitForEvent: createTool(({ id, name }, opts) => {\n\t\t\tconst matchOpts = { timeout: (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_3__.timeStr)(typeof opts === \"string\" ? opts : opts.timeout) };\n\t\t\tif (typeof opts !== \"string\") {\n\t\t\t\tif (opts?.match) matchOpts.if = `event.${opts.match} == async.${opts.match}`;\n\t\t\t\telse if (opts?.if) matchOpts.if = opts.if;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.WaitForEvent,\n\t\t\t\tname: opts.event,\n\t\t\t\topts: matchOpts,\n\t\t\t\tdisplayName: name ?? id\n\t\t\t};\n\t\t}),\n\t\trun: createStepRun(),\n\t\tai: {\n\t\t\tinfer: createTool(({ id, name }, options) => {\n\t\t\t\tconst { model, body,...rest } = options;\n\t\t\t\tconst modelCopy = { ...model };\n\t\t\t\toptions.model.onCall?.(modelCopy, options.body);\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.AiGateway,\n\t\t\t\t\tdisplayName: name ?? id,\n\t\t\t\t\topts: {\n\t\t\t\t\t\ttype: \"step.ai.infer\",\n\t\t\t\t\t\turl: modelCopy.url,\n\t\t\t\t\t\theaders: modelCopy.headers,\n\t\t\t\t\t\tauth_key: modelCopy.authKey,\n\t\t\t\t\t\tformat: modelCopy.format,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t\t...rest\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}),\n\t\t\twrap: createStepRun(\"step.ai.wrap\"),\n\t\t\tmodels: { ..._inngest_ai__WEBPACK_IMPORTED_MODULE_1__.models }\n\t\t},\n\t\tsleep: createTool(({ id, name }, time) => {\n\t\t\t/**\n\t\t\t* The presence of this operation in the returned stack indicates that the\n\t\t\t* sleep is over and we should continue execution.\n\t\t\t*/\n\t\t\tconst msTimeStr = (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_3__.timeStr)((0,_helpers_temporal_js__WEBPACK_IMPORTED_MODULE_4__.isTemporalDuration)(time) ? time.total({ unit: \"milliseconds\" }) : time);\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.Sleep,\n\t\t\t\tname: msTimeStr,\n\t\t\t\tdisplayName: name ?? id\n\t\t\t};\n\t\t}),\n\t\tsleepUntil: createTool(({ id, name }, time) => {\n\t\t\ttry {\n\t\t\t\tconst iso = (0,_helpers_temporal_js__WEBPACK_IMPORTED_MODULE_4__.getISOString)(time);\n\t\t\t\t/**\n\t\t\t\t* The presence of this operation in the returned stack indicates that the\n\t\t\t\t* sleep is over and we should continue execution.\n\t\t\t\t*/\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.Sleep,\n\t\t\t\t\tname: iso,\n\t\t\t\t\tdisplayName: name ?? id\n\t\t\t\t};\n\t\t\t} catch (err) {\n\t\t\t\t/**\n\t\t\t\t* If we're here, it's because the date is invalid. We'll throw a custom\n\t\t\t\t* error here to standardise this response.\n\t\t\t\t*/\n\t\t\t\tconsole.warn(\"Invalid `Date`, date string, `Temporal.Instant`, or `Temporal.ZonedDateTime` passed to sleepUntil;\", err);\n\t\t\t\tthrow new Error(`Invalid \\`Date\\`, date string, \\`Temporal.Instant\\`, or \\`Temporal.ZonedDateTime\\` passed to sleepUntil: ${time}`);\n\t\t\t}\n\t\t}),\n\t\tinvoke: createTool(({ id, name }, invokeOpts) => {\n\t\t\tconst optsSchema = invokePayloadSchema.extend({ timeout: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.union([\n\t\t\t\tzod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n\t\t\t\tzod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\t\t\tzod_v3__WEBPACK_IMPORTED_MODULE_0__.z.date()\n\t\t\t]).optional() });\n\t\t\tconst parsedFnOpts = optsSchema.extend({\n\t\t\t\t_type: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"fullId\").optional().default(\"fullId\"),\n\t\t\t\tfunction: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1)\n\t\t\t}).or(optsSchema.extend({\n\t\t\t\t_type: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"fnInstance\").optional().default(\"fnInstance\"),\n\t\t\t\tfunction: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"instanceof\"](_InngestFunction_js__WEBPACK_IMPORTED_MODULE_5__.InngestFunction)\n\t\t\t})).or(optsSchema.extend({\n\t\t\t\t_type: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"refInstance\").optional().default(\"refInstance\"),\n\t\t\t\tfunction: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"instanceof\"](_InngestFunctionReference_js__WEBPACK_IMPORTED_MODULE_6__.InngestFunctionReference)\n\t\t\t})).safeParse(invokeOpts);\n\t\t\tif (!parsedFnOpts.success) throw new Error(`Invalid invocation options passed to invoke; must include either a function or functionId.`);\n\t\t\tconst { _type, function: fn, data, user, v, timeout } = parsedFnOpts.data;\n\t\t\tconst opts = {\n\t\t\t\tpayload: {\n\t\t\t\t\tdata,\n\t\t\t\t\tuser,\n\t\t\t\t\tv\n\t\t\t\t},\n\t\t\t\tfunction_id: \"\",\n\t\t\t\ttimeout: typeof timeout === \"undefined\" ? void 0 : (0,_helpers_strings_js__WEBPACK_IMPORTED_MODULE_3__.timeStr)(timeout)\n\t\t\t};\n\t\t\tswitch (_type) {\n\t\t\t\tcase \"fnInstance\":\n\t\t\t\t\topts.function_id = fn.id(fn[\"client\"].id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"fullId\":\n\t\t\t\t\tconsole.warn(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_7__.logPrefix} Invoking function with \\`function: string\\` is deprecated and will be removed in v4.0.0; use an imported function or \\`referenceFunction()\\` instead. See https://innge.st/ts-referencing-functions`);\n\t\t\t\t\topts.function_id = fn;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"refInstance\":\n\t\t\t\t\topts.function_id = [fn.opts.appId || client.id, fn.opts.functionId].filter(Boolean).join(\"-\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.InvokeFunction,\n\t\t\t\tdisplayName: name ?? id,\n\t\t\t\topts\n\t\t\t};\n\t\t}),\n\t\tfetch: _Fetch_js__WEBPACK_IMPORTED_MODULE_8__.fetch\n\t};\n\ttools[gatewaySymbol] = createTool(({ id, name }, input, init) => {\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst headers = {};\n\t\tif (input instanceof Request) input.headers.forEach((value, key) => {\n\t\t\theaders[key] = value;\n\t\t});\n\t\telse if (init?.headers) new Headers(init.headers).forEach((value, key) => {\n\t\t\theaders[key] = value;\n\t\t});\n\t\treturn {\n\t\t\tid,\n\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_2__.StepOpCode.Gateway,\n\t\t\tdisplayName: name ?? id,\n\t\t\topts: {\n\t\t\t\turl,\n\t\t\t\tmethod: init?.method ?? \"GET\",\n\t\t\t\theaders,\n\t\t\t\tbody: init?.body\n\t\t\t}\n\t\t};\n\t});\n\treturn tools;\n};\nconst gatewaySymbol = Symbol.for(\"inngest.step.gateway\");\n/**\n* The event payload portion of the options for `step.invoke()`. This does not\n* include non-payload options like `timeout` or the function to invoke.\n*/\nconst invokePayloadSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\tdata: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n\tuser: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n\tv: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n\n//#endregion\n\n//# sourceMappingURL=InngestStepTools.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestStepTools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/NonRetriableError.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/components/NonRetriableError.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NonRetriableError: () => (/* binding */ NonRetriableError)\n/* harmony export */ });\n//#region src/components/NonRetriableError.ts\n/**\n* An error that, when thrown, indicates to Inngest that the function should\n* cease all execution and not retry.\n*\n* A `message` must be provided, and an optional `cause` can be provided to\n* provide more context to the error.\n*\n* @public\n*/\nvar NonRetriableError = class extends Error {\n\t/**\n\t* The underlying cause of the error, if any.\n\t*\n\t* This will be serialized and sent to Inngest.\n\t*/\n\tcause;\n\tconstructor(message, options) {\n\t\tsuper(message);\n\t\tthis.cause = options?.cause;\n\t\tthis.name = \"NonRetriableError\";\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=NonRetriableError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL05vblJldHJpYWJsZUVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQzZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9Ob25SZXRyaWFibGVFcnJvci5qcz8yYTM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvY29tcG9uZW50cy9Ob25SZXRyaWFibGVFcnJvci50c1xuLyoqXG4qIEFuIGVycm9yIHRoYXQsIHdoZW4gdGhyb3duLCBpbmRpY2F0ZXMgdG8gSW5uZ2VzdCB0aGF0IHRoZSBmdW5jdGlvbiBzaG91bGRcbiogY2Vhc2UgYWxsIGV4ZWN1dGlvbiBhbmQgbm90IHJldHJ5LlxuKlxuKiBBIGBtZXNzYWdlYCBtdXN0IGJlIHByb3ZpZGVkLCBhbmQgYW4gb3B0aW9uYWwgYGNhdXNlYCBjYW4gYmUgcHJvdmlkZWQgdG9cbiogcHJvdmlkZSBtb3JlIGNvbnRleHQgdG8gdGhlIGVycm9yLlxuKlxuKiBAcHVibGljXG4qL1xudmFyIE5vblJldHJpYWJsZUVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG5cdC8qKlxuXHQqIFRoZSB1bmRlcmx5aW5nIGNhdXNlIG9mIHRoZSBlcnJvciwgaWYgYW55LlxuXHQqXG5cdCogVGhpcyB3aWxsIGJlIHNlcmlhbGl6ZWQgYW5kIHNlbnQgdG8gSW5uZ2VzdC5cblx0Ki9cblx0Y2F1c2U7XG5cdGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcblx0XHRzdXBlcihtZXNzYWdlKTtcblx0XHR0aGlzLmNhdXNlID0gb3B0aW9ucz8uY2F1c2U7XG5cdFx0dGhpcy5uYW1lID0gXCJOb25SZXRyaWFibGVFcnJvclwiO1xuXHR9XG59O1xuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IE5vblJldHJpYWJsZUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob25SZXRyaWFibGVFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/NonRetriableError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/RetryAfterError.js":
/*!************************************************************!*\
  !*** ./node_modules/inngest/components/RetryAfterError.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetryAfterError: () => (/* binding */ RetryAfterError)\n/* harmony export */ });\n/* harmony import */ var ms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ms */ \"(rsc)/./node_modules/ms/index.js\");\n\n\n//#region src/components/RetryAfterError.ts\n/**\n* An error that, when thrown, indicates to Inngest that the function should be\n* retried after a given amount of time.\n*\n* A `message` must be provided, as well as a `retryAfter` parameter, which can\n* be a `number` of milliseconds, an `ms`-compatible time string, or a `Date`.\n*\n* An optional `cause` can be provided to provide more context to the error.\n*\n* @public\n*/\nvar RetryAfterError = class extends Error {\n\t/**\n\t* The underlying cause of the error, if any.\n\t*\n\t* This will be serialized and sent to Inngest.\n\t*/\n\tcause;\n\t/**\n\t* The time after which the function should be retried. Represents either a\n\t* number of milliseconds or a RFC3339 date.\n\t*/\n\tretryAfter;\n\tconstructor(message, retryAfter, options) {\n\t\tsuper(message);\n\t\tif (retryAfter instanceof Date) this.retryAfter = retryAfter.toISOString();\n\t\telse {\n\t\t\tconst seconds = `${Math.ceil((typeof retryAfter === \"string\" ? ms__WEBPACK_IMPORTED_MODULE_0__(retryAfter) : retryAfter) / 1e3)}`;\n\t\t\tif (!isFinite(Number(seconds))) throw new Error(\"retryAfter must be a number of milliseconds, a ms-compatible string, or a Date\");\n\t\t\tthis.retryAfter = seconds;\n\t\t}\n\t\tthis.cause = options?.cause;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=RetryAfterError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1JldHJ5QWZ0ZXJFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQjs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNENBQTRDLCtCQUFFLGtDQUFrQztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1JldHJ5QWZ0ZXJFcnJvci5qcz8zOWU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtcyBmcm9tIFwibXNcIjtcblxuLy8jcmVnaW9uIHNyYy9jb21wb25lbnRzL1JldHJ5QWZ0ZXJFcnJvci50c1xuLyoqXG4qIEFuIGVycm9yIHRoYXQsIHdoZW4gdGhyb3duLCBpbmRpY2F0ZXMgdG8gSW5uZ2VzdCB0aGF0IHRoZSBmdW5jdGlvbiBzaG91bGQgYmVcbiogcmV0cmllZCBhZnRlciBhIGdpdmVuIGFtb3VudCBvZiB0aW1lLlxuKlxuKiBBIGBtZXNzYWdlYCBtdXN0IGJlIHByb3ZpZGVkLCBhcyB3ZWxsIGFzIGEgYHJldHJ5QWZ0ZXJgIHBhcmFtZXRlciwgd2hpY2ggY2FuXG4qIGJlIGEgYG51bWJlcmAgb2YgbWlsbGlzZWNvbmRzLCBhbiBgbXNgLWNvbXBhdGlibGUgdGltZSBzdHJpbmcsIG9yIGEgYERhdGVgLlxuKlxuKiBBbiBvcHRpb25hbCBgY2F1c2VgIGNhbiBiZSBwcm92aWRlZCB0byBwcm92aWRlIG1vcmUgY29udGV4dCB0byB0aGUgZXJyb3IuXG4qXG4qIEBwdWJsaWNcbiovXG52YXIgUmV0cnlBZnRlckVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG5cdC8qKlxuXHQqIFRoZSB1bmRlcmx5aW5nIGNhdXNlIG9mIHRoZSBlcnJvciwgaWYgYW55LlxuXHQqXG5cdCogVGhpcyB3aWxsIGJlIHNlcmlhbGl6ZWQgYW5kIHNlbnQgdG8gSW5uZ2VzdC5cblx0Ki9cblx0Y2F1c2U7XG5cdC8qKlxuXHQqIFRoZSB0aW1lIGFmdGVyIHdoaWNoIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgcmV0cmllZC4gUmVwcmVzZW50cyBlaXRoZXIgYVxuXHQqIG51bWJlciBvZiBtaWxsaXNlY29uZHMgb3IgYSBSRkMzMzM5IGRhdGUuXG5cdCovXG5cdHJldHJ5QWZ0ZXI7XG5cdGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHJldHJ5QWZ0ZXIsIG9wdGlvbnMpIHtcblx0XHRzdXBlcihtZXNzYWdlKTtcblx0XHRpZiAocmV0cnlBZnRlciBpbnN0YW5jZW9mIERhdGUpIHRoaXMucmV0cnlBZnRlciA9IHJldHJ5QWZ0ZXIudG9JU09TdHJpbmcoKTtcblx0XHRlbHNlIHtcblx0XHRcdGNvbnN0IHNlY29uZHMgPSBgJHtNYXRoLmNlaWwoKHR5cGVvZiByZXRyeUFmdGVyID09PSBcInN0cmluZ1wiID8gbXMocmV0cnlBZnRlcikgOiByZXRyeUFmdGVyKSAvIDFlMyl9YDtcblx0XHRcdGlmICghaXNGaW5pdGUoTnVtYmVyKHNlY29uZHMpKSkgdGhyb3cgbmV3IEVycm9yKFwicmV0cnlBZnRlciBtdXN0IGJlIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYSBtcy1jb21wYXRpYmxlIHN0cmluZywgb3IgYSBEYXRlXCIpO1xuXHRcdFx0dGhpcy5yZXRyeUFmdGVyID0gc2Vjb25kcztcblx0XHR9XG5cdFx0dGhpcy5jYXVzZSA9IG9wdGlvbnM/LmNhdXNlO1xuXHR9XG59O1xuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IFJldHJ5QWZ0ZXJFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmV0cnlBZnRlckVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/RetryAfterError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/StepError.js":
/*!******************************************************!*\
  !*** ./node_modules/inngest/components/StepError.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StepError: () => (/* binding */ StepError)\n/* harmony export */ });\n/* harmony import */ var _helpers_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n\n\n\n//#region src/components/StepError.ts\n/**\n* An error that represents a step exhausting all retries and failing. This is\n* thrown by an Inngest step if it fails.\n*\n* It's synonymous with an `Error`, with the addition of the `stepId` that\n* failed.\n*\n* @public\n*/\nvar StepError = class extends Error {\n\tcause;\n\tconstructor(stepId, err) {\n\t\tconst parsedErr = _types_js__WEBPACK_IMPORTED_MODULE_0__.jsonErrorSchema.parse(err);\n\t\tsuper(parsedErr.message);\n\t\tthis.stepId = stepId;\n\t\tthis.name = parsedErr.name;\n\t\tthis.stepId = stepId;\n\t\tthis.stack = parsedErr.stack ?? void 0;\n\t\tthis.cause = parsedErr.cause ? (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_1__.deserializeError)(parsedErr.cause, true) : void 0;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=StepError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1N0ZXBFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDVjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0RBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvRUFBZ0I7QUFDakQ7QUFDQTs7QUFFQTtBQUNxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvU3RlcEVycm9yLmpzPzNkYzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzZXJpYWxpemVFcnJvciB9IGZyb20gXCIuLi9oZWxwZXJzL2Vycm9ycy5qc1wiO1xuaW1wb3J0IHsganNvbkVycm9yU2NoZW1hIH0gZnJvbSBcIi4uL3R5cGVzLmpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvY29tcG9uZW50cy9TdGVwRXJyb3IudHNcbi8qKlxuKiBBbiBlcnJvciB0aGF0IHJlcHJlc2VudHMgYSBzdGVwIGV4aGF1c3RpbmcgYWxsIHJldHJpZXMgYW5kIGZhaWxpbmcuIFRoaXMgaXNcbiogdGhyb3duIGJ5IGFuIElubmdlc3Qgc3RlcCBpZiBpdCBmYWlscy5cbipcbiogSXQncyBzeW5vbnltb3VzIHdpdGggYW4gYEVycm9yYCwgd2l0aCB0aGUgYWRkaXRpb24gb2YgdGhlIGBzdGVwSWRgIHRoYXRcbiogZmFpbGVkLlxuKlxuKiBAcHVibGljXG4qL1xudmFyIFN0ZXBFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuXHRjYXVzZTtcblx0Y29uc3RydWN0b3Ioc3RlcElkLCBlcnIpIHtcblx0XHRjb25zdCBwYXJzZWRFcnIgPSBqc29uRXJyb3JTY2hlbWEucGFyc2UoZXJyKTtcblx0XHRzdXBlcihwYXJzZWRFcnIubWVzc2FnZSk7XG5cdFx0dGhpcy5zdGVwSWQgPSBzdGVwSWQ7XG5cdFx0dGhpcy5uYW1lID0gcGFyc2VkRXJyLm5hbWU7XG5cdFx0dGhpcy5zdGVwSWQgPSBzdGVwSWQ7XG5cdFx0dGhpcy5zdGFjayA9IHBhcnNlZEVyci5zdGFjayA/PyB2b2lkIDA7XG5cdFx0dGhpcy5jYXVzZSA9IHBhcnNlZEVyci5jYXVzZSA/IGRlc2VyaWFsaXplRXJyb3IocGFyc2VkRXJyLmNhdXNlLCB0cnVlKSA6IHZvaWQgMDtcblx0fVxufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBTdGVwRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0ZXBFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/StepError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/InngestExecution.js":
/*!***********************************************************************!*\
  !*** ./node_modules/inngest/components/execution/InngestExecution.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InngestExecution: () => (/* binding */ InngestExecution),\n/* harmony export */   InngestExecution_exports: () => (/* binding */ InngestExecution_exports),\n/* harmony export */   PREFERRED_EXECUTION_VERSION: () => (/* binding */ PREFERRED_EXECUTION_VERSION)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\n\n\n\n\n//#region src/components/execution/InngestExecution.ts\nvar InngestExecution_exports = /* @__PURE__ */ (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_1__.__export)({\n\tExecutionVersion: () => _helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion,\n\tInngestExecution: () => InngestExecution,\n\tPREFERRED_EXECUTION_VERSION: () => PREFERRED_EXECUTION_VERSION\n});\n/**\n* The preferred execution version that will be used by the SDK when handling\n* brand new runs where the Executor is allowing us to choose.\n*\n* Changing this should not ever be a breaking change, as this will only change\n* new runs, not existing ones.\n*/\nconst PREFERRED_EXECUTION_VERSION = _helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V1;\nvar InngestExecution = class {\n\tdebug;\n\tconstructor(options) {\n\t\tthis.options = options;\n\t\tthis.debug = debug__WEBPACK_IMPORTED_MODULE_0__(`${_helpers_consts_js__WEBPACK_IMPORTED_MODULE_2__.debugPrefix}:${this.options.runId}`);\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=InngestExecution.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9Jbm5nZXN0RXhlY3V0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUE4RDtBQUNVO0FBQzlDOztBQUUxQjtBQUNBLCtDQUErQyxzRUFBUTtBQUN2RCx5QkFBeUIsZ0VBQWdCO0FBQ3pDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsZ0VBQWdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrQ0FBSyxJQUFJLDJEQUFXLENBQUMsR0FBRyxtQkFBbUI7QUFDMUQ7QUFDQTs7QUFFQTtBQUNtRjtBQUNuRiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvZXhlY3V0aW9uL0lubmdlc3RFeGVjdXRpb24uanM/NDkxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4cG9ydCB9IGZyb20gXCIuLi8uLi9fdmlydHVhbC9yb2xsZG93bl9ydW50aW1lLmpzXCI7XG5pbXBvcnQgeyBFeGVjdXRpb25WZXJzaW9uLCBkZWJ1Z1ByZWZpeCB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL2NvbnN0cy5qc1wiO1xuaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuXG4vLyNyZWdpb24gc3JjL2NvbXBvbmVudHMvZXhlY3V0aW9uL0lubmdlc3RFeGVjdXRpb24udHNcbnZhciBJbm5nZXN0RXhlY3V0aW9uX2V4cG9ydHMgPSAvKiBAX19QVVJFX18gKi8gX19leHBvcnQoe1xuXHRFeGVjdXRpb25WZXJzaW9uOiAoKSA9PiBFeGVjdXRpb25WZXJzaW9uLFxuXHRJbm5nZXN0RXhlY3V0aW9uOiAoKSA9PiBJbm5nZXN0RXhlY3V0aW9uLFxuXHRQUkVGRVJSRURfRVhFQ1VUSU9OX1ZFUlNJT046ICgpID0+IFBSRUZFUlJFRF9FWEVDVVRJT05fVkVSU0lPTlxufSk7XG4vKipcbiogVGhlIHByZWZlcnJlZCBleGVjdXRpb24gdmVyc2lvbiB0aGF0IHdpbGwgYmUgdXNlZCBieSB0aGUgU0RLIHdoZW4gaGFuZGxpbmdcbiogYnJhbmQgbmV3IHJ1bnMgd2hlcmUgdGhlIEV4ZWN1dG9yIGlzIGFsbG93aW5nIHVzIHRvIGNob29zZS5cbipcbiogQ2hhbmdpbmcgdGhpcyBzaG91bGQgbm90IGV2ZXIgYmUgYSBicmVha2luZyBjaGFuZ2UsIGFzIHRoaXMgd2lsbCBvbmx5IGNoYW5nZVxuKiBuZXcgcnVucywgbm90IGV4aXN0aW5nIG9uZXMuXG4qL1xuY29uc3QgUFJFRkVSUkVEX0VYRUNVVElPTl9WRVJTSU9OID0gRXhlY3V0aW9uVmVyc2lvbi5WMTtcbnZhciBJbm5nZXN0RXhlY3V0aW9uID0gY2xhc3Mge1xuXHRkZWJ1Zztcblx0Y29uc3RydWN0b3Iob3B0aW9ucykge1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5kZWJ1ZyA9IERlYnVnKGAke2RlYnVnUHJlZml4fToke3RoaXMub3B0aW9ucy5ydW5JZH1gKTtcblx0fVxufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBJbm5nZXN0RXhlY3V0aW9uLCBJbm5nZXN0RXhlY3V0aW9uX2V4cG9ydHMsIFBSRUZFUlJFRF9FWEVDVVRJT05fVkVSU0lPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5uZ2VzdEV4ZWN1dGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/als.js":
/*!**********************************************************!*\
  !*** ./node_modules/inngest/components/execution/als.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAsyncCtx: () => (/* binding */ getAsyncCtx),\n/* harmony export */   getAsyncLocalStorage: () => (/* binding */ getAsyncLocalStorage)\n/* harmony export */ });\n//#region src/components/execution/als.ts\n/**\n* A local-only symbol used as a key in global state to store the async local\n* storage instance.\n*/\nconst alsSymbol = Symbol.for(\"inngest:als\");\n/**\n* Retrieve the async context for the current execution.\n*/\nconst getAsyncCtx = async () => {\n\treturn getAsyncLocalStorage().then((als) => als.getStore());\n};\n/**\n* Get a singleton instance of `AsyncLocalStorage` used to store and retrieve\n* async context for the current execution.\n*/\nconst getAsyncLocalStorage = async () => {\n\tglobalThis[alsSymbol] ??= new Promise(async (resolve) => {\n\t\ttry {\n\t\t\tconst { AsyncLocalStorage } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:async_hooks */ \"node:async_hooks\", 19));\n\t\t\tresolve(new AsyncLocalStorage());\n\t\t} catch (_err) {\n\t\t\tconsole.warn(\"node:async_hooks is not supported in this runtime. Experimental async context is disabled.\");\n\t\t\tresolve({\n\t\t\t\tgetStore: () => void 0,\n\t\t\t\trun: (_, fn) => fn()\n\t\t\t});\n\t\t}\n\t});\n\treturn globalThis[alsSymbol];\n};\n\n//#endregion\n\n//# sourceMappingURL=als.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9hbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0JBQW9CLFFBQVEsc0lBQTBCO0FBQ2pFO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDNkM7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9hbHMuanM/NmU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyNyZWdpb24gc3JjL2NvbXBvbmVudHMvZXhlY3V0aW9uL2Fscy50c1xuLyoqXG4qIEEgbG9jYWwtb25seSBzeW1ib2wgdXNlZCBhcyBhIGtleSBpbiBnbG9iYWwgc3RhdGUgdG8gc3RvcmUgdGhlIGFzeW5jIGxvY2FsXG4qIHN0b3JhZ2UgaW5zdGFuY2UuXG4qL1xuY29uc3QgYWxzU3ltYm9sID0gU3ltYm9sLmZvcihcImlubmdlc3Q6YWxzXCIpO1xuLyoqXG4qIFJldHJpZXZlIHRoZSBhc3luYyBjb250ZXh0IGZvciB0aGUgY3VycmVudCBleGVjdXRpb24uXG4qL1xuY29uc3QgZ2V0QXN5bmNDdHggPSBhc3luYyAoKSA9PiB7XG5cdHJldHVybiBnZXRBc3luY0xvY2FsU3RvcmFnZSgpLnRoZW4oKGFscykgPT4gYWxzLmdldFN0b3JlKCkpO1xufTtcbi8qKlxuKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgYEFzeW5jTG9jYWxTdG9yYWdlYCB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZVxuKiBhc3luYyBjb250ZXh0IGZvciB0aGUgY3VycmVudCBleGVjdXRpb24uXG4qL1xuY29uc3QgZ2V0QXN5bmNMb2NhbFN0b3JhZ2UgPSBhc3luYyAoKSA9PiB7XG5cdGdsb2JhbFRoaXNbYWxzU3ltYm9sXSA/Pz0gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgeyBBc3luY0xvY2FsU3RvcmFnZSB9ID0gYXdhaXQgaW1wb3J0KFwibm9kZTphc3luY19ob29rc1wiKTtcblx0XHRcdHJlc29sdmUobmV3IEFzeW5jTG9jYWxTdG9yYWdlKCkpO1xuXHRcdH0gY2F0Y2ggKF9lcnIpIHtcblx0XHRcdGNvbnNvbGUud2FybihcIm5vZGU6YXN5bmNfaG9va3MgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIHJ1bnRpbWUuIEV4cGVyaW1lbnRhbCBhc3luYyBjb250ZXh0IGlzIGRpc2FibGVkLlwiKTtcblx0XHRcdHJlc29sdmUoe1xuXHRcdFx0XHRnZXRTdG9yZTogKCkgPT4gdm9pZCAwLFxuXHRcdFx0XHRydW46IChfLCBmbikgPT4gZm4oKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGdsb2JhbFRoaXNbYWxzU3ltYm9sXTtcbn07XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgZ2V0QXN5bmNDdHgsIGdldEFzeW5jTG9jYWxTdG9yYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/als.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/otel/access.js":
/*!******************************************************************!*\
  !*** ./node_modules/inngest/components/execution/otel/access.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clientProcessorMap: () => (/* binding */ clientProcessorMap)\n/* harmony export */ });\n//#region src/components/execution/otel/access.ts\n/**\n* A map of Inngest clients to their OTel span processors. This is used to\n* ensure that we only create one span processor per client, and that we can\n* access the span processor from the client without exposing the OTel\n* libraries to the user.\n*/\nconst clientProcessorMap = /* @__PURE__ */ new WeakMap();\n\n//#endregion\n\n//# sourceMappingURL=access.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL2FjY2Vzcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUM4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvZXhlY3V0aW9uL290ZWwvYWNjZXNzLmpzPzBjNzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8jcmVnaW9uIHNyYy9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL2FjY2Vzcy50c1xuLyoqXG4qIEEgbWFwIG9mIElubmdlc3QgY2xpZW50cyB0byB0aGVpciBPVGVsIHNwYW4gcHJvY2Vzc29ycy4gVGhpcyBpcyB1c2VkIHRvXG4qIGVuc3VyZSB0aGF0IHdlIG9ubHkgY3JlYXRlIG9uZSBzcGFuIHByb2Nlc3NvciBwZXIgY2xpZW50LCBhbmQgdGhhdCB3ZSBjYW5cbiogYWNjZXNzIHRoZSBzcGFuIHByb2Nlc3NvciBmcm9tIHRoZSBjbGllbnQgd2l0aG91dCBleHBvc2luZyB0aGUgT1RlbFxuKiBsaWJyYXJpZXMgdG8gdGhlIHVzZXIuXG4qL1xuY29uc3QgY2xpZW50UHJvY2Vzc29yTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgY2xpZW50UHJvY2Vzc29yTWFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2Nlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/otel/access.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v0.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v0.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createV0InngestExecution: () => (/* binding */ createV0InngestExecution),\n/* harmony export */   v0_exports: () => (/* binding */ v0_exports)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\n/* harmony import */ var _helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _InngestExecution_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\n/* harmony import */ var _helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\n/* harmony import */ var _helpers_promises_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n/* harmony import */ var _InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/* harmony import */ var _RetryAfterError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\n/* harmony import */ var _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var canonicalize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! canonicalize */ \"(rsc)/./node_modules/canonicalize/lib/canonicalize.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/components/execution/v0.ts\nvar v0_exports = /* @__PURE__ */ (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_3__.__export)({\n\tV0InngestExecution: () => V0InngestExecution,\n\t_internals: () => _internals,\n\tcreateV0InngestExecution: () => createV0InngestExecution\n});\nconst { sha1 } = hash_js__WEBPACK_IMPORTED_MODULE_1__;\nconst createV0InngestExecution = (options) => {\n\treturn new V0InngestExecution(options);\n};\nvar V0InngestExecution = class extends _InngestExecution_js__WEBPACK_IMPORTED_MODULE_4__.InngestExecution {\n\tstate;\n\texecution;\n\tuserFnToRun;\n\tfnArg;\n\tconstructor(options) {\n\t\tsuper(options);\n\t\tthis.userFnToRun = this.getUserFnToRun();\n\t\tthis.state = this.createExecutionState();\n\t\tthis.fnArg = this.createFnArg();\n\t}\n\tstart() {\n\t\tthis.debug(\"starting V0 execution\");\n\t\treturn this.execution ??= this._start().then((result) => {\n\t\t\tthis.debug(\"result:\", result);\n\t\t\treturn result;\n\t\t});\n\t}\n\tasync _start() {\n\t\tthis.state.hooks = await this.initializeMiddleware();\n\t\ttry {\n\t\t\tawait this.transformInput();\n\t\t\tawait this.state.hooks.beforeMemoization?.();\n\t\t\tif (this.state.opStack.length === 0 && !this.options.requestedRunStep) {\n\t\t\t\tawait this.state.hooks.afterMemoization?.();\n\t\t\t\tawait this.state.hooks.beforeExecution?.();\n\t\t\t}\n\t\t\tconst userFnPromise = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_5__.runAsPromise)(() => this.userFnToRun(this.fnArg));\n\t\t\tlet pos = -1;\n\t\t\tdo {\n\t\t\t\tif (pos >= 0) {\n\t\t\t\t\tif (!this.options.requestedRunStep && pos === this.state.opStack.length - 1) {\n\t\t\t\t\t\tawait this.state.hooks.afterMemoization?.();\n\t\t\t\t\t\tawait this.state.hooks.beforeExecution?.();\n\t\t\t\t\t}\n\t\t\t\t\tthis.state.tickOps = {};\n\t\t\t\t\tconst incomingOp = this.state.opStack[pos];\n\t\t\t\t\tthis.state.currentOp = this.state.allFoundOps[incomingOp.id];\n\t\t\t\t\tif (!this.state.currentOp)\n /**\n\t\t\t\t\t* We're trying to resume the function, but we can't find where to go.\n\t\t\t\t\t*\n\t\t\t\t\t* This means that either the function has changed or there are async\n\t\t\t\t\t* actions in-between steps that we haven't noticed in previous\n\t\t\t\t\t* executions.\n\t\t\t\t\t*\n\t\t\t\t\t* Whichever the case, this is bad and we can't continue in this\n\t\t\t\t\t* undefined state.\n\t\t\t\t\t*/\n\t\t\t\t\tthrow new _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__.NonRetriableError((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.prettyError)({\n\t\t\t\t\t\twhatHappened: \" Your function was stopped from running\",\n\t\t\t\t\t\twhy: \"We couldn't resume your function's state because it may have changed since the run started or there are async actions in-between steps that we haven't noticed in previous executions.\",\n\t\t\t\t\t\tconsequences: \"Continuing to run the function may result in unexpected behaviour, so we've stopped your function to ensure nothing unexpected happened!\",\n\t\t\t\t\t\ttoFixNow: \"Ensure that your function is either entirely step-based or entirely non-step-based, by either wrapping all asynchronous logic in `step.run()` calls or by removing all `step.*()` calls.\",\n\t\t\t\t\t\totherwise: \"For more information on why step functions work in this manner, see https://www.inngest.com/docs/functions/multi-step#gotchas\",\n\t\t\t\t\t\tstack: true,\n\t\t\t\t\t\tcode: _helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.ErrCode.NON_DETERMINISTIC_FUNCTION\n\t\t\t\t\t}));\n\t\t\t\t\tthis.state.currentOp.fulfilled = true;\n\t\t\t\t\tif (typeof incomingOp.data !== \"undefined\") this.state.currentOp.resolve(incomingOp.data);\n\t\t\t\t\telse this.state.currentOp.reject(incomingOp.error);\n\t\t\t\t}\n\t\t\t\tawait (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_5__.resolveAfterPending)();\n\t\t\t\tthis.state.reset();\n\t\t\t\tpos++;\n\t\t\t} while (pos < this.state.opStack.length);\n\t\t\tawait this.state.hooks.afterMemoization?.();\n\t\t\tconst discoveredOps = Object.values(this.state.tickOps).map(tickOpToOutgoing);\n\t\t\tconst runStep = this.options.requestedRunStep || this.getEarlyExecRunStep(discoveredOps);\n\t\t\tif (runStep) {\n\t\t\t\tconst userFnOp = this.state.allFoundOps[runStep];\n\t\t\t\tconst stepToRun = userFnOp?.fn;\n\t\t\t\tif (!stepToRun) throw new Error(`Bad stack; executor requesting to run unknown step \"${runStep}\"`);\n\t\t\t\tconst outgoingUserFnOp = {\n\t\t\t\t\t...tickOpToOutgoing(userFnOp),\n\t\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_8__.StepOpCode.Step\n\t\t\t\t};\n\t\t\t\tawait this.state.hooks.beforeExecution?.();\n\t\t\t\tthis.state.executingStep = true;\n\t\t\t\tconst { type: _type,...rest } = await (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_5__.runAsPromise)(stepToRun).finally(() => {\n\t\t\t\t\tthis.state.executingStep = false;\n\t\t\t\t}).catch(async (error) => {\n\t\t\t\t\treturn await this.transformOutput({ error }, outgoingUserFnOp);\n\t\t\t\t}).then(async (data) => {\n\t\t\t\t\tawait this.state.hooks?.afterExecution?.();\n\t\t\t\t\treturn await this.transformOutput({ data }, outgoingUserFnOp);\n\t\t\t\t});\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"step-ran\",\n\t\t\t\t\tctx: this.fnArg,\n\t\t\t\t\tops: this.ops,\n\t\t\t\t\tstep: {\n\t\t\t\t\t\t...outgoingUserFnOp,\n\t\t\t\t\t\t...rest\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (!discoveredOps.length) {\n\t\t\t\tconst fnRet = await Promise.race([userFnPromise.then((data) => ({\n\t\t\t\t\ttype: \"complete\",\n\t\t\t\t\tdata\n\t\t\t\t})), (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_5__.resolveNextTick)().then(() => ({ type: \"incomplete\" }))]);\n\t\t\t\tif (fnRet.type === \"complete\") {\n\t\t\t\t\tawait this.state.hooks.afterExecution?.();\n\t\t\t\t\tif (Object.values(this.state.allFoundOps).every((op) => {\n\t\t\t\t\t\treturn op.fulfilled;\n\t\t\t\t\t})) return await this.transformOutput({ data: fnRet.data });\n\t\t\t\t} else if (!this.state.hasUsedTools) {\n\t\t\t\t\tthis.state.nonStepFnDetected = true;\n\t\t\t\t\tconst data = await userFnPromise;\n\t\t\t\t\tawait this.state.hooks.afterExecution?.();\n\t\t\t\t\treturn await this.transformOutput({ data });\n\t\t\t\t} else if (!Object.values(this.state.allFoundOps).some((op) => {\n\t\t\t\t\treturn op.fulfilled === false;\n\t\t\t\t})) throw new _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__.NonRetriableError((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.functionStoppedRunningErr)(_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.ErrCode.ASYNC_DETECTED_AFTER_MEMOIZATION));\n\t\t\t}\n\t\t\tawait this.state.hooks.afterExecution?.();\n\t\t\treturn {\n\t\t\t\ttype: \"steps-found\",\n\t\t\t\tctx: this.fnArg,\n\t\t\t\tops: this.ops,\n\t\t\t\tsteps: discoveredOps\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn await this.transformOutput({ error });\n\t\t} finally {\n\t\t\tawait this.state.hooks.beforeResponse?.();\n\t\t}\n\t}\n\tasync initializeMiddleware() {\n\t\tconst ctx = this.options.data;\n\t\treturn await (0,_InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_9__.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n\t\t\tctx,\n\t\t\tfn: this.options.fn,\n\t\t\tsteps: Object.values(this.options.stepState),\n\t\t\treqArgs: this.options.reqArgs\n\t\t}, {\n\t\t\ttransformInput: (prev, output) => {\n\t\t\t\treturn {\n\t\t\t\t\tctx: {\n\t\t\t\t\t\t...prev.ctx,\n\t\t\t\t\t\t...output?.ctx\n\t\t\t\t\t},\n\t\t\t\t\tfn: this.options.fn,\n\t\t\t\t\tsteps: prev.steps.map((step, i) => ({\n\t\t\t\t\t\t...step,\n\t\t\t\t\t\t...output?.steps?.[i]\n\t\t\t\t\t})),\n\t\t\t\t\treqArgs: prev.reqArgs\n\t\t\t\t};\n\t\t\t},\n\t\t\ttransformOutput: (prev, output) => {\n\t\t\t\treturn {\n\t\t\t\t\tresult: {\n\t\t\t\t\t\t...prev.result,\n\t\t\t\t\t\t...output?.result\n\t\t\t\t\t},\n\t\t\t\t\tstep: prev.step\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\tcreateExecutionState() {\n\t\tconst state = {\n\t\t\tallFoundOps: {},\n\t\t\ttickOps: {},\n\t\t\ttickOpHashes: {},\n\t\t\tcurrentOp: void 0,\n\t\t\thasUsedTools: false,\n\t\t\treset: () => {\n\t\t\t\tstate.tickOpHashes = {};\n\t\t\t\tstate.allFoundOps = {\n\t\t\t\t\t...state.allFoundOps,\n\t\t\t\t\t...state.tickOps\n\t\t\t\t};\n\t\t\t},\n\t\t\tnonStepFnDetected: false,\n\t\t\texecutingStep: false,\n\t\t\topStack: this.options.stepCompletionOrder.reduce((acc, stepId) => {\n\t\t\t\tconst stepState = this.options.stepState[stepId];\n\t\t\t\tif (!stepState) return acc;\n\t\t\t\treturn [...acc, stepState];\n\t\t\t}, [])\n\t\t};\n\t\treturn state;\n\t}\n\tget ops() {\n\t\treturn Object.fromEntries(Object.entries(this.state.allFoundOps).map(([id, op]) => [id, {\n\t\t\tid: op.id,\n\t\t\trawArgs: op.rawArgs,\n\t\t\tdata: op.data,\n\t\t\terror: op.error,\n\t\t\tfulfilled: op.fulfilled,\n\t\t\tseen: true\n\t\t}]));\n\t}\n\tgetUserFnToRun() {\n\t\tif (!this.options.isFailureHandler) return this.options.fn[\"fn\"];\n\t\tif (!this.options.fn[\"onFailureFn\"])\n /**\n\t\t* Somehow, we've ended up detecting that this is a failure handler but\n\t\t* doesn't have an `onFailure` function. This should never happen.\n\t\t*/\n\t\tthrow new Error(\"Cannot find function `onFailure` handler\");\n\t\treturn this.options.fn[\"onFailureFn\"];\n\t}\n\tcreateFnArg() {\n\t\tthis.state.tickOps = this.state.allFoundOps;\n\t\t/**\n\t\t* Create a unique hash of an operation using only a subset of the operation's\n\t\t* properties; will never use `data` and will guarantee the order of the\n\t\t* object so we don't rely on individual tools for that.\n\t\t*\n\t\t* If the operation already contains an ID, the current ID will be used\n\t\t* instead, so that users can provide their own IDs.\n\t\t*/\n\t\tconst hashOp = (op) => {\n\t\t\t/**\n\t\t\t* It's difficult for v0 to understand whether or not an op has\n\t\t\t* historically contained a custom ID, as all step usage now require them.\n\t\t\t*\n\t\t\t* For this reason, we make the assumption that steps in v0 do not have a\n\t\t\t* custom ID and generate one for them as we would in all recommendations\n\t\t\t* and examples.\n\t\t\t*/\n\t\t\tconst obj = {\n\t\t\t\tparent: this.state.currentOp?.id ?? null,\n\t\t\t\top: op.op,\n\t\t\t\tname: op.name,\n\t\t\t\topts: op.op === _types_js__WEBPACK_IMPORTED_MODULE_8__.StepOpCode.StepPlanned ? null : op.opts ?? null\n\t\t\t};\n\t\t\tconst collisionHash = _internals.hashData(obj);\n\t\t\tconst pos = this.state.tickOpHashes[collisionHash] = (this.state.tickOpHashes[collisionHash] ?? -1) + 1;\n\t\t\treturn {\n\t\t\t\t...op,\n\t\t\t\tid: _internals.hashData({\n\t\t\t\t\tpos,\n\t\t\t\t\t...obj\n\t\t\t\t})\n\t\t\t};\n\t\t};\n\t\tconst stepHandler = ({ args, matchOp, opts }) => {\n\t\t\tif (this.state.nonStepFnDetected) throw new _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__.NonRetriableError((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.functionStoppedRunningErr)(_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.ErrCode.STEP_USED_AFTER_ASYNC));\n\t\t\tif (this.state.executingStep) throw new _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__.NonRetriableError((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.prettyError)({\n\t\t\t\twhatHappened: \"Your function was stopped from running\",\n\t\t\t\twhy: \"We detected that you have nested `step.*` tooling.\",\n\t\t\t\tconsequences: \"Nesting `step.*` tooling is not supported.\",\n\t\t\t\tstack: true,\n\t\t\t\ttoFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n\t\t\t\totherwise: \"For more information on step functions with Inngest, see https://www.inngest.com/docs/functions/multi-step\",\n\t\t\t\tcode: _helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.ErrCode.NESTING_STEPS\n\t\t\t}));\n\t\t\tthis.state.hasUsedTools = true;\n\t\t\tconst stepOptions = (0,_InngestStepTools_js__WEBPACK_IMPORTED_MODULE_10__.getStepOptions)(args[0]);\n\t\t\tconst opId = hashOp(matchOp(stepOptions, ...args.slice(1)));\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis.state.tickOps[opId.id] = {\n\t\t\t\t\t...opId,\n\t\t\t\t\t...opts?.fn ? { fn: () => opts.fn?.(...args) } : {},\n\t\t\t\t\trawArgs: args,\n\t\t\t\t\tresolve,\n\t\t\t\t\treject,\n\t\t\t\t\tfulfilled: false\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\t\tconst step = (0,_InngestStepTools_js__WEBPACK_IMPORTED_MODULE_10__.createStepTools)(this.options.client, this, stepHandler);\n\t\tlet fnArg = {\n\t\t\t...this.options.data,\n\t\t\tstep\n\t\t};\n\t\tif (this.options.isFailureHandler) {\n\t\t\tconst eventData = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ error: _types_js__WEBPACK_IMPORTED_MODULE_8__.jsonErrorSchema }).parse(fnArg.event?.data);\n\t\t\tfnArg = {\n\t\t\t\t...fnArg,\n\t\t\t\terror: (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.deserializeError)(eventData.error)\n\t\t\t};\n\t\t}\n\t\treturn this.options.transformCtx?.(fnArg) ?? fnArg;\n\t}\n\t/**\n\t* Using middleware, transform input before running.\n\t*/\n\tasync transformInput() {\n\t\tconst inputMutations = await this.state.hooks?.transformInput?.({\n\t\t\tctx: { ...this.fnArg },\n\t\t\tsteps: Object.values(this.options.stepState),\n\t\t\tfn: this.options.fn,\n\t\t\treqArgs: this.options.reqArgs\n\t\t});\n\t\tif (inputMutations?.ctx) this.fnArg = inputMutations.ctx;\n\t\tif (inputMutations?.steps) this.state.opStack = [...inputMutations.steps];\n\t}\n\tgetEarlyExecRunStep(ops) {\n\t\tif (ops.length !== 1) return;\n\t\tconst op = ops[0];\n\t\tif (op && op.op === _types_js__WEBPACK_IMPORTED_MODULE_8__.StepOpCode.StepPlanned) return op.id;\n\t}\n\t/**\n\t* Using middleware, transform output before returning.\n\t*/\n\tasync transformOutput(dataOrError, step) {\n\t\tconst output = { ...dataOrError };\n\t\tif (typeof output.error !== \"undefined\") output.data = (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(output.error);\n\t\tconst transformedOutput = await this.state.hooks?.transformOutput?.({\n\t\t\tresult: { ...output },\n\t\t\tstep\n\t\t});\n\t\tconst { data, error } = {\n\t\t\t...output,\n\t\t\t...transformedOutput?.result\n\t\t};\n\t\tif (!step) await this.state.hooks?.finished?.({ result: { ...typeof error !== \"undefined\" ? { error } : { data } } });\n\t\tif (typeof error !== \"undefined\") {\n\t\t\t/**\n\t\t\t* Ensure we give middleware the chance to decide on retriable behaviour\n\t\t\t* by looking at the error returned from output transformation.\n\t\t\t*/\n\t\t\tlet retriable = !(error instanceof _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__.NonRetriableError);\n\t\t\tif (retriable && error instanceof _RetryAfterError_js__WEBPACK_IMPORTED_MODULE_11__.RetryAfterError) retriable = error.retryAfter;\n\t\t\tconst serializedError = (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_7__.serializeError)(error);\n\t\t\treturn {\n\t\t\t\ttype: \"function-rejected\",\n\t\t\t\tctx: this.fnArg,\n\t\t\t\tops: this.ops,\n\t\t\t\terror: serializedError,\n\t\t\t\tretriable\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\ttype: \"function-resolved\",\n\t\t\tctx: this.fnArg,\n\t\t\tops: this.ops,\n\t\t\tdata: (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_12__.undefinedToNull)(data)\n\t\t};\n\t}\n};\nconst tickOpToOutgoing = (op) => {\n\treturn {\n\t\top: op.op,\n\t\tid: op.id,\n\t\tname: op.name,\n\t\topts: op.opts\n\t};\n};\nconst hashData = (op) => {\n\treturn sha1().update(canonicalize__WEBPACK_IMPORTED_MODULE_2__(op)).digest(\"hex\");\n};\n/**\n* Exported for testing.\n*/\nconst _internals = { hashData };\n\n//#endregion\n\n//# sourceMappingURL=v0.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v0.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v1.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v1.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createV1InngestExecution: () => (/* binding */ createV1InngestExecution),\n/* harmony export */   v1_exports: () => (/* binding */ v1_exports)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\n/* harmony import */ var _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\n/* harmony import */ var _helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _InngestExecution_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\n/* harmony import */ var _helpers_functions_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\n/* harmony import */ var _helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n/* harmony import */ var _als_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\n/* harmony import */ var _InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/* harmony import */ var _otel_access_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./otel/access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\n/* harmony import */ var _RetryAfterError_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\n/* harmony import */ var _StepError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\n/* harmony import */ var _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/components/execution/v1.ts\nvar v1_exports = /* @__PURE__ */ (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_2__.__export)({\n\t_internals: () => _internals,\n\tcreateV1InngestExecution: () => createV1InngestExecution\n});\nconst { sha1 } = hash_js__WEBPACK_IMPORTED_MODULE_1__;\nconst createV1InngestExecution = (options) => {\n\treturn new V1InngestExecution(options);\n};\nvar V1InngestExecution = class extends _InngestExecution_js__WEBPACK_IMPORTED_MODULE_3__.InngestExecution {\n\tstate;\n\tfnArg;\n\tcheckpointHandlers;\n\ttimeoutDuration = 1e3 * 10;\n\texecution;\n\tuserFnToRun;\n\t/**\n\t* If we're supposed to run a particular step via `requestedRunStep`, this\n\t* will be a `Promise` that resolves after no steps have been found for\n\t* `timeoutDuration` milliseconds.\n\t*\n\t* If we're not supposed to run a particular step, this will be `undefined`.\n\t*/\n\ttimeout;\n\tconstructor(options) {\n\t\tsuper(options);\n\t\tthis.userFnToRun = this.getUserFnToRun();\n\t\tthis.state = this.createExecutionState();\n\t\tthis.fnArg = this.createFnArg();\n\t\tthis.checkpointHandlers = this.createCheckpointHandlers();\n\t\tthis.initializeTimer(this.state);\n\t\tthis.debug(\"created new V1 execution for run;\", this.options.requestedRunStep ? `wanting to run step \"${this.options.requestedRunStep}\"` : \"discovering steps\");\n\t\tthis.debug(\"existing state keys:\", Object.keys(this.state.stepState));\n\t}\n\t/**\n\t* Idempotently start the execution of the user's function.\n\t*/\n\tstart() {\n\t\tif (!this.execution) {\n\t\t\tthis.debug(\"starting V1 execution\");\n\t\t\tconst tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.getTracer(\"inngest\", _version_js__WEBPACK_IMPORTED_MODULE_5__.version);\n\t\t\tthis.execution = (0,_als_js__WEBPACK_IMPORTED_MODULE_6__.getAsyncLocalStorage)().then((als) => {\n\t\t\t\treturn als.run({\n\t\t\t\t\tapp: this.options.client,\n\t\t\t\t\tctx: this.fnArg\n\t\t\t\t}, async () => {\n\t\t\t\t\treturn tracer.startActiveSpan(\"inngest.execution\", (span) => {\n\t\t\t\t\t\t_otel_access_js__WEBPACK_IMPORTED_MODULE_7__.clientProcessorMap.get(this.options.client)?.declareStartingSpan({\n\t\t\t\t\t\t\tspan,\n\t\t\t\t\t\t\trunId: this.options.runId,\n\t\t\t\t\t\t\ttraceparent: this.options.headers[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__.headerKeys.TraceParent],\n\t\t\t\t\t\t\ttracestate: this.options.headers[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__.headerKeys.TraceState]\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn this._start().then((result) => {\n\t\t\t\t\t\t\tthis.debug(\"result:\", result);\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}).finally(() => {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn this.execution;\n\t}\n\t/**\n\t* Starts execution of the user's function and the core loop.\n\t*/\n\tasync _start() {\n\t\ttry {\n\t\t\tconst allCheckpointHandler = this.getCheckpointHandler(\"\");\n\t\t\tthis.state.hooks = await this.initializeMiddleware();\n\t\t\tawait this.startExecution();\n\t\t\tfor await (const checkpoint of this.state.loop) {\n\t\t\t\tawait allCheckpointHandler(checkpoint);\n\t\t\t\tconst result = await this.getCheckpointHandler(checkpoint.type)(checkpoint);\n\t\t\t\tif (result) return result;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn await this.transformOutput({ error });\n\t\t} finally {\n\t\t\tthis.state.loop.return();\n\t\t\tawait this.state.hooks?.beforeResponse?.();\n\t\t}\n\t\t/**\n\t\t* If we're here, the generator somehow finished without returning a value.\n\t\t* This should never happen.\n\t\t*/\n\t\tthrow new Error(\"Core loop finished without returning a value\");\n\t}\n\t/**\n\t* Creates a handler for every checkpoint type, defining what to do when we\n\t* reach that checkpoint in the core loop.\n\t*/\n\tcreateCheckpointHandlers() {\n\t\treturn {\n\t\t\t\"\": (checkpoint) => {\n\t\t\t\tthis.debug(\"checkpoint:\", checkpoint);\n\t\t\t},\n\t\t\t\"function-resolved\": async (checkpoint) => {\n\t\t\t\treturn await this.transformOutput({ data: checkpoint.data });\n\t\t\t},\n\t\t\t\"function-rejected\": async (checkpoint) => {\n\t\t\t\treturn await this.transformOutput({ error: checkpoint.error });\n\t\t\t},\n\t\t\t\"steps-found\": async ({ steps }) => {\n\t\t\t\tconst stepResult = await this.tryExecuteStep(steps);\n\t\t\t\tif (stepResult) {\n\t\t\t\t\tconst transformResult = await this.transformOutput(stepResult);\n\t\t\t\t\t/**\n\t\t\t\t\t* Transforming output will always return either function rejection or\n\t\t\t\t\t* resolution. In most cases, this can be immediately returned, but in\n\t\t\t\t\t* this particular case we want to handle it differently.\n\t\t\t\t\t*/\n\t\t\t\t\tif (transformResult.type === \"function-resolved\") return {\n\t\t\t\t\t\ttype: \"step-ran\",\n\t\t\t\t\t\tctx: transformResult.ctx,\n\t\t\t\t\t\tops: transformResult.ops,\n\t\t\t\t\t\tstep: _internals.hashOp({\n\t\t\t\t\t\t\t...stepResult,\n\t\t\t\t\t\t\tdata: transformResult.data\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t\telse if (transformResult.type === \"function-rejected\") return {\n\t\t\t\t\t\ttype: \"step-ran\",\n\t\t\t\t\t\tctx: transformResult.ctx,\n\t\t\t\t\t\tops: transformResult.ops,\n\t\t\t\t\t\tstep: _internals.hashOp({\n\t\t\t\t\t\t\t...stepResult,\n\t\t\t\t\t\t\terror: transformResult.error\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tretriable: transformResult.retriable\n\t\t\t\t\t};\n\t\t\t\t\treturn transformResult;\n\t\t\t\t}\n\t\t\t\tconst newSteps = await this.filterNewSteps(Array.from(this.state.steps.values()));\n\t\t\t\tif (newSteps) return {\n\t\t\t\t\ttype: \"steps-found\",\n\t\t\t\t\tctx: this.fnArg,\n\t\t\t\t\tops: this.ops,\n\t\t\t\t\tsteps: newSteps\n\t\t\t\t};\n\t\t\t},\n\t\t\t\"step-not-found\": ({ step }) => {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"step-not-found\",\n\t\t\t\t\tctx: this.fnArg,\n\t\t\t\t\tops: this.ops,\n\t\t\t\t\tstep\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\tgetCheckpointHandler(type) {\n\t\treturn this.checkpointHandlers[type];\n\t}\n\tasync tryExecuteStep(steps) {\n\t\tconst hashedStepIdToRun = this.options.requestedRunStep || this.getEarlyExecRunStep(steps);\n\t\tif (!hashedStepIdToRun) return;\n\t\tconst step = steps.find((step$1) => step$1.hashedId === hashedStepIdToRun && step$1.fn);\n\t\tif (step) return await this.executeStep(step);\n\t\tthis.timeout?.reset();\n\t}\n\t/**\n\t* Given a list of outgoing ops, decide if we can execute an op early and\n\t* return the ID of the step to execute if we can.\n\t*/\n\tgetEarlyExecRunStep(steps) {\n\t\t/**\n\t\t* We may have been disabled due to parallelism, in which case we can't\n\t\t* immediately execute unless explicitly requested.\n\t\t*/\n\t\tif (this.options.disableImmediateExecution) return;\n\t\tconst unfulfilledSteps = steps.filter((step) => !step.fulfilled);\n\t\tif (unfulfilledSteps.length !== 1) return;\n\t\tconst op = unfulfilledSteps[0];\n\t\tif (op && op.op === _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepPlanned) return op.hashedId;\n\t}\n\tasync filterNewSteps(foundSteps) {\n\t\tif (this.options.requestedRunStep) return;\n\t\t/**\n\t\t* Gather any steps that aren't memoized and report them.\n\t\t*/\n\t\tconst newSteps = foundSteps.filter((step) => !step.fulfilled);\n\t\tif (!newSteps.length) return;\n\t\t/**\n\t\t* Warn if we've found new steps but haven't yet seen all previous\n\t\t* steps. This may indicate that step presence isn't determinate.\n\t\t*/\n\t\tlet knownSteps = 0;\n\t\tfor (const step of foundSteps) if (step.fulfilled) knownSteps++;\n\t\tif (!(this.state.stepsToFulfill === knownSteps)) console.warn((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.prettyError)({\n\t\t\ttype: \"warn\",\n\t\t\twhatHappened: \"Function may be indeterminate\",\n\t\t\twhy: \"We found new steps before seeing all previous steps, which may indicate that the function is non-deterministic.\",\n\t\t\tconsequences: \"This may cause unexpected behaviour as Inngest executes your function.\",\n\t\t\treassurance: \"This is expected if a function is updated in the middle of a run, but may indicate a bug if not.\"\n\t\t}));\n\t\t/**\n\t\t* We're finishing up; let's trigger the last of the hooks.\n\t\t*/\n\t\tawait this.state.hooks?.afterMemoization?.();\n\t\tawait this.state.hooks?.beforeExecution?.();\n\t\tawait this.state.hooks?.afterExecution?.();\n\t\tconst stepList = newSteps.map((step) => ({\n\t\t\tdisplayName: step.displayName,\n\t\t\top: step.op,\n\t\t\tid: step.hashedId,\n\t\t\tname: step.name,\n\t\t\topts: step.opts\n\t\t}));\n\t\t/**\n\t\t* We also run `onSendEvent` middleware hooks against `step.invoke()` steps\n\t\t* to ensure that their `data` is transformed correctly.\n\t\t*/\n\t\treturn await this.transformNewSteps(stepList);\n\t}\n\t/**\n\t* Using middleware, transform any newly-found steps before returning them to\n\t* an Inngest Server.\n\t*/\n\tasync transformNewSteps(steps) {\n\t\treturn Promise.all(steps.map(async (step) => {\n\t\t\tif (step.op !== _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.InvokeFunction) return step;\n\t\t\t/**\n\t\t\t* For each event being sent, create a new `onSendEvent` hook stack to\n\t\t\t* process it. We do this as middleware hooks are intended to run once\n\t\t\t* during each lifecycle (onFunctionRun or onSendEvent) and here, a hook\n\t\t\t* is run for every single event.\n\t\t\t*\n\t\t\t* This is done because a developer can use this hook to filter out\n\t\t\t* events entirely; if we batch all of the events together, we can't\n\t\t\t* tell which ones were filtered out if we're processing >1 invocation\n\t\t\t* here.\n\t\t\t*/\n\t\t\tconst transformedPayload = await (await (0,_InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_11__.getHookStack)(this.options.fn[\"middleware\"], \"onSendEvent\", void 0, {\n\t\t\t\ttransformInput: (prev, output) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...prev,\n\t\t\t\t\t\t...output\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\ttransformOutput: (prev, output) => {\n\t\t\t\t\treturn { result: {\n\t\t\t\t\t\t...prev.result,\n\t\t\t\t\t\t...output?.result\n\t\t\t\t\t} };\n\t\t\t\t}\n\t\t\t})).transformInput?.({ payloads: [{\n\t\t\t\t...step.opts?.payload ?? {},\n\t\t\t\tname: _helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__.internalEvents.FunctionInvoked\n\t\t\t}] });\n\t\t\tconst newPayload = _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.invokePayloadSchema.parse(transformedPayload?.payloads?.[0] ?? {});\n\t\t\treturn {\n\t\t\t\t...step,\n\t\t\t\topts: {\n\t\t\t\t\t...step.opts,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\t...step.opts?.payload ?? {},\n\t\t\t\t\t\t...newPayload\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}));\n\t}\n\tasync executeStep({ id, name, opts, fn, displayName }) {\n\t\tthis.timeout?.clear();\n\t\tawait this.state.hooks?.afterMemoization?.();\n\t\tawait this.state.hooks?.beforeExecution?.();\n\t\tconst outgoingOp = {\n\t\t\tid,\n\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepRun,\n\t\t\tname,\n\t\t\topts,\n\t\t\tdisplayName\n\t\t};\n\t\tthis.state.executingStep = outgoingOp;\n\t\tconst store = await (0,_als_js__WEBPACK_IMPORTED_MODULE_6__.getAsyncCtx)();\n\t\tif (store) store.executingStep = {\n\t\t\tid,\n\t\t\tname: displayName\n\t\t};\n\t\tthis.debug(`executing step \"${id}\"`);\n\t\treturn (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.runAsPromise)(fn).finally(async () => {\n\t\t\tif (store) delete store.executingStep;\n\t\t\tawait this.state.hooks?.afterExecution?.();\n\t\t}).then((data) => {\n\t\t\treturn {\n\t\t\t\t...outgoingOp,\n\t\t\t\tdata\n\t\t\t};\n\t\t}).catch((error) => {\n\t\t\treturn {\n\t\t\t\t...outgoingOp,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepError,\n\t\t\t\terror\n\t\t\t};\n\t\t});\n\t}\n\t/**\n\t* Starts execution of the user's function, including triggering checkpoints\n\t* and middleware hooks where appropriate.\n\t*/\n\tasync startExecution() {\n\t\t/**\n\t\t* Mutate input as neccessary based on middleware.\n\t\t*/\n\t\tawait this.transformInput();\n\t\t/**\n\t\t* Start the timer to time out the run if needed.\n\t\t*/\n\t\tthis.timeout?.start();\n\t\tawait this.state.hooks?.beforeMemoization?.();\n\t\t/**\n\t\t* If we had no state to begin with, immediately end the memoization phase.\n\t\t*/\n\t\tif (this.state.allStateUsed()) {\n\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t}\n\t\t/**\n\t\t* Trigger the user's function.\n\t\t*/\n\t\t(0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.runAsPromise)(() => this.userFnToRun(this.fnArg)).finally(async () => {\n\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t\tawait this.state.hooks?.afterExecution?.();\n\t\t}).then((data) => {\n\t\t\tthis.state.setCheckpoint({\n\t\t\t\ttype: \"function-resolved\",\n\t\t\t\tdata\n\t\t\t});\n\t\t}).catch((error) => {\n\t\t\tthis.state.setCheckpoint({\n\t\t\t\ttype: \"function-rejected\",\n\t\t\t\terror\n\t\t\t});\n\t\t});\n\t}\n\t/**\n\t* Using middleware, transform input before running.\n\t*/\n\tasync transformInput() {\n\t\tconst inputMutations = await this.state.hooks?.transformInput?.({\n\t\t\tctx: { ...this.fnArg },\n\t\t\tsteps: Object.values(this.state.stepState),\n\t\t\tfn: this.options.fn,\n\t\t\treqArgs: this.options.reqArgs\n\t\t});\n\t\tif (inputMutations?.ctx) this.fnArg = inputMutations.ctx;\n\t\tif (inputMutations?.steps) this.state.stepState = Object.fromEntries(inputMutations.steps.map((step) => [step.id, step]));\n\t}\n\t/**\n\t* Using middleware, transform output before returning.\n\t*/\n\tasync transformOutput(dataOrError) {\n\t\tconst output = { ...dataOrError };\n\t\t/**\n\t\t* If we've been given an error and it's one that we just threw from a step,\n\t\t* we should return a `NonRetriableError` to stop execution.\n\t\t*/\n\t\tif (typeof output.error !== \"undefined\") output.data = (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.serializeError)(output.error);\n\t\tconst isStepExecution = Boolean(this.state.executingStep);\n\t\tconst transformedOutput = await this.state.hooks?.transformOutput?.({\n\t\t\tresult: { ...output },\n\t\t\tstep: this.state.executingStep\n\t\t});\n\t\tconst { data, error } = {\n\t\t\t...output,\n\t\t\t...transformedOutput?.result\n\t\t};\n\t\tif (!isStepExecution) await this.state.hooks?.finished?.({ result: { ...typeof error !== \"undefined\" ? { error } : { data } } });\n\t\tif (typeof error !== \"undefined\") {\n\t\t\t/**\n\t\t\t* Ensure we give middleware the chance to decide on retriable behaviour\n\t\t\t* by looking at the error returned from output transformation.\n\t\t\t*/\n\t\t\tlet retriable = !(error instanceof _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_14__.NonRetriableError || error instanceof _StepError_js__WEBPACK_IMPORTED_MODULE_15__.StepError);\n\t\t\tif (retriable && error instanceof _RetryAfterError_js__WEBPACK_IMPORTED_MODULE_16__.RetryAfterError) retriable = error.retryAfter;\n\t\t\tconst serializedError = (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.minifyPrettyError)((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.serializeError)(error));\n\t\t\treturn {\n\t\t\t\ttype: \"function-rejected\",\n\t\t\t\tctx: this.fnArg,\n\t\t\t\tops: this.ops,\n\t\t\t\terror: serializedError,\n\t\t\t\tretriable\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\ttype: \"function-resolved\",\n\t\t\tctx: this.fnArg,\n\t\t\tops: this.ops,\n\t\t\tdata: (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_17__.undefinedToNull)(data)\n\t\t};\n\t}\n\tcreateExecutionState() {\n\t\tconst d = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.createDeferredPromiseWithStack)();\n\t\tlet checkpointResolve = d.deferred.resolve;\n\t\tconst checkpointResults = d.results;\n\t\tconst loop = (async function* (cleanUp) {\n\t\t\ttry {\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst res = (await checkpointResults.next()).value;\n\t\t\t\t\tif (res) yield res;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tcleanUp?.();\n\t\t\t}\n\t\t})(() => {\n\t\t\tthis.timeout?.clear();\n\t\t\tcheckpointResults.return();\n\t\t});\n\t\tconst stepsToFulfill = Object.keys(this.options.stepState).length;\n\t\treturn {\n\t\t\tstepState: this.options.stepState,\n\t\t\tstepsToFulfill,\n\t\t\tsteps: /* @__PURE__ */ new Map(),\n\t\t\tloop,\n\t\t\thasSteps: Boolean(stepsToFulfill),\n\t\t\tstepCompletionOrder: [...this.options.stepCompletionOrder],\n\t\t\tremainingStepsToBeSeen: new Set(this.options.stepCompletionOrder),\n\t\t\tsetCheckpoint: (checkpoint) => {\n\t\t\t\t({resolve: checkpointResolve} = checkpointResolve(checkpoint));\n\t\t\t},\n\t\t\tallStateUsed: () => {\n\t\t\t\treturn this.state.remainingStepsToBeSeen.size === 0;\n\t\t\t}\n\t\t};\n\t}\n\tget ops() {\n\t\treturn Object.fromEntries(this.state.steps);\n\t}\n\tcreateFnArg() {\n\t\tconst step = this.createStepTools();\n\t\tlet fnArg = {\n\t\t\t...this.options.data,\n\t\t\tstep\n\t\t};\n\t\t/**\n\t\t* Handle use of the `onFailure` option by deserializing the error.\n\t\t*/\n\t\tif (this.options.isFailureHandler) {\n\t\t\tconst eventData = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ error: _types_js__WEBPACK_IMPORTED_MODULE_9__.jsonErrorSchema }).parse(fnArg.event?.data);\n\t\t\tfnArg = {\n\t\t\t\t...fnArg,\n\t\t\t\terror: (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.deserializeError)(eventData.error)\n\t\t\t};\n\t\t}\n\t\treturn this.options.transformCtx?.(fnArg) ?? fnArg;\n\t}\n\tcreateStepTools() {\n\t\t/**\n\t\t* A list of steps that have been found and are being rolled up before being\n\t\t* reported to the core loop.\n\t\t*/\n\t\tconst foundStepsToReport = /* @__PURE__ */ new Map();\n\t\t/**\n\t\t* A map of the subset of found steps to report that have not yet been\n\t\t* handled. Used for fast access to steps that need to be handled in order.\n\t\t*/\n\t\tconst unhandledFoundStepsToReport = /* @__PURE__ */ new Map();\n\t\t/**\n\t\t* A map of the latest sequential step indexes found for each step ID. Used\n\t\t* to ensure that we don't index steps in parallel.\n\t\t*\n\t\t* Note that these must be sequential; if we've seen or assigned `a:1`,\n\t\t* `a:2` and `a:4`, the latest sequential step index is `2`.\n\t\t*\n\t\t*/\n\t\tconst expectedNextStepIndexes = /* @__PURE__ */ new Map();\n\t\t/**\n\t\t* An ordered list of step IDs that have yet to be handled in this\n\t\t* execution. Used to ensure that we handle steps in the order they were\n\t\t* found and based on the `stepCompletionOrder` in this execution's state.\n\t\t*/\n\t\tconst remainingStepCompletionOrder = this.state.stepCompletionOrder.slice();\n\t\t/**\n\t\t* A promise that's used to ensure that step reporting cannot be run more than\n\t\t* once in a given asynchronous time span.\n\t\t*/\n\t\tlet foundStepsReportPromise;\n\t\t/**\n\t\t* A promise that's used to represent middleware hooks running before\n\t\t* execution.\n\t\t*/\n\t\tlet beforeExecHooksPromise;\n\t\t/**\n\t\t* A flag used to ensure that we only warn about parallel indexing once per\n\t\t* execution to avoid spamming the console.\n\t\t*/\n\t\tlet warnOfParallelIndexing = false;\n\t\t/**\n\t\t* Counts the number of times we've extended this tick.\n\t\t*/\n\t\tlet tickExtensionCount = 0;\n\t\t/**\n\t\t* Given a colliding step ID, maybe warn the user about parallel indexing.\n\t\t*/\n\t\tconst maybeWarnOfParallelIndexing = (collisionId) => {\n\t\t\tif (warnOfParallelIndexing) return;\n\t\t\tif (this.state.steps.has(collisionId)) {\n\t\t\t\tif (!foundStepsToReport.has(collisionId)) {\n\t\t\t\t\twarnOfParallelIndexing = true;\n\t\t\t\t\tconsole.warn((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.prettyError)({\n\t\t\t\t\t\ttype: \"warn\",\n\t\t\t\t\t\twhatHappened: \"We detected that you have multiple steps with the same ID.\",\n\t\t\t\t\t\tcode: _helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.ErrCode.AUTOMATIC_PARALLEL_INDEXING,\n\t\t\t\t\t\twhy: `This can happen if you're using the same ID for multiple steps across different chains of parallel work. We found the issue with step \"${collisionId}\".`,\n\t\t\t\t\t\treassurance: \"Your function is still running, though it may exhibit unexpected behaviour.\",\n\t\t\t\t\t\tconsequences: \"Using the same IDs across parallel chains of work can cause unexpected behaviour.\",\n\t\t\t\t\t\ttoFixNow: \"We recommend using a unique ID for each step, especially those happening in parallel.\"\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t* A helper used to report steps to the core loop. Used after adding an item\n\t\t* to `foundStepsToReport`.\n\t\t*/\n\t\tconst reportNextTick = () => {\n\t\t\tif (foundStepsReportPromise) return;\n\t\t\tlet extensionPromise;\n\t\t\tif (++tickExtensionCount >= 10) {\n\t\t\t\ttickExtensionCount = 0;\n\t\t\t\textensionPromise = new Promise((resolve) => setTimeout(resolve));\n\t\t\t} else extensionPromise = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.resolveAfterPending)();\n\t\t\tfoundStepsReportPromise = extensionPromise.then(() => beforeExecHooksPromise).then(() => {\n\t\t\t\tfoundStepsReportPromise = void 0;\n\t\t\t\tfor (let i = 0; i < remainingStepCompletionOrder.length; i++) {\n\t\t\t\t\tconst nextStepId = remainingStepCompletionOrder[i];\n\t\t\t\t\tif (!nextStepId) continue;\n\t\t\t\t\tif (unhandledFoundStepsToReport.get(nextStepId)?.handle()) {\n\t\t\t\t\t\tremainingStepCompletionOrder.splice(i, 1);\n\t\t\t\t\t\tunhandledFoundStepsToReport.delete(nextStepId);\n\t\t\t\t\t\treportNextTick();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst steps = [...foundStepsToReport.values()];\n\t\t\t\tfoundStepsToReport.clear();\n\t\t\t\tunhandledFoundStepsToReport.clear();\n\t\t\t\tthis.state.setCheckpoint({\n\t\t\t\t\ttype: \"steps-found\",\n\t\t\t\t\tsteps\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\t/**\n\t\t* A helper used to push a step to the list of steps to report.\n\t\t*/\n\t\tconst pushStepToReport = (step) => {\n\t\t\tfoundStepsToReport.set(step.id, step);\n\t\t\tunhandledFoundStepsToReport.set(step.hashedId, step);\n\t\t\treportNextTick();\n\t\t};\n\t\tconst stepHandler = async ({ args, matchOp, opts }) => {\n\t\t\tawait beforeExecHooksPromise;\n\t\t\tconst stepOptions = (0,_InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.getStepOptions)(args[0]);\n\t\t\tconst opId = matchOp(stepOptions, ...args.slice(1));\n\t\t\tif (this.state.executingStep)\n /**\n\t\t\t* If a step is found after asynchronous actions during another step's\n\t\t\t* execution, everything is fine. The problem here is if we've found\n\t\t\t* that a step nested inside another a step, which is something we don't\n\t\t\t* support at the time of writing.\n\t\t\t*\n\t\t\t* In this case, we could use something like Async Hooks to understand\n\t\t\t* how the step is being triggered, though this isn't available in all\n\t\t\t* environments.\n\t\t\t*\n\t\t\t* Therefore, we'll only show a warning here to indicate that this is\n\t\t\t* potentially an issue.\n\t\t\t*/\n\t\t\tconsole.warn((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.prettyError)({\n\t\t\t\twhatHappened: `We detected that you have nested \\`step.*\\` tooling in \\`${opId.displayName ?? opId.id}\\``,\n\t\t\t\tconsequences: \"Nesting `step.*` tooling is not supported.\",\n\t\t\t\ttype: \"warn\",\n\t\t\t\treassurance: \"It's possible to see this warning if steps are separated by regular asynchronous calls, which is fine.\",\n\t\t\t\tstack: true,\n\t\t\t\ttoFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n\t\t\t\tcode: _helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.ErrCode.NESTING_STEPS\n\t\t\t}));\n\t\t\tif (this.state.steps.has(opId.id)) {\n\t\t\t\tconst originalId = opId.id;\n\t\t\t\tmaybeWarnOfParallelIndexing(originalId);\n\t\t\t\tconst expectedNextIndex = expectedNextStepIndexes.get(originalId) ?? 1;\n\t\t\t\tfor (let i = expectedNextIndex;; i++) {\n\t\t\t\t\tconst newId = originalId + _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.STEP_INDEXING_SUFFIX + i;\n\t\t\t\t\tif (!this.state.steps.has(newId)) {\n\t\t\t\t\t\texpectedNextStepIndexes.set(originalId, i + 1);\n\t\t\t\t\t\topId.id = newId;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst { promise, resolve, reject } = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.createDeferredPromise)();\n\t\t\tconst hashedId = _internals.hashId(opId.id);\n\t\t\tconst stepState = this.state.stepState[hashedId];\n\t\t\tlet isFulfilled = false;\n\t\t\tif (stepState) {\n\t\t\t\tstepState.seen = true;\n\t\t\t\tthis.state.remainingStepsToBeSeen.delete(hashedId);\n\t\t\t\tif (typeof stepState.input === \"undefined\") isFulfilled = true;\n\t\t\t}\n\t\t\tlet extraOpts;\n\t\t\tlet fnArgs = [...args];\n\t\t\tif (typeof stepState?.input !== \"undefined\" && Array.isArray(stepState.input)) switch (opId.op) {\n\t\t\t\tcase _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepPlanned:\n\t\t\t\t\tfnArgs = [...args.slice(0, 2), ...stepState.input];\n\t\t\t\t\textraOpts = { input: [...stepState.input] };\n\t\t\t\t\tbreak;\n\t\t\t\tcase _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.AiGateway:\n\t\t\t\t\textraOpts = { body: {\n\t\t\t\t\t\t...typeof opId.opts?.body === \"object\" ? { ...opId.opts.body } : {},\n\t\t\t\t\t\t...stepState.input[0]\n\t\t\t\t\t} };\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst step = {\n\t\t\t\t...opId,\n\t\t\t\topts: {\n\t\t\t\t\t...opId.opts,\n\t\t\t\t\t...extraOpts\n\t\t\t\t},\n\t\t\t\trawArgs: fnArgs,\n\t\t\t\thashedId,\n\t\t\t\tinput: stepState?.input,\n\t\t\t\tfn: opts?.fn ? () => opts.fn?.(...fnArgs) : void 0,\n\t\t\t\tpromise,\n\t\t\t\tfulfilled: isFulfilled,\n\t\t\t\thasStepState: Boolean(stepState),\n\t\t\t\tdisplayName: opId.displayName ?? opId.id,\n\t\t\t\thandled: false,\n\t\t\t\thandle: () => {\n\t\t\t\t\tif (step.handled) return false;\n\t\t\t\t\tstep.handled = true;\n\t\t\t\t\tif (isFulfilled && stepState) {\n\t\t\t\t\t\tstepState.fulfilled = true;\n\t\t\t\t\t\tPromise.all([\n\t\t\t\t\t\t\tstepState.data,\n\t\t\t\t\t\t\tstepState.error,\n\t\t\t\t\t\t\tstepState.input\n\t\t\t\t\t\t]).then(() => {\n\t\t\t\t\t\t\tif (typeof stepState.data !== \"undefined\") resolve(stepState.data);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.state.recentlyRejectedStepError = new _StepError_js__WEBPACK_IMPORTED_MODULE_15__.StepError(opId.id, stepState.error);\n\t\t\t\t\t\t\t\treject(this.state.recentlyRejectedStepError);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.state.steps.set(opId.id, step);\n\t\t\tthis.state.hasSteps = true;\n\t\t\tpushStepToReport(step);\n\t\t\t/**\n\t\t\t* If this is the last piece of state we had, we've now finished\n\t\t\t* memoizing.\n\t\t\t*/\n\t\t\tif (!beforeExecHooksPromise && this.state.allStateUsed()) await (beforeExecHooksPromise = (async () => {\n\t\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t\t})());\n\t\t\treturn promise;\n\t\t};\n\t\treturn (0,_InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.createStepTools)(this.options.client, this, stepHandler);\n\t}\n\tgetUserFnToRun() {\n\t\tif (!this.options.isFailureHandler) return this.options.fn[\"fn\"];\n\t\tif (!this.options.fn[\"onFailureFn\"])\n /**\n\t\t* Somehow, we've ended up detecting that this is a failure handler but\n\t\t* doesn't have an `onFailure` function. This should never happen.\n\t\t*/\n\t\tthrow new Error(\"Cannot find function `onFailure` handler\");\n\t\treturn this.options.fn[\"onFailureFn\"];\n\t}\n\tinitializeTimer(state) {\n\t\tif (!this.options.requestedRunStep) return;\n\t\tthis.timeout = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.createTimeoutPromise)(this.timeoutDuration);\n\t\tthis.timeout.then(async () => {\n\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t\tawait this.state.hooks?.afterExecution?.();\n\t\t\tstate.setCheckpoint({\n\t\t\t\ttype: \"step-not-found\",\n\t\t\t\tstep: {\n\t\t\t\t\tid: this.options.requestedRunStep,\n\t\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepNotFound\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tasync initializeMiddleware() {\n\t\tconst ctx = this.options.data;\n\t\treturn await (0,_InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_11__.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n\t\t\tctx,\n\t\t\tfn: this.options.fn,\n\t\t\tsteps: Object.values(this.options.stepState),\n\t\t\treqArgs: this.options.reqArgs\n\t\t}, {\n\t\t\ttransformInput: (prev, output) => {\n\t\t\t\treturn {\n\t\t\t\t\tctx: {\n\t\t\t\t\t\t...prev.ctx,\n\t\t\t\t\t\t...output?.ctx\n\t\t\t\t\t},\n\t\t\t\t\tfn: this.options.fn,\n\t\t\t\t\tsteps: prev.steps.map((step, i) => ({\n\t\t\t\t\t\t...step,\n\t\t\t\t\t\t...output?.steps?.[i]\n\t\t\t\t\t})),\n\t\t\t\t\treqArgs: prev.reqArgs\n\t\t\t\t};\n\t\t\t},\n\t\t\ttransformOutput: (prev, output) => {\n\t\t\t\treturn {\n\t\t\t\t\tresult: {\n\t\t\t\t\t\t...prev.result,\n\t\t\t\t\t\t...output?.result\n\t\t\t\t\t},\n\t\t\t\t\tstep: prev.step\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n};\nconst hashId = (id) => {\n\treturn sha1().update(id).digest(\"hex\");\n};\nconst hashOp = (op) => {\n\treturn {\n\t\t...op,\n\t\tid: hashId(op.id)\n\t};\n};\n/**\n* Exported for testing.\n*/\nconst _internals = {\n\thashOp,\n\thashId\n};\n\n//#endregion\n\n//# sourceMappingURL=v1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v2.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v2.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createV2InngestExecution: () => (/* binding */ createV2InngestExecution),\n/* harmony export */   v2_exports: () => (/* binding */ v2_exports)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var _helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\n/* harmony import */ var _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\n/* harmony import */ var _helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _InngestExecution_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\n/* harmony import */ var _helpers_functions_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\n/* harmony import */ var _helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n/* harmony import */ var _als_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\n/* harmony import */ var _InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/* harmony import */ var _otel_access_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./otel/access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\n/* harmony import */ var _RetryAfterError_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\n/* harmony import */ var _StepError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\n/* harmony import */ var _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/components/execution/v2.ts\nvar v2_exports = /* @__PURE__ */ (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_2__.__export)({\n\t_internals: () => _internals,\n\tcreateV2InngestExecution: () => createV2InngestExecution\n});\nconst { sha1 } = hash_js__WEBPACK_IMPORTED_MODULE_1__;\nconst createV2InngestExecution = (options) => {\n\treturn new V2InngestExecution(options);\n};\nvar V2InngestExecution = class extends _InngestExecution_js__WEBPACK_IMPORTED_MODULE_3__.InngestExecution {\n\tstate;\n\tfnArg;\n\tcheckpointHandlers;\n\ttimeoutDuration = 1e3 * 10;\n\texecution;\n\tuserFnToRun;\n\t/**\n\t* If we're supposed to run a particular step via `requestedRunStep`, this\n\t* will be a `Promise` that resolves after no steps have been found for\n\t* `timeoutDuration` milliseconds.\n\t*\n\t* If we're not supposed to run a particular step, this will be `undefined`.\n\t*/\n\ttimeout;\n\tconstructor(options) {\n\t\tsuper(options);\n\t\tthis.userFnToRun = this.getUserFnToRun();\n\t\tthis.state = this.createExecutionState();\n\t\tthis.fnArg = this.createFnArg();\n\t\tthis.checkpointHandlers = this.createCheckpointHandlers();\n\t\tthis.initializeTimer(this.state);\n\t\tthis.debug(\"created new V2 execution for run;\", this.options.requestedRunStep ? `wanting to run step \"${this.options.requestedRunStep}\"` : \"discovering steps\");\n\t\tthis.debug(\"existing state keys:\", Object.keys(this.state.stepState));\n\t}\n\t/**\n\t* Idempotently start the execution of the user's function.\n\t*/\n\tstart() {\n\t\tif (!this.execution) {\n\t\t\tthis.debug(\"starting V2 execution\");\n\t\t\tconst tracer = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.trace.getTracer(\"inngest\", _version_js__WEBPACK_IMPORTED_MODULE_5__.version);\n\t\t\tthis.execution = (0,_als_js__WEBPACK_IMPORTED_MODULE_6__.getAsyncLocalStorage)().then((als) => {\n\t\t\t\treturn als.run({\n\t\t\t\t\tapp: this.options.client,\n\t\t\t\t\tctx: this.fnArg\n\t\t\t\t}, async () => {\n\t\t\t\t\treturn tracer.startActiveSpan(\"inngest.execution\", (span) => {\n\t\t\t\t\t\t_otel_access_js__WEBPACK_IMPORTED_MODULE_7__.clientProcessorMap.get(this.options.client)?.declareStartingSpan({\n\t\t\t\t\t\t\tspan,\n\t\t\t\t\t\t\trunId: this.options.runId,\n\t\t\t\t\t\t\ttraceparent: this.options.headers[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__.headerKeys.TraceParent],\n\t\t\t\t\t\t\ttracestate: this.options.headers[_helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__.headerKeys.TraceState]\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn this._start().then((result) => {\n\t\t\t\t\t\t\tthis.debug(\"result:\", result);\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}).finally(() => {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn this.execution;\n\t}\n\t/**\n\t* Starts execution of the user's function and the core loop.\n\t*/\n\tasync _start() {\n\t\ttry {\n\t\t\tconst allCheckpointHandler = this.getCheckpointHandler(\"\");\n\t\t\tthis.state.hooks = await this.initializeMiddleware();\n\t\t\tawait this.startExecution();\n\t\t\tfor await (const checkpoint of this.state.loop) {\n\t\t\t\tawait allCheckpointHandler(checkpoint);\n\t\t\t\tconst result = await this.getCheckpointHandler(checkpoint.type)(checkpoint);\n\t\t\t\tif (result) return result;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn await this.transformOutput({ error });\n\t\t} finally {\n\t\t\tthis.state.loop.return();\n\t\t\tawait this.state.hooks?.beforeResponse?.();\n\t\t}\n\t\t/**\n\t\t* If we're here, the generator somehow finished without returning a value.\n\t\t* This should never happen.\n\t\t*/\n\t\tthrow new Error(\"Core loop finished without returning a value\");\n\t}\n\t/**\n\t* Creates a handler for every checkpoint type, defining what to do when we\n\t* reach that checkpoint in the core loop.\n\t*/\n\tcreateCheckpointHandlers() {\n\t\treturn {\n\t\t\t\"\": (checkpoint) => {\n\t\t\t\tthis.debug(\"checkpoint:\", checkpoint);\n\t\t\t},\n\t\t\t\"function-resolved\": async (checkpoint) => {\n\t\t\t\treturn await this.transformOutput({ data: checkpoint.data });\n\t\t\t},\n\t\t\t\"function-rejected\": async (checkpoint) => {\n\t\t\t\treturn await this.transformOutput({ error: checkpoint.error });\n\t\t\t},\n\t\t\t\"steps-found\": async ({ steps }) => {\n\t\t\t\tconst stepResult = await this.tryExecuteStep(steps);\n\t\t\t\tif (stepResult) {\n\t\t\t\t\tconst transformResult = await this.transformOutput(stepResult);\n\t\t\t\t\t/**\n\t\t\t\t\t* Transforming output will always return either function rejection or\n\t\t\t\t\t* resolution. In most cases, this can be immediately returned, but in\n\t\t\t\t\t* this particular case we want to handle it differently.\n\t\t\t\t\t*/\n\t\t\t\t\tif (transformResult.type === \"function-resolved\") return {\n\t\t\t\t\t\ttype: \"step-ran\",\n\t\t\t\t\t\tctx: transformResult.ctx,\n\t\t\t\t\t\tops: transformResult.ops,\n\t\t\t\t\t\tstep: _internals.hashOp({\n\t\t\t\t\t\t\t...stepResult,\n\t\t\t\t\t\t\tdata: transformResult.data\n\t\t\t\t\t\t})\n\t\t\t\t\t};\n\t\t\t\t\telse if (transformResult.type === \"function-rejected\") return {\n\t\t\t\t\t\ttype: \"step-ran\",\n\t\t\t\t\t\tctx: transformResult.ctx,\n\t\t\t\t\t\tops: transformResult.ops,\n\t\t\t\t\t\tstep: _internals.hashOp({\n\t\t\t\t\t\t\t...stepResult,\n\t\t\t\t\t\t\terror: transformResult.error\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tretriable: transformResult.retriable\n\t\t\t\t\t};\n\t\t\t\t\treturn transformResult;\n\t\t\t\t}\n\t\t\t\tconst newSteps = await this.filterNewSteps(Array.from(this.state.steps.values()));\n\t\t\t\tif (newSteps) return {\n\t\t\t\t\ttype: \"steps-found\",\n\t\t\t\t\tctx: this.fnArg,\n\t\t\t\t\tops: this.ops,\n\t\t\t\t\tsteps: newSteps\n\t\t\t\t};\n\t\t\t},\n\t\t\t\"step-not-found\": ({ step }) => {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"step-not-found\",\n\t\t\t\t\tctx: this.fnArg,\n\t\t\t\t\tops: this.ops,\n\t\t\t\t\tstep\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\tgetCheckpointHandler(type) {\n\t\treturn this.checkpointHandlers[type];\n\t}\n\tasync tryExecuteStep(steps) {\n\t\tconst hashedStepIdToRun = this.options.requestedRunStep || this.getEarlyExecRunStep(steps);\n\t\tif (!hashedStepIdToRun) return;\n\t\tconst step = steps.find((step$1) => step$1.hashedId === hashedStepIdToRun && step$1.fn);\n\t\tif (step) return await this.executeStep(step);\n\t\tthis.timeout?.reset();\n\t}\n\t/**\n\t* Given a list of outgoing ops, decide if we can execute an op early and\n\t* return the ID of the step to execute if we can.\n\t*/\n\tgetEarlyExecRunStep(steps) {\n\t\t/**\n\t\t* We may have been disabled due to parallelism, in which case we can't\n\t\t* immediately execute unless explicitly requested.\n\t\t*/\n\t\tif (this.options.disableImmediateExecution) return;\n\t\tconst unfulfilledSteps = steps.filter((step) => !step.fulfilled);\n\t\tif (unfulfilledSteps.length !== 1) return;\n\t\tconst op = unfulfilledSteps[0];\n\t\tif (op && op.op === _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepPlanned) return op.hashedId;\n\t}\n\tasync filterNewSteps(foundSteps) {\n\t\tif (this.options.requestedRunStep) return;\n\t\t/**\n\t\t* Gather any steps that aren't memoized and report them.\n\t\t*/\n\t\tconst newSteps = foundSteps.filter((step) => !step.fulfilled);\n\t\tif (!newSteps.length) return;\n\t\t/**\n\t\t* Warn if we've found new steps but haven't yet seen all previous\n\t\t* steps. This may indicate that step presence isn't determinate.\n\t\t*/\n\t\tlet knownSteps = 0;\n\t\tfor (const step of foundSteps) if (step.fulfilled) knownSteps++;\n\t\tif (!(this.state.stepsToFulfill === knownSteps)) console.warn((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.prettyError)({\n\t\t\ttype: \"warn\",\n\t\t\twhatHappened: \"Function may be indeterminate\",\n\t\t\twhy: \"We found new steps before seeing all previous steps, which may indicate that the function is non-deterministic.\",\n\t\t\tconsequences: \"This may cause unexpected behaviour as Inngest executes your function.\",\n\t\t\treassurance: \"This is expected if a function is updated in the middle of a run, but may indicate a bug if not.\"\n\t\t}));\n\t\t/**\n\t\t* We're finishing up; let's trigger the last of the hooks.\n\t\t*/\n\t\tawait this.state.hooks?.afterMemoization?.();\n\t\tawait this.state.hooks?.beforeExecution?.();\n\t\tawait this.state.hooks?.afterExecution?.();\n\t\tconst stepList = newSteps.map((step) => ({\n\t\t\tdisplayName: step.displayName,\n\t\t\top: step.op,\n\t\t\tid: step.hashedId,\n\t\t\tname: step.name,\n\t\t\topts: step.opts\n\t\t}));\n\t\t/**\n\t\t* We also run `onSendEvent` middleware hooks against `step.invoke()` steps\n\t\t* to ensure that their `data` is transformed correctly.\n\t\t*/\n\t\treturn await this.transformNewSteps(stepList);\n\t}\n\t/**\n\t* Using middleware, transform any newly-found steps before returning them to\n\t* an Inngest Server.\n\t*/\n\tasync transformNewSteps(steps) {\n\t\treturn Promise.all(steps.map(async (step) => {\n\t\t\tif (step.op !== _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.InvokeFunction) return step;\n\t\t\t/**\n\t\t\t* For each event being sent, create a new `onSendEvent` hook stack to\n\t\t\t* process it. We do this as middleware hooks are intended to run once\n\t\t\t* during each lifecycle (onFunctionRun or onSendEvent) and here, a hook\n\t\t\t* is run for every single event.\n\t\t\t*\n\t\t\t* This is done because a developer can use this hook to filter out\n\t\t\t* events entirely; if we batch all of the events together, we can't\n\t\t\t* tell which ones were filtered out if we're processing >1 invocation\n\t\t\t* here.\n\t\t\t*/\n\t\t\tconst transformedPayload = await (await (0,_InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_11__.getHookStack)(this.options.fn[\"middleware\"], \"onSendEvent\", void 0, {\n\t\t\t\ttransformInput: (prev, output) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...prev,\n\t\t\t\t\t\t...output\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\ttransformOutput: (prev, output) => {\n\t\t\t\t\treturn { result: {\n\t\t\t\t\t\t...prev.result,\n\t\t\t\t\t\t...output?.result\n\t\t\t\t\t} };\n\t\t\t\t}\n\t\t\t})).transformInput?.({ payloads: [{\n\t\t\t\t...step.opts?.payload ?? {},\n\t\t\t\tname: _helpers_consts_js__WEBPACK_IMPORTED_MODULE_8__.internalEvents.FunctionInvoked\n\t\t\t}] });\n\t\t\tconst newPayload = _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.invokePayloadSchema.parse(transformedPayload?.payloads?.[0] ?? {});\n\t\t\treturn {\n\t\t\t\t...step,\n\t\t\t\topts: {\n\t\t\t\t\t...step.opts,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\t...step.opts?.payload ?? {},\n\t\t\t\t\t\t...newPayload\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}));\n\t}\n\tasync executeStep({ id, name, opts, fn, displayName }) {\n\t\tthis.timeout?.clear();\n\t\tawait this.state.hooks?.afterMemoization?.();\n\t\tawait this.state.hooks?.beforeExecution?.();\n\t\tconst outgoingOp = {\n\t\t\tid,\n\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepRun,\n\t\t\tname,\n\t\t\topts,\n\t\t\tdisplayName\n\t\t};\n\t\tthis.state.executingStep = outgoingOp;\n\t\tconst store = await (0,_als_js__WEBPACK_IMPORTED_MODULE_6__.getAsyncCtx)();\n\t\tif (store) store.executingStep = {\n\t\t\tid,\n\t\t\tname: displayName\n\t\t};\n\t\tthis.debug(`executing step \"${id}\"`);\n\t\treturn (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.runAsPromise)(fn).finally(async () => {\n\t\t\tif (store) delete store.executingStep;\n\t\t\tawait this.state.hooks?.afterExecution?.();\n\t\t}).then((data) => {\n\t\t\treturn {\n\t\t\t\t...outgoingOp,\n\t\t\t\tdata\n\t\t\t};\n\t\t}).catch((error) => {\n\t\t\treturn {\n\t\t\t\t...outgoingOp,\n\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepError,\n\t\t\t\terror\n\t\t\t};\n\t\t});\n\t}\n\t/**\n\t* Starts execution of the user's function, including triggering checkpoints\n\t* and middleware hooks where appropriate.\n\t*/\n\tasync startExecution() {\n\t\t/**\n\t\t* Mutate input as neccessary based on middleware.\n\t\t*/\n\t\tawait this.transformInput();\n\t\t/**\n\t\t* Start the timer to time out the run if needed.\n\t\t*/\n\t\tthis.timeout?.start();\n\t\tawait this.state.hooks?.beforeMemoization?.();\n\t\t/**\n\t\t* If we had no state to begin with, immediately end the memoization phase.\n\t\t*/\n\t\tif (this.state.allStateUsed()) {\n\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t}\n\t\t/**\n\t\t* Trigger the user's function.\n\t\t*/\n\t\t(0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.runAsPromise)(() => this.userFnToRun(this.fnArg)).finally(async () => {\n\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t\tawait this.state.hooks?.afterExecution?.();\n\t\t}).then((data) => {\n\t\t\tthis.state.setCheckpoint({\n\t\t\t\ttype: \"function-resolved\",\n\t\t\t\tdata\n\t\t\t});\n\t\t}).catch((error) => {\n\t\t\tthis.state.setCheckpoint({\n\t\t\t\ttype: \"function-rejected\",\n\t\t\t\terror\n\t\t\t});\n\t\t});\n\t}\n\t/**\n\t* Using middleware, transform input before running.\n\t*/\n\tasync transformInput() {\n\t\tconst inputMutations = await this.state.hooks?.transformInput?.({\n\t\t\tctx: { ...this.fnArg },\n\t\t\tsteps: Object.values(this.state.stepState),\n\t\t\tfn: this.options.fn,\n\t\t\treqArgs: this.options.reqArgs\n\t\t});\n\t\tif (inputMutations?.ctx) this.fnArg = inputMutations.ctx;\n\t\tif (inputMutations?.steps) this.state.stepState = Object.fromEntries(inputMutations.steps.map((step) => [step.id, step]));\n\t}\n\t/**\n\t* Using middleware, transform output before returning.\n\t*/\n\tasync transformOutput(dataOrError) {\n\t\tconst output = { ...dataOrError };\n\t\t/**\n\t\t* If we've been given an error and it's one that we just threw from a step,\n\t\t* we should return a `NonRetriableError` to stop execution.\n\t\t*/\n\t\tif (typeof output.error !== \"undefined\") output.data = (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.serializeError)(output.error);\n\t\tconst isStepExecution = Boolean(this.state.executingStep);\n\t\tconst transformedOutput = await this.state.hooks?.transformOutput?.({\n\t\t\tresult: { ...output },\n\t\t\tstep: this.state.executingStep\n\t\t});\n\t\tconst { data, error } = {\n\t\t\t...output,\n\t\t\t...transformedOutput?.result\n\t\t};\n\t\tif (!isStepExecution) await this.state.hooks?.finished?.({ result: { ...typeof error !== \"undefined\" ? { error } : { data } } });\n\t\tif (typeof error !== \"undefined\") {\n\t\t\t/**\n\t\t\t* Ensure we give middleware the chance to decide on retriable behaviour\n\t\t\t* by looking at the error returned from output transformation.\n\t\t\t*/\n\t\t\tlet retriable = !(error instanceof _NonRetriableError_js__WEBPACK_IMPORTED_MODULE_14__.NonRetriableError || error instanceof _StepError_js__WEBPACK_IMPORTED_MODULE_15__.StepError);\n\t\t\tif (retriable && error instanceof _RetryAfterError_js__WEBPACK_IMPORTED_MODULE_16__.RetryAfterError) retriable = error.retryAfter;\n\t\t\tconst serializedError = (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.minifyPrettyError)((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.serializeError)(error));\n\t\t\treturn {\n\t\t\t\ttype: \"function-rejected\",\n\t\t\t\tctx: this.fnArg,\n\t\t\t\tops: this.ops,\n\t\t\t\terror: serializedError,\n\t\t\t\tretriable\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\ttype: \"function-resolved\",\n\t\t\tctx: this.fnArg,\n\t\t\tops: this.ops,\n\t\t\tdata: (0,_helpers_functions_js__WEBPACK_IMPORTED_MODULE_17__.undefinedToNull)(data)\n\t\t};\n\t}\n\tcreateExecutionState() {\n\t\tconst d = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.createDeferredPromiseWithStack)();\n\t\tlet checkpointResolve = d.deferred.resolve;\n\t\tconst checkpointResults = d.results;\n\t\tconst loop = (async function* (cleanUp) {\n\t\t\ttry {\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst res = (await checkpointResults.next()).value;\n\t\t\t\t\tif (res) yield res;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tcleanUp?.();\n\t\t\t}\n\t\t})(() => {\n\t\t\tthis.timeout?.clear();\n\t\t\tcheckpointResults.return();\n\t\t});\n\t\tconst stepsToFulfill = Object.keys(this.options.stepState).length;\n\t\treturn {\n\t\t\tstepState: this.options.stepState,\n\t\t\tstepsToFulfill,\n\t\t\tsteps: /* @__PURE__ */ new Map(),\n\t\t\tloop,\n\t\t\thasSteps: Boolean(stepsToFulfill),\n\t\t\tstepCompletionOrder: [...this.options.stepCompletionOrder],\n\t\t\tremainingStepsToBeSeen: new Set(this.options.stepCompletionOrder),\n\t\t\tsetCheckpoint: (checkpoint) => {\n\t\t\t\t({resolve: checkpointResolve} = checkpointResolve(checkpoint));\n\t\t\t},\n\t\t\tallStateUsed: () => {\n\t\t\t\treturn this.state.remainingStepsToBeSeen.size === 0;\n\t\t\t}\n\t\t};\n\t}\n\tget ops() {\n\t\treturn Object.fromEntries(this.state.steps);\n\t}\n\tcreateFnArg() {\n\t\tconst step = this.createStepTools();\n\t\tlet fnArg = {\n\t\t\t...this.options.data,\n\t\t\tstep\n\t\t};\n\t\t/**\n\t\t* Handle use of the `onFailure` option by deserializing the error.\n\t\t*/\n\t\tif (this.options.isFailureHandler) {\n\t\t\tconst eventData = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ error: _types_js__WEBPACK_IMPORTED_MODULE_9__.jsonErrorSchema }).parse(fnArg.event?.data);\n\t\t\tfnArg = {\n\t\t\t\t...fnArg,\n\t\t\t\terror: (0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.deserializeError)(eventData.error)\n\t\t\t};\n\t\t}\n\t\treturn this.options.transformCtx?.(fnArg) ?? fnArg;\n\t}\n\tcreateStepTools() {\n\t\t/**\n\t\t* A list of steps that have been found and are being rolled up before being\n\t\t* reported to the core loop.\n\t\t*/\n\t\tconst foundStepsToReport = /* @__PURE__ */ new Map();\n\t\t/**\n\t\t* A map of the subset of found steps to report that have not yet been\n\t\t* handled. Used for fast access to steps that need to be handled in order.\n\t\t*/\n\t\tconst unhandledFoundStepsToReport = /* @__PURE__ */ new Map();\n\t\t/**\n\t\t* A map of the latest sequential step indexes found for each step ID. Used\n\t\t* to ensure that we don't index steps in parallel.\n\t\t*\n\t\t* Note that these must be sequential; if we've seen or assigned `a:1`,\n\t\t* `a:2` and `a:4`, the latest sequential step index is `2`.\n\t\t*\n\t\t*/\n\t\tconst expectedNextStepIndexes = /* @__PURE__ */ new Map();\n\t\t/**\n\t\t* A promise that's used to ensure that step reporting cannot be run more than\n\t\t* once in a given asynchronous time span.\n\t\t*/\n\t\tlet foundStepsReportPromise;\n\t\t/**\n\t\t* A promise that's used to represent middleware hooks running before\n\t\t* execution.\n\t\t*/\n\t\tlet beforeExecHooksPromise;\n\t\t/**\n\t\t* A helper used to report steps to the core loop. Used after adding an item\n\t\t* to `foundStepsToReport`.\n\t\t*/\n\t\tconst reportNextTick = () => {\n\t\t\tif (foundStepsReportPromise) return;\n\t\t\tfoundStepsReportPromise = new Promise((resolve) => setImmediate(resolve)).then(() => beforeExecHooksPromise).then(() => {\n\t\t\t\tfoundStepsReportPromise = void 0;\n\t\t\t\tfor (const [hashedId, step] of unhandledFoundStepsToReport) if (step.handle()) {\n\t\t\t\t\tunhandledFoundStepsToReport.delete(hashedId);\n\t\t\t\t\tif (step.fulfilled) foundStepsToReport.delete(step.id);\n\t\t\t\t}\n\t\t\t\tif (foundStepsToReport.size) {\n\t\t\t\t\tconst steps = [...foundStepsToReport.values()];\n\t\t\t\t\tfoundStepsToReport.clear();\n\t\t\t\t\tthis.state.setCheckpoint({\n\t\t\t\t\t\ttype: \"steps-found\",\n\t\t\t\t\t\tsteps\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\t/**\n\t\t* A helper used to push a step to the list of steps to report.\n\t\t*/\n\t\tconst pushStepToReport = (step) => {\n\t\t\tfoundStepsToReport.set(step.id, step);\n\t\t\tunhandledFoundStepsToReport.set(step.hashedId, step);\n\t\t\treportNextTick();\n\t\t};\n\t\tconst stepHandler = async ({ args, matchOp, opts }) => {\n\t\t\tawait beforeExecHooksPromise;\n\t\t\tconst stepOptions = (0,_InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.getStepOptions)(args[0]);\n\t\t\tconst opId = matchOp(stepOptions, ...args.slice(1));\n\t\t\tif (this.state.executingStep)\n /**\n\t\t\t* If a step is found after asynchronous actions during another step's\n\t\t\t* execution, everything is fine. The problem here is if we've found\n\t\t\t* that a step nested inside another a step, which is something we don't\n\t\t\t* support at the time of writing.\n\t\t\t*\n\t\t\t* In this case, we could use something like Async Hooks to understand\n\t\t\t* how the step is being triggered, though this isn't available in all\n\t\t\t* environments.\n\t\t\t*\n\t\t\t* Therefore, we'll only show a warning here to indicate that this is\n\t\t\t* potentially an issue.\n\t\t\t*/\n\t\t\tconsole.warn((0,_helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.prettyError)({\n\t\t\t\twhatHappened: `We detected that you have nested \\`step.*\\` tooling in \\`${opId.displayName ?? opId.id}\\``,\n\t\t\t\tconsequences: \"Nesting `step.*` tooling is not supported.\",\n\t\t\t\ttype: \"warn\",\n\t\t\t\treassurance: \"It's possible to see this warning if steps are separated by regular asynchronous calls, which is fine.\",\n\t\t\t\tstack: true,\n\t\t\t\ttoFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n\t\t\t\tcode: _helpers_errors_js__WEBPACK_IMPORTED_MODULE_10__.ErrCode.NESTING_STEPS\n\t\t\t}));\n\t\t\tif (this.state.steps.has(opId.id)) {\n\t\t\t\tconst originalId = opId.id;\n\t\t\t\tconst expectedNextIndex = expectedNextStepIndexes.get(originalId) ?? 1;\n\t\t\t\tfor (let i = expectedNextIndex;; i++) {\n\t\t\t\t\tconst newId = originalId + _InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.STEP_INDEXING_SUFFIX + i;\n\t\t\t\t\tif (!this.state.steps.has(newId)) {\n\t\t\t\t\t\texpectedNextStepIndexes.set(originalId, i + 1);\n\t\t\t\t\t\topId.id = newId;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst { promise, resolve, reject } = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.createDeferredPromise)();\n\t\t\tconst hashedId = _internals.hashId(opId.id);\n\t\t\tconst stepState = this.state.stepState[hashedId];\n\t\t\tlet isFulfilled = false;\n\t\t\tif (stepState) {\n\t\t\t\tstepState.seen = true;\n\t\t\t\tthis.state.remainingStepsToBeSeen.delete(hashedId);\n\t\t\t\tif (typeof stepState.input === \"undefined\") isFulfilled = true;\n\t\t\t}\n\t\t\tlet extraOpts;\n\t\t\tlet fnArgs = [...args];\n\t\t\tif (typeof stepState?.input !== \"undefined\" && Array.isArray(stepState.input)) switch (opId.op) {\n\t\t\t\tcase _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepPlanned:\n\t\t\t\t\tfnArgs = [...args.slice(0, 2), ...stepState.input];\n\t\t\t\t\textraOpts = { input: [...stepState.input] };\n\t\t\t\t\tbreak;\n\t\t\t\tcase _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.AiGateway:\n\t\t\t\t\textraOpts = { body: {\n\t\t\t\t\t\t...typeof opId.opts?.body === \"object\" ? { ...opId.opts.body } : {},\n\t\t\t\t\t\t...stepState.input[0]\n\t\t\t\t\t} };\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst step = {\n\t\t\t\t...opId,\n\t\t\t\topts: {\n\t\t\t\t\t...opId.opts,\n\t\t\t\t\t...extraOpts\n\t\t\t\t},\n\t\t\t\trawArgs: fnArgs,\n\t\t\t\thashedId,\n\t\t\t\tinput: stepState?.input,\n\t\t\t\tfn: opts?.fn ? () => opts.fn?.(...fnArgs) : void 0,\n\t\t\t\tpromise,\n\t\t\t\tfulfilled: isFulfilled,\n\t\t\t\thasStepState: Boolean(stepState),\n\t\t\t\tdisplayName: opId.displayName ?? opId.id,\n\t\t\t\thandled: false,\n\t\t\t\thandle: () => {\n\t\t\t\t\tif (step.handled) return false;\n\t\t\t\t\tstep.handled = true;\n\t\t\t\t\tif (isFulfilled && stepState) {\n\t\t\t\t\t\tstepState.fulfilled = true;\n\t\t\t\t\t\tPromise.all([\n\t\t\t\t\t\t\tstepState.data,\n\t\t\t\t\t\t\tstepState.error,\n\t\t\t\t\t\t\tstepState.input\n\t\t\t\t\t\t]).then(() => {\n\t\t\t\t\t\t\tif (typeof stepState.data !== \"undefined\") resolve(stepState.data);\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.state.recentlyRejectedStepError = new _StepError_js__WEBPACK_IMPORTED_MODULE_15__.StepError(opId.id, stepState.error);\n\t\t\t\t\t\t\t\treject(this.state.recentlyRejectedStepError);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.state.steps.set(opId.id, step);\n\t\t\tthis.state.hasSteps = true;\n\t\t\tpushStepToReport(step);\n\t\t\t/**\n\t\t\t* If this is the last piece of state we had, we've now finished\n\t\t\t* memoizing.\n\t\t\t*/\n\t\t\tif (!beforeExecHooksPromise && this.state.allStateUsed()) await (beforeExecHooksPromise = (async () => {\n\t\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t\t})());\n\t\t\treturn promise;\n\t\t};\n\t\treturn (0,_InngestStepTools_js__WEBPACK_IMPORTED_MODULE_12__.createStepTools)(this.options.client, this, stepHandler);\n\t}\n\tgetUserFnToRun() {\n\t\tif (!this.options.isFailureHandler) return this.options.fn[\"fn\"];\n\t\tif (!this.options.fn[\"onFailureFn\"])\n /**\n\t\t* Somehow, we've ended up detecting that this is a failure handler but\n\t\t* doesn't have an `onFailure` function. This should never happen.\n\t\t*/\n\t\tthrow new Error(\"Cannot find function `onFailure` handler\");\n\t\treturn this.options.fn[\"onFailureFn\"];\n\t}\n\tinitializeTimer(state) {\n\t\tif (!this.options.requestedRunStep) return;\n\t\tthis.timeout = (0,_helpers_promises_js__WEBPACK_IMPORTED_MODULE_13__.createTimeoutPromise)(this.timeoutDuration);\n\t\tthis.timeout.then(async () => {\n\t\t\tawait this.state.hooks?.afterMemoization?.();\n\t\t\tawait this.state.hooks?.beforeExecution?.();\n\t\t\tawait this.state.hooks?.afterExecution?.();\n\t\t\tstate.setCheckpoint({\n\t\t\t\ttype: \"step-not-found\",\n\t\t\t\tstep: {\n\t\t\t\t\tid: this.options.requestedRunStep,\n\t\t\t\t\top: _types_js__WEBPACK_IMPORTED_MODULE_9__.StepOpCode.StepNotFound\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tasync initializeMiddleware() {\n\t\tconst ctx = this.options.data;\n\t\treturn await (0,_InngestMiddleware_js__WEBPACK_IMPORTED_MODULE_11__.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n\t\t\tctx,\n\t\t\tfn: this.options.fn,\n\t\t\tsteps: Object.values(this.options.stepState),\n\t\t\treqArgs: this.options.reqArgs\n\t\t}, {\n\t\t\ttransformInput: (prev, output) => {\n\t\t\t\treturn {\n\t\t\t\t\tctx: {\n\t\t\t\t\t\t...prev.ctx,\n\t\t\t\t\t\t...output?.ctx\n\t\t\t\t\t},\n\t\t\t\t\tfn: this.options.fn,\n\t\t\t\t\tsteps: prev.steps.map((step, i) => ({\n\t\t\t\t\t\t...step,\n\t\t\t\t\t\t...output?.steps?.[i]\n\t\t\t\t\t})),\n\t\t\t\t\treqArgs: prev.reqArgs\n\t\t\t\t};\n\t\t\t},\n\t\t\ttransformOutput: (prev, output) => {\n\t\t\t\treturn {\n\t\t\t\t\tresult: {\n\t\t\t\t\t\t...prev.result,\n\t\t\t\t\t\t...output?.result\n\t\t\t\t\t},\n\t\t\t\t\tstep: prev.step\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n};\nconst hashId = (id) => {\n\treturn sha1().update(id).digest(\"hex\");\n};\nconst hashOp = (op) => {\n\treturn {\n\t\t...op,\n\t\tid: hashId(op.id)\n\t};\n};\n/**\n* Exported for testing.\n*/\nconst _internals = {\n\thashOp,\n\thashId\n};\n\n//#endregion\n\n//# sourceMappingURL=v2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/ServerTiming.js":
/*!******************************************************!*\
  !*** ./node_modules/inngest/helpers/ServerTiming.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerTiming: () => (/* binding */ ServerTiming),\n/* harmony export */   ServerTiming_exports: () => (/* binding */ ServerTiming_exports)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n\n\n\n//#region src/helpers/ServerTiming.ts\nvar ServerTiming_exports = /* @__PURE__ */ (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_0__.__export)({ ServerTiming: () => ServerTiming });\n/**\n* A class to manage timing functions and arbitrary periods of time before\n* generating a `Server-Timing` header for use in HTTP responses.\n*\n* This is a very simple implementation that does not support nested timings or\n* fractions of a millisecond.\n*/\nvar ServerTiming = class {\n\ttimings = {};\n\t/**\n\t* Start a timing. Returns a function that, when called, will stop the timing\n\t* and add it to the header.\n\t*/\n\tstart(name, description) {\n\t\tif (!this.timings[name]) this.timings[name] = {\n\t\t\tdescription: description ?? \"\",\n\t\t\ttimers: []\n\t\t};\n\t\tconst index = this.timings[name].timers.push({ start: Date.now() }) - 1;\n\t\treturn () => {\n\t\t\tconst target = this.timings[name];\n\t\t\tif (!target) return console.warn(`Timing \"${name}\" does not exist`);\n\t\t\tconst timer = target.timers[index];\n\t\t\tif (!timer) return console.warn(`Timer ${index} for timing \"${name}\" does not exist`);\n\t\t\ttimer.end = Date.now();\n\t\t};\n\t}\n\t/**\n\t* Add a piece of arbitrary, untimed information to the header. Common use\n\t* cases would be cache misses.\n\t*\n\t* @example\n\t* ```\n\t* timer.append(\"cache\", \"miss\");\n\t* ```\n\t*/\n\tappend(key, value) {\n\t\tthis.timings[key] = {\n\t\t\tdescription: value,\n\t\t\ttimers: []\n\t\t};\n\t}\n\t/**\n\t* Wrap a function in a timing. The timing will be stopped and added to the\n\t* header when the function resolves or rejects.\n\t*\n\t* The return value of the function will be returned from this function.\n\t*/\n\tasync wrap(name, fn, description) {\n\t\tconst stop = this.start(name, description);\n\t\ttry {\n\t\t\treturn await (0,_promises_js__WEBPACK_IMPORTED_MODULE_1__.runAsPromise)(fn);\n\t\t} finally {\n\t\t\tstop();\n\t\t}\n\t}\n\t/**\n\t* Generate the `Server-Timing` header.\n\t*/\n\tgetHeader() {\n\t\treturn Object.entries(this.timings).reduce((acc, [name, { description, timers }]) => {\n\t\t\tif (!timers.some((timer) => timer.end)) return acc;\n\t\t\tconst dur = timers.reduce((acc$1, { start, end }) => {\n\t\t\t\tif (!start || !end) return acc$1;\n\t\t\t\treturn acc$1 + (end - start);\n\t\t\t}, 0);\n\t\t\tconst entry = [\n\t\t\t\tname,\n\t\t\t\tdescription ? `desc=\"${description}\"` : \"\",\n\t\t\t\tdur ? `dur=${dur}` : \"\"\n\t\t\t].filter(Boolean).join(\";\");\n\t\t\treturn [...acc, entry];\n\t\t}, []).join(\", \");\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=ServerTiming.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL1NlcnZlclRpbWluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJEO0FBQ2Q7O0FBRTdDO0FBQ0EsMkNBQTJDLHNFQUFRLEdBQUcsa0NBQWtDO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxtQkFBbUI7QUFDcEU7QUFDQTtBQUNBLCtDQUErQyxLQUFLO0FBQ3BEO0FBQ0EsNENBQTRDLE9BQU8sY0FBYyxLQUFLO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwREFBWTtBQUM1QixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQscUJBQXFCO0FBQ2pGO0FBQ0EsdUNBQXVDLFlBQVk7QUFDbkQ7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsMkJBQTJCLFlBQVk7QUFDdkMsaUJBQWlCLElBQUk7QUFDckIsNEJBQTRCO0FBQzVCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDOEM7QUFDOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL1NlcnZlclRpbWluZy5qcz8xOGZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXhwb3J0IH0gZnJvbSBcIi4uL192aXJ0dWFsL3JvbGxkb3duX3J1bnRpbWUuanNcIjtcbmltcG9ydCB7IHJ1bkFzUHJvbWlzZSB9IGZyb20gXCIuL3Byb21pc2VzLmpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvaGVscGVycy9TZXJ2ZXJUaW1pbmcudHNcbnZhciBTZXJ2ZXJUaW1pbmdfZXhwb3J0cyA9IC8qIEBfX1BVUkVfXyAqLyBfX2V4cG9ydCh7IFNlcnZlclRpbWluZzogKCkgPT4gU2VydmVyVGltaW5nIH0pO1xuLyoqXG4qIEEgY2xhc3MgdG8gbWFuYWdlIHRpbWluZyBmdW5jdGlvbnMgYW5kIGFyYml0cmFyeSBwZXJpb2RzIG9mIHRpbWUgYmVmb3JlXG4qIGdlbmVyYXRpbmcgYSBgU2VydmVyLVRpbWluZ2AgaGVhZGVyIGZvciB1c2UgaW4gSFRUUCByZXNwb25zZXMuXG4qXG4qIFRoaXMgaXMgYSB2ZXJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbiB0aGF0IGRvZXMgbm90IHN1cHBvcnQgbmVzdGVkIHRpbWluZ3Mgb3JcbiogZnJhY3Rpb25zIG9mIGEgbWlsbGlzZWNvbmQuXG4qL1xudmFyIFNlcnZlclRpbWluZyA9IGNsYXNzIHtcblx0dGltaW5ncyA9IHt9O1xuXHQvKipcblx0KiBTdGFydCBhIHRpbWluZy4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB3aWxsIHN0b3AgdGhlIHRpbWluZ1xuXHQqIGFuZCBhZGQgaXQgdG8gdGhlIGhlYWRlci5cblx0Ki9cblx0c3RhcnQobmFtZSwgZGVzY3JpcHRpb24pIHtcblx0XHRpZiAoIXRoaXMudGltaW5nc1tuYW1lXSkgdGhpcy50aW1pbmdzW25hbWVdID0ge1xuXHRcdFx0ZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uID8/IFwiXCIsXG5cdFx0XHR0aW1lcnM6IFtdXG5cdFx0fTtcblx0XHRjb25zdCBpbmRleCA9IHRoaXMudGltaW5nc1tuYW1lXS50aW1lcnMucHVzaCh7IHN0YXJ0OiBEYXRlLm5vdygpIH0pIC0gMTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Y29uc3QgdGFyZ2V0ID0gdGhpcy50aW1pbmdzW25hbWVdO1xuXHRcdFx0aWYgKCF0YXJnZXQpIHJldHVybiBjb25zb2xlLndhcm4oYFRpbWluZyBcIiR7bmFtZX1cIiBkb2VzIG5vdCBleGlzdGApO1xuXHRcdFx0Y29uc3QgdGltZXIgPSB0YXJnZXQudGltZXJzW2luZGV4XTtcblx0XHRcdGlmICghdGltZXIpIHJldHVybiBjb25zb2xlLndhcm4oYFRpbWVyICR7aW5kZXh9IGZvciB0aW1pbmcgXCIke25hbWV9XCIgZG9lcyBub3QgZXhpc3RgKTtcblx0XHRcdHRpbWVyLmVuZCA9IERhdGUubm93KCk7XG5cdFx0fTtcblx0fVxuXHQvKipcblx0KiBBZGQgYSBwaWVjZSBvZiBhcmJpdHJhcnksIHVudGltZWQgaW5mb3JtYXRpb24gdG8gdGhlIGhlYWRlci4gQ29tbW9uIHVzZVxuXHQqIGNhc2VzIHdvdWxkIGJlIGNhY2hlIG1pc3Nlcy5cblx0KlxuXHQqIEBleGFtcGxlXG5cdCogYGBgXG5cdCogdGltZXIuYXBwZW5kKFwiY2FjaGVcIiwgXCJtaXNzXCIpO1xuXHQqIGBgYFxuXHQqL1xuXHRhcHBlbmQoa2V5LCB2YWx1ZSkge1xuXHRcdHRoaXMudGltaW5nc1trZXldID0ge1xuXHRcdFx0ZGVzY3JpcHRpb246IHZhbHVlLFxuXHRcdFx0dGltZXJzOiBbXVxuXHRcdH07XG5cdH1cblx0LyoqXG5cdCogV3JhcCBhIGZ1bmN0aW9uIGluIGEgdGltaW5nLiBUaGUgdGltaW5nIHdpbGwgYmUgc3RvcHBlZCBhbmQgYWRkZWQgdG8gdGhlXG5cdCogaGVhZGVyIHdoZW4gdGhlIGZ1bmN0aW9uIHJlc29sdmVzIG9yIHJlamVjdHMuXG5cdCpcblx0KiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhpcyBmdW5jdGlvbi5cblx0Ki9cblx0YXN5bmMgd3JhcChuYW1lLCBmbiwgZGVzY3JpcHRpb24pIHtcblx0XHRjb25zdCBzdG9wID0gdGhpcy5zdGFydChuYW1lLCBkZXNjcmlwdGlvbik7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBhd2FpdCBydW5Bc1Byb21pc2UoZm4pO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRzdG9wKCk7XG5cdFx0fVxuXHR9XG5cdC8qKlxuXHQqIEdlbmVyYXRlIHRoZSBgU2VydmVyLVRpbWluZ2AgaGVhZGVyLlxuXHQqL1xuXHRnZXRIZWFkZXIoKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudGltaW5ncykucmVkdWNlKChhY2MsIFtuYW1lLCB7IGRlc2NyaXB0aW9uLCB0aW1lcnMgfV0pID0+IHtcblx0XHRcdGlmICghdGltZXJzLnNvbWUoKHRpbWVyKSA9PiB0aW1lci5lbmQpKSByZXR1cm4gYWNjO1xuXHRcdFx0Y29uc3QgZHVyID0gdGltZXJzLnJlZHVjZSgoYWNjJDEsIHsgc3RhcnQsIGVuZCB9KSA9PiB7XG5cdFx0XHRcdGlmICghc3RhcnQgfHwgIWVuZCkgcmV0dXJuIGFjYyQxO1xuXHRcdFx0XHRyZXR1cm4gYWNjJDEgKyAoZW5kIC0gc3RhcnQpO1xuXHRcdFx0fSwgMCk7XG5cdFx0XHRjb25zdCBlbnRyeSA9IFtcblx0XHRcdFx0bmFtZSxcblx0XHRcdFx0ZGVzY3JpcHRpb24gPyBgZGVzYz1cIiR7ZGVzY3JpcHRpb259XCJgIDogXCJcIixcblx0XHRcdFx0ZHVyID8gYGR1cj0ke2R1cn1gIDogXCJcIlxuXHRcdFx0XS5maWx0ZXIoQm9vbGVhbikuam9pbihcIjtcIik7XG5cdFx0XHRyZXR1cm4gWy4uLmFjYywgZW50cnldO1xuXHRcdH0sIFtdKS5qb2luKFwiLCBcIik7XG5cdH1cbn07XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgU2VydmVyVGltaW5nLCBTZXJ2ZXJUaW1pbmdfZXhwb3J0cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmVyVGltaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/ServerTiming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/consts.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/consts.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExecutionVersion: () => (/* binding */ ExecutionVersion),\n/* harmony export */   debugPrefix: () => (/* binding */ debugPrefix),\n/* harmony export */   defaultDevServerHost: () => (/* binding */ defaultDevServerHost),\n/* harmony export */   defaultInngestApiBaseUrl: () => (/* binding */ defaultInngestApiBaseUrl),\n/* harmony export */   defaultInngestEventBaseUrl: () => (/* binding */ defaultInngestEventBaseUrl),\n/* harmony export */   dummyEventKey: () => (/* binding */ dummyEventKey),\n/* harmony export */   envKeys: () => (/* binding */ envKeys),\n/* harmony export */   headerKeys: () => (/* binding */ headerKeys),\n/* harmony export */   internalEvents: () => (/* binding */ internalEvents),\n/* harmony export */   logPrefix: () => (/* binding */ logPrefix),\n/* harmony export */   probe: () => (/* binding */ probe),\n/* harmony export */   queryKeys: () => (/* binding */ queryKeys),\n/* harmony export */   syncKind: () => (/* binding */ syncKind)\n/* harmony export */ });\n/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chalk */ \"(rsc)/./node_modules/chalk/source/index.js\");\n\n\n//#region src/helpers/consts.ts\n/**\n* Keys for accessing query parameters included in requests from Inngest to run\n* functions.\n*\n* Used internally to create handlers using `InngestCommHandler`, but can be\n* imported to be used if creating a custom handler outside of the package.\n*\n* @public\n*/\nlet queryKeys = /* @__PURE__ */ function(queryKeys$1) {\n\tqueryKeys$1[\"DeployId\"] = \"deployId\";\n\tqueryKeys$1[\"FnId\"] = \"fnId\";\n\tqueryKeys$1[\"Probe\"] = \"probe\";\n\tqueryKeys$1[\"StepId\"] = \"stepId\";\n\treturn queryKeys$1;\n}({});\nlet probe = /* @__PURE__ */ function(probe$1) {\n\tprobe$1[\"Trust\"] = \"trust\";\n\treturn probe$1;\n}({});\nlet envKeys = /* @__PURE__ */ function(envKeys$1) {\n\tenvKeys$1[\"InngestSigningKey\"] = \"INNGEST_SIGNING_KEY\";\n\tenvKeys$1[\"InngestSigningKeyFallback\"] = \"INNGEST_SIGNING_KEY_FALLBACK\";\n\tenvKeys$1[\"InngestEventKey\"] = \"INNGEST_EVENT_KEY\";\n\t/**\n\t* @deprecated Removed in v3. Use {@link InngestBaseUrl} instead.\n\t*/\n\tenvKeys$1[\"InngestDevServerUrl\"] = \"INNGEST_DEVSERVER_URL\";\n\tenvKeys$1[\"InngestEnvironment\"] = \"INNGEST_ENV\";\n\tenvKeys$1[\"InngestBaseUrl\"] = \"INNGEST_BASE_URL\";\n\tenvKeys$1[\"InngestEventApiBaseUrl\"] = \"INNGEST_EVENT_API_BASE_URL\";\n\tenvKeys$1[\"InngestApiBaseUrl\"] = \"INNGEST_API_BASE_URL\";\n\tenvKeys$1[\"InngestServeHost\"] = \"INNGEST_SERVE_HOST\";\n\tenvKeys$1[\"InngestServePath\"] = \"INNGEST_SERVE_PATH\";\n\tenvKeys$1[\"InngestLogLevel\"] = \"INNGEST_LOG_LEVEL\";\n\tenvKeys$1[\"InngestStreaming\"] = \"INNGEST_STREAMING\";\n\tenvKeys$1[\"InngestDevMode\"] = \"INNGEST_DEV\";\n\tenvKeys$1[\"InngestAllowInBandSync\"] = \"INNGEST_ALLOW_IN_BAND_SYNC\";\n\t/**\n\t* @deprecated It's unknown what this env var was used for, but we do not\n\t* provide explicit support for it. Prefer using `INNGEST_ENV` instead.\n\t*/\n\tenvKeys$1[\"BranchName\"] = \"BRANCH_NAME\";\n\t/**\n\t* The git branch of the commit the deployment was triggered by. Example:\n\t* `improve-about-page`.\n\t*\n\t* {@link https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables}\n\t*/\n\tenvKeys$1[\"VercelBranch\"] = \"VERCEL_GIT_COMMIT_REF\";\n\t/**\n\t* Expected to be `\"1\"` if defined.\n\t*/\n\tenvKeys$1[\"IsVercel\"] = \"VERCEL\";\n\t/**\n\t* The branch name of the current deployment. May only be accessible at build\n\t* time, but included here just in case.\n\t*\n\t* {@link https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables}\n\t*/\n\tenvKeys$1[\"CloudflarePagesBranch\"] = \"CF_PAGES_BRANCH\";\n\t/**\n\t* Expected to be `\"1\"` if defined.\n\t*/\n\tenvKeys$1[\"IsCloudflarePages\"] = \"CF_PAGES\";\n\t/**\n\t* The branch name of the deployment from Git to Netlify, if available.\n\t*\n\t* {@link https://docs.netlify.com/configure-builds/environment-variables/#git-metadata}\n\t*/\n\tenvKeys$1[\"NetlifyBranch\"] = \"BRANCH\";\n\t/**\n\t* Expected to be `\"true\"` if defined.\n\t*/\n\tenvKeys$1[\"IsNetlify\"] = \"NETLIFY\";\n\t/**\n\t* The Git branch for a service or deploy.\n\t*\n\t* {@link https://render.com/docs/environment-variables#all-services}\n\t*/\n\tenvKeys$1[\"RenderBranch\"] = \"RENDER_GIT_BRANCH\";\n\t/**\n\t* Expected to be `\"true\"` if defined.\n\t*/\n\tenvKeys$1[\"IsRender\"] = \"RENDER\";\n\t/**\n\t* The branch that triggered the deployment. Example: `main`\n\t*\n\t* {@link https://docs.railway.app/develop/variables#railway-provided-variables}\n\t*/\n\tenvKeys$1[\"RailwayBranch\"] = \"RAILWAY_GIT_BRANCH\";\n\t/**\n\t* The railway environment for the deployment. Example: `production`\n\t*\n\t* {@link https://docs.railway.app/develop/variables#railway-provided-variables}\n\t*/\n\tenvKeys$1[\"RailwayEnvironment\"] = \"RAILWAY_ENVIRONMENT\";\n\tenvKeys$1[\"VercelEnvKey\"] = \"VERCEL_ENV\";\n\tenvKeys$1[\"OpenAiApiKey\"] = \"OPENAI_API_KEY\";\n\tenvKeys$1[\"GeminiApiKey\"] = \"GEMINI_API_KEY\";\n\tenvKeys$1[\"AnthropicApiKey\"] = \"ANTHROPIC_API_KEY\";\n\treturn envKeys$1;\n}({});\n/**\n* Keys for accessing headers included in requests from Inngest to run\n* functions.\n*\n* Used internally to create handlers using `InngestCommHandler`, but can be\n* imported to be used if creating a custom handler outside of the package.\n*\n* @public\n*/\nlet headerKeys = /* @__PURE__ */ function(headerKeys$1) {\n\theaderKeys$1[\"ContentLength\"] = \"content-length\";\n\theaderKeys$1[\"Signature\"] = \"x-inngest-signature\";\n\theaderKeys$1[\"SdkVersion\"] = \"x-inngest-sdk\";\n\theaderKeys$1[\"Environment\"] = \"x-inngest-env\";\n\theaderKeys$1[\"Platform\"] = \"x-inngest-platform\";\n\theaderKeys$1[\"Framework\"] = \"x-inngest-framework\";\n\theaderKeys$1[\"NoRetry\"] = \"x-inngest-no-retry\";\n\theaderKeys$1[\"RequestVersion\"] = \"x-inngest-req-version\";\n\theaderKeys$1[\"RetryAfter\"] = \"retry-after\";\n\theaderKeys$1[\"InngestServerKind\"] = \"x-inngest-server-kind\";\n\theaderKeys$1[\"InngestExpectedServerKind\"] = \"x-inngest-expected-server-kind\";\n\theaderKeys$1[\"InngestSyncKind\"] = \"x-inngest-sync-kind\";\n\theaderKeys$1[\"EventIdSeed\"] = \"x-inngest-event-id-seed\";\n\theaderKeys$1[\"TraceParent\"] = \"traceparent\";\n\theaderKeys$1[\"TraceState\"] = \"tracestate\";\n\treturn headerKeys$1;\n}({});\nconst defaultInngestApiBaseUrl = \"https://api.inngest.com/\";\nconst defaultInngestEventBaseUrl = \"https://inn.gs/\";\nconst defaultDevServerHost = \"http://localhost:8288/\";\n/**\n* Events that Inngest may send internally that can be used to trigger\n* functions.\n*\n* @public\n*/\nlet internalEvents = /* @__PURE__ */ function(internalEvents$1) {\n\t/**\n\t* A function has failed after exhausting all available retries. This event\n\t* will contain the original event and the error that caused the failure.\n\t*/\n\tinternalEvents$1[\"FunctionFailed\"] = \"inngest/function.failed\";\n\tinternalEvents$1[\"FunctionInvoked\"] = \"inngest/function.invoked\";\n\tinternalEvents$1[\"FunctionFinished\"] = \"inngest/function.finished\";\n\tinternalEvents$1[\"FunctionCancelled\"] = \"inngest/function.cancelled\";\n\tinternalEvents$1[\"ScheduledTimer\"] = \"inngest/scheduled.timer\";\n\treturn internalEvents$1;\n}({});\nconst logPrefix = chalk__WEBPACK_IMPORTED_MODULE_0__.magenta.bold(\"[Inngest]\");\nconst debugPrefix = \"inngest\";\nconst dummyEventKey = \"NO_EVENT_KEY_SET\";\nlet syncKind = /* @__PURE__ */ function(syncKind$1) {\n\tsyncKind$1[\"InBand\"] = \"in_band\";\n\tsyncKind$1[\"OutOfBand\"] = \"out_of_band\";\n\treturn syncKind$1;\n}({});\n/**\n* The execution models the SDK is aware of.\n*\n* This is used in a number of places to ensure all execution versions are\n* accounted for for a given operation.\n*/\nlet ExecutionVersion = /* @__PURE__ */ function(ExecutionVersion$1) {\n\t/**\n\t* Very legacy, initial version of the executor. Uses hashed op objects and\n\t* `pos` to determine the order of execution and which ops to run.\n\t*\n\t* Very stubborn about determinism.\n\t*/\n\tExecutionVersion$1[ExecutionVersion$1[\"V0\"] = 0] = \"V0\";\n\t/**\n\t* Uses a more flexible approach to execution and is more lenient about\n\t* determinism, allowing non-step async actions and non-determinism.\n\t*\n\t* Nowhere near as stubborn about determinism and so can silently migrate\n\t* between versions after bug fixes.\n\t*/\n\tExecutionVersion$1[ExecutionVersion$1[\"V1\"] = 1] = \"V1\";\n\t/**\n\t* Identical to V1, but allows the Executor to optimize parallel calls, hugely\n\t* reducing traffic going to/from the SDK.\n\t*/\n\tExecutionVersion$1[ExecutionVersion$1[\"V2\"] = 2] = \"V2\";\n\treturn ExecutionVersion$1;\n}({});\n\n//#endregion\n\n//# sourceMappingURL=consts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/crypto.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/crypto.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEntropy: () => (/* binding */ createEntropy)\n/* harmony export */ });\n//#region src/helpers/crypto.ts\n/**\n* Create a cryptographically secure random value.\n*\n* @throws {Error} If the crypto module is not available.\n*/\nfunction createEntropy(byteLength) {\n\tconst bytes = new Uint8Array(byteLength);\n\tconst { crypto } = globalThis;\n\tif (!crypto) throw new Error(\"missing crypto module\");\n\tif (!crypto.getRandomValues) throw new Error(\"missing crypto.getRandomValues\");\n\tcrypto.getRandomValues(bytes);\n\treturn bytes;\n}\n\n//#endregion\n\n//# sourceMappingURL=crypto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2NyeXB0by5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2NyeXB0by5qcz8wOGY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvaGVscGVycy9jcnlwdG8udHNcbi8qKlxuKiBDcmVhdGUgYSBjcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgcmFuZG9tIHZhbHVlLlxuKlxuKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGNyeXB0byBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZS5cbiovXG5mdW5jdGlvbiBjcmVhdGVFbnRyb3B5KGJ5dGVMZW5ndGgpIHtcblx0Y29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShieXRlTGVuZ3RoKTtcblx0Y29uc3QgeyBjcnlwdG8gfSA9IGdsb2JhbFRoaXM7XG5cdGlmICghY3J5cHRvKSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nIGNyeXB0byBtb2R1bGVcIik7XG5cdGlmICghY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXCIpO1xuXHRjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGJ5dGVzKTtcblx0cmV0dXJuIGJ5dGVzO1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGNyZWF0ZUVudHJvcHkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0by5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/devserver.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/helpers/devserver.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   devServerAvailable: () => (/* binding */ devServerAvailable),\n/* harmony export */   devServerUrl: () => (/* binding */ devServerUrl)\n/* harmony export */ });\n/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n\n\n\n//#region src/helpers/devserver.ts\n/**\n* Attempts to contact the dev server, returning a boolean indicating whether or\n* not it was successful.\n*\n* @example devServerUrl(process.env[envKeys.DevServerUrl], \"/your-path\")\n*/\nconst devServerAvailable = async (host = _consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultDevServerHost, fetch) => {\n\ttry {\n\t\tconst url = devServerUrl(host, \"/dev\");\n\t\tawait (await fetch(url.toString())).json();\n\t\treturn true;\n\t} catch (_e) {\n\t\treturn false;\n\t}\n};\n/**\n* devServerUrl returns a full URL for the given path name.\n*\n* Because Cloudflare/V8 platforms don't allow process.env, you are expected\n* to pass in the host from the dev server env key:\n*\n* @example devServerUrl(processEnv(envKeys.DevServerUrl), \"/your-path\")\n* @example devServerUrl(\"http://localhost:8288/\", \"/your-path\")\n*/\nconst devServerUrl = (host = devServerHost$1(), pathname = \"\") => {\n\treturn new URL(pathname, host.includes(\"://\") ? host : `http://${host}`);\n};\n/**\n* devServerHost exports the development server's domain by inspecting env\n* variables, or returns the default development server URL.\n*\n* This guarantees a specific URL as a string, as opposed to the env export\n* which only returns a value of the env var is set.\n*/\nconst devServerHost$1 = () => (0,_env_js__WEBPACK_IMPORTED_MODULE_1__.devServerHost)() || _consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultDevServerHost;\n\n//#endregion\n\n//# sourceMappingURL=devserver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2RldnNlcnZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1EO0FBQ1Y7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDREQUFvQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxLQUFLO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsc0RBQWEsTUFBTSw0REFBb0I7O0FBRXJFO0FBQzRDO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy9kZXZzZXJ2ZXIuanM/YWFjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZhdWx0RGV2U2VydmVySG9zdCB9IGZyb20gXCIuL2NvbnN0cy5qc1wiO1xuaW1wb3J0IHsgZGV2U2VydmVySG9zdCB9IGZyb20gXCIuL2Vudi5qc1wiO1xuXG4vLyNyZWdpb24gc3JjL2hlbHBlcnMvZGV2c2VydmVyLnRzXG4vKipcbiogQXR0ZW1wdHMgdG8gY29udGFjdCB0aGUgZGV2IHNlcnZlciwgcmV0dXJuaW5nIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgb3Jcbiogbm90IGl0IHdhcyBzdWNjZXNzZnVsLlxuKlxuKiBAZXhhbXBsZSBkZXZTZXJ2ZXJVcmwocHJvY2Vzcy5lbnZbZW52S2V5cy5EZXZTZXJ2ZXJVcmxdLCBcIi95b3VyLXBhdGhcIilcbiovXG5jb25zdCBkZXZTZXJ2ZXJBdmFpbGFibGUgPSBhc3luYyAoaG9zdCA9IGRlZmF1bHREZXZTZXJ2ZXJIb3N0LCBmZXRjaCkgPT4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IHVybCA9IGRldlNlcnZlclVybChob3N0LCBcIi9kZXZcIik7XG5cdFx0YXdhaXQgKGF3YWl0IGZldGNoKHVybC50b1N0cmluZygpKSkuanNvbigpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChfZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbi8qKlxuKiBkZXZTZXJ2ZXJVcmwgcmV0dXJucyBhIGZ1bGwgVVJMIGZvciB0aGUgZ2l2ZW4gcGF0aCBuYW1lLlxuKlxuKiBCZWNhdXNlIENsb3VkZmxhcmUvVjggcGxhdGZvcm1zIGRvbid0IGFsbG93IHByb2Nlc3MuZW52LCB5b3UgYXJlIGV4cGVjdGVkXG4qIHRvIHBhc3MgaW4gdGhlIGhvc3QgZnJvbSB0aGUgZGV2IHNlcnZlciBlbnYga2V5OlxuKlxuKiBAZXhhbXBsZSBkZXZTZXJ2ZXJVcmwocHJvY2Vzc0VudihlbnZLZXlzLkRldlNlcnZlclVybCksIFwiL3lvdXItcGF0aFwiKVxuKiBAZXhhbXBsZSBkZXZTZXJ2ZXJVcmwoXCJodHRwOi8vbG9jYWxob3N0OjgyODgvXCIsIFwiL3lvdXItcGF0aFwiKVxuKi9cbmNvbnN0IGRldlNlcnZlclVybCA9IChob3N0ID0gZGV2U2VydmVySG9zdCQxKCksIHBhdGhuYW1lID0gXCJcIikgPT4ge1xuXHRyZXR1cm4gbmV3IFVSTChwYXRobmFtZSwgaG9zdC5pbmNsdWRlcyhcIjovL1wiKSA/IGhvc3QgOiBgaHR0cDovLyR7aG9zdH1gKTtcbn07XG4vKipcbiogZGV2U2VydmVySG9zdCBleHBvcnRzIHRoZSBkZXZlbG9wbWVudCBzZXJ2ZXIncyBkb21haW4gYnkgaW5zcGVjdGluZyBlbnZcbiogdmFyaWFibGVzLCBvciByZXR1cm5zIHRoZSBkZWZhdWx0IGRldmVsb3BtZW50IHNlcnZlciBVUkwuXG4qXG4qIFRoaXMgZ3VhcmFudGVlcyBhIHNwZWNpZmljIFVSTCBhcyBhIHN0cmluZywgYXMgb3Bwb3NlZCB0byB0aGUgZW52IGV4cG9ydFxuKiB3aGljaCBvbmx5IHJldHVybnMgYSB2YWx1ZSBvZiB0aGUgZW52IHZhciBpcyBzZXQuXG4qL1xuY29uc3QgZGV2U2VydmVySG9zdCQxID0gKCkgPT4gZGV2U2VydmVySG9zdCgpIHx8IGRlZmF1bHREZXZTZXJ2ZXJIb3N0O1xuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGRldlNlcnZlckF2YWlsYWJsZSwgZGV2U2VydmVyVXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXZzZXJ2ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/devserver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/enum.js":
/*!**********************************************!*\
  !*** ./node_modules/inngest/helpers/enum.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enumFromValue: () => (/* binding */ enumFromValue)\n/* harmony export */ });\n//#region src/helpers/enum.ts\n/**\n* Returns the value of an enum from a string value.\n*\n* If the value given is not a value from the enum, `undefined` is returned.\n*/\nconst enumFromValue = (enumType, value) => {\n\tif (Object.values(enumType).includes(value)) return value;\n};\n\n//#endregion\n\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2VudW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L2hlbHBlcnMvZW51bS5qcz8zYzU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvaGVscGVycy9lbnVtLnRzXG4vKipcbiogUmV0dXJucyB0aGUgdmFsdWUgb2YgYW4gZW51bSBmcm9tIGEgc3RyaW5nIHZhbHVlLlxuKlxuKiBJZiB0aGUgdmFsdWUgZ2l2ZW4gaXMgbm90IGEgdmFsdWUgZnJvbSB0aGUgZW51bSwgYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4qL1xuY29uc3QgZW51bUZyb21WYWx1ZSA9IChlbnVtVHlwZSwgdmFsdWUpID0+IHtcblx0aWYgKE9iamVjdC52YWx1ZXMoZW51bVR5cGUpLmluY2x1ZGVzKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBlbnVtRnJvbVZhbHVlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/env.js":
/*!*********************************************!*\
  !*** ./node_modules/inngest/helpers/env.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mode: () => (/* binding */ Mode),\n/* harmony export */   allProcessEnv: () => (/* binding */ allProcessEnv),\n/* harmony export */   devServerHost: () => (/* binding */ devServerHost),\n/* harmony export */   getEnvironmentName: () => (/* binding */ getEnvironmentName),\n/* harmony export */   getFetch: () => (/* binding */ getFetch),\n/* harmony export */   getMode: () => (/* binding */ getMode),\n/* harmony export */   getPlatformName: () => (/* binding */ getPlatformName),\n/* harmony export */   getResponse: () => (/* binding */ getResponse),\n/* harmony export */   inngestHeaders: () => (/* binding */ inngestHeaders),\n/* harmony export */   parseAsBoolean: () => (/* binding */ parseAsBoolean),\n/* harmony export */   platformSupportsStreaming: () => (/* binding */ platformSupportsStreaming),\n/* harmony export */   processEnv: () => (/* binding */ processEnv)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n\n\n\n\n\n//#region src/helpers/env.ts\n/**\n* devServerHost returns the dev server host by searching for the INNGEST_DEVSERVER_URL\n* environment variable (plus project prefixces for eg. react, such as REACT_APP_INNGEST_DEVSERVER_URL).\n*\n* If not found this returns undefined, indicating that the env var has not been set.\n*\n* @example devServerHost()\n*/\nconst devServerHost = (env = allProcessEnv()) => {\n\tconst prefixes = [\"REACT_APP_\", \"NEXT_PUBLIC_\"];\n\treturn [_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestBaseUrl, _consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestDevMode].flatMap((key) => {\n\t\treturn prefixes.map((prefix) => {\n\t\t\treturn env[prefix + key];\n\t\t});\n\t}).find((v) => {\n\t\tif (!v) return;\n\t\ttry {\n\t\t\treturn Boolean(new URL(v));\n\t\t} catch {}\n\t});\n};\nconst checkFns = ((checks) => checks)({\n\tequals: (actual, expected) => actual === expected,\n\t\"starts with\": (actual, expected) => expected ? actual?.startsWith(expected) ?? false : false,\n\t\"is truthy\": (actual) => Boolean(actual),\n\t\"is truthy but not\": (actual, expected) => Boolean(actual) && actual !== expected\n});\nconst prodChecks = [\n\t[\n\t\t\"CF_PAGES\",\n\t\t\"equals\",\n\t\t\"1\"\n\t],\n\t[\n\t\t\"CONTEXT\",\n\t\t\"starts with\",\n\t\t\"prod\"\n\t],\n\t[\n\t\t\"ENVIRONMENT\",\n\t\t\"starts with\",\n\t\t\"prod\"\n\t],\n\t[\n\t\t\"NODE_ENV\",\n\t\t\"starts with\",\n\t\t\"prod\"\n\t],\n\t[\n\t\t\"VERCEL_ENV\",\n\t\t\"starts with\",\n\t\t\"prod\"\n\t],\n\t[\"DENO_DEPLOYMENT_ID\", \"is truthy\"],\n\t[\n\t\t_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.VercelEnvKey,\n\t\t\"is truthy but not\",\n\t\t\"development\"\n\t],\n\t[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.IsNetlify, \"is truthy\"],\n\t[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.IsRender, \"is truthy\"],\n\t[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.RailwayBranch, \"is truthy\"],\n\t[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.IsCloudflarePages, \"is truthy\"]\n];\nvar Mode = class {\n\ttype;\n\t/**\n\t* Whether the mode was explicitly set, or inferred from other sources.\n\t*/\n\tisExplicit;\n\texplicitDevUrl;\n\tenv;\n\tconstructor({ type, isExplicit, explicitDevUrl, env = allProcessEnv() }) {\n\t\tthis.env = env;\n\t\tthis.type = type;\n\t\tthis.isExplicit = isExplicit || Boolean(explicitDevUrl);\n\t\tthis.explicitDevUrl = explicitDevUrl;\n\t}\n\tget isDev() {\n\t\treturn this.type === \"dev\";\n\t}\n\tget isCloud() {\n\t\treturn this.type === \"cloud\";\n\t}\n\tget isInferred() {\n\t\treturn !this.isExplicit;\n\t}\n\t/**\n\t* If we are explicitly in a particular mode, retrieve the URL that we are\n\t* sure we should be using, not considering any environment variables or other\n\t* influences.\n\t*/\n\tgetExplicitUrl(defaultCloudUrl) {\n\t\tif (!this.isExplicit) return;\n\t\tif (this.explicitDevUrl) return this.explicitDevUrl.href;\n\t\tif (this.isCloud) return defaultCloudUrl;\n\t\tif (this.isDev) return _consts_js__WEBPACK_IMPORTED_MODULE_0__.defaultDevServerHost;\n\t}\n};\n/**\n* Returns the mode of the current environment, based off of either passed\n* environment variables or `process.env`, or explicit settings.\n*/\nconst getMode = ({ env = allProcessEnv(), client, explicitMode } = {}) => {\n\tif (explicitMode) return new Mode({\n\t\ttype: explicitMode,\n\t\tisExplicit: true,\n\t\tenv\n\t});\n\tif (client?.[\"mode\"].isExplicit) return client[\"mode\"];\n\tif (_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestDevMode in env) {\n\t\tif (typeof env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestDevMode] === \"string\") try {\n\t\t\tconst explicitDevUrl = new URL(env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestDevMode]);\n\t\t\treturn new Mode({\n\t\t\t\ttype: \"dev\",\n\t\t\t\tisExplicit: true,\n\t\t\t\texplicitDevUrl,\n\t\t\t\tenv\n\t\t\t});\n\t\t} catch {}\n\t\tconst envIsDev = parseAsBoolean(env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestDevMode]);\n\t\tif (typeof envIsDev === \"boolean\") return new Mode({\n\t\t\ttype: envIsDev ? \"dev\" : \"cloud\",\n\t\t\tisExplicit: true,\n\t\t\tenv\n\t\t});\n\t}\n\tconst isProd = prodChecks.some(([key, checkKey, expected]) => {\n\t\treturn checkFns[checkKey]((0,_strings_js__WEBPACK_IMPORTED_MODULE_1__.stringifyUnknown)(env[key]), expected);\n\t});\n\treturn new Mode({\n\t\ttype: isProd ? \"cloud\" : \"dev\",\n\t\tisExplicit: false,\n\t\tenv\n\t});\n};\n/**\n* getEnvironmentName returns the suspected branch name for this environment by\n* searching through a set of common environment variables.\n*\n* This could be used to determine if we're on a branch deploy or not, though it\n* should be noted that we don't know if this is the default branch or not.\n*/\nconst getEnvironmentName = (env = allProcessEnv()) => {\n\t/**\n\t* Order is important; more than one of these env vars may be set, so ensure\n\t* that we check the most specific, most reliable env vars first.\n\t*/\n\treturn env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.InngestEnvironment] || env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.BranchName] || env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.VercelBranch] || env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.NetlifyBranch] || env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.CloudflarePagesBranch] || env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.RenderBranch] || env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.RailwayBranch];\n};\nconst processEnv = (key) => {\n\treturn allProcessEnv()[key];\n};\n/**\n* allProcessEnv returns the current process environment variables, or an empty\n* object if they cannot be read, making sure we support environments other than\n* Node such as Deno, too.\n*\n* Using this ensures we don't dangerously access `process.env` in environments\n* where it may not be defined, such as Deno or the browser.\n*/\nconst allProcessEnv = () => {\n\ttry {\n\t\tif (process.env) return process.env;\n\t} catch (_err) {}\n\ttry {\n\t\tconst env = Deno.env.toObject();\n\t\tif (env) return env;\n\t} catch (_err) {}\n\ttry {\n\t\tconst env = Netlify.env.toObject();\n\t\tif (env) return env;\n\t} catch (_err) {}\n\treturn {};\n};\n/**\n* Generate a standardised set of headers based on input and environment\n* variables.\n*\n*\n*/\nconst inngestHeaders = (opts) => {\n\tconst sdkVersion = `inngest-js:v${_version_js__WEBPACK_IMPORTED_MODULE_2__.version}`;\n\tconst headers = {\n\t\t\"Content-Type\": \"application/json\",\n\t\t\"User-Agent\": sdkVersion,\n\t\t[_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.SdkVersion]: sdkVersion\n\t};\n\tif (opts?.framework) headers[_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.Framework] = opts.framework;\n\tif (opts?.expectedServerKind) headers[_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.InngestExpectedServerKind] = opts.expectedServerKind;\n\tconst env = {\n\t\t...allProcessEnv(),\n\t\t...opts?.env\n\t};\n\tconst inngestEnv = opts?.inngestEnv || getEnvironmentName(env);\n\tif (inngestEnv) headers[_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.Environment] = inngestEnv;\n\tconst platform = getPlatformName(env);\n\tif (platform) headers[_consts_js__WEBPACK_IMPORTED_MODULE_0__.headerKeys.Platform] = platform;\n\treturn {\n\t\t...headers,\n\t\t...opts?.client?.[\"headers\"],\n\t\t...opts?.extras\n\t};\n};\n/**\n* A set of checks that, given an environment, will return `true` if the current\n* environment is running on the platform with the given name.\n*/\nconst platformChecks = {\n\tvercel: (env) => env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.IsVercel] === \"1\" || typeof EdgeRuntime === \"string\",\n\tnetlify: (env) => env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.IsNetlify] === \"true\",\n\t\"cloudflare-pages\": (env) => env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.IsCloudflarePages] === \"1\",\n\trender: (env) => env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.IsRender] === \"true\",\n\trailway: (env) => Boolean(env[_consts_js__WEBPACK_IMPORTED_MODULE_0__.envKeys.RailwayEnvironment])\n};\n/**\n* A set of checks that, given an environment, will return `true` if the current\n* environment and platform supports streaming responses back to Inngest.\n*\n* Streaming capability is both framework and platform-based. Frameworks are\n* supported in serve handlers, and platforms are checked here.\n*\n* As such, this record declares which platforms we explicitly support for\n* streaming and is used by {@link platformSupportsStreaming}.\n*/\nconst streamingChecks = {\n\tvercel: (_framework, _env) => typeof EdgeRuntime === \"string\",\n\t\"cloudflare-pages\": () => true\n};\nconst getPlatformName = (env) => {\n\treturn Object.keys(platformChecks).find((key) => {\n\t\treturn platformChecks[key](env);\n\t});\n};\n/**\n* Returns `true` if we believe the current environment supports streaming\n* responses back to Inngest.\n*\n* We run a check directly related to the platform we believe we're running on,\n* usually based on environment variables.\n*/\nconst platformSupportsStreaming = (framework, env = allProcessEnv()) => {\n\treturn streamingChecks[getPlatformName(env)]?.(framework, env) ?? false;\n};\n/**\n* A unique symbol used to mark a custom fetch implementation. We wrap the\n* implementations to provide some extra control when handling errors.\n*/\nconst CUSTOM_FETCH_MARKER = Symbol(\"Custom fetch implementation\");\n/**\n* Given a potential fetch function, return the fetch function to use based on\n* this and the environment.\n*/\nconst getFetch = (givenFetch) => {\n\t/**\n\t* If we've explicitly been given a fetch function, use that.\n\t*/\n\tif (givenFetch) {\n\t\tif (CUSTOM_FETCH_MARKER in givenFetch) return givenFetch;\n\t\t/**\n\t\t* We wrap the given fetch function to provide some extra control when\n\t\t* handling errors.\n\t\t*/\n\t\tconst customFetch = async (...args) => {\n\t\t\ttry {\n\t\t\t\treturn await givenFetch(...args);\n\t\t\t} catch (err) {\n\t\t\t\t/**\n\t\t\t\t* Capture warnings that are not simple fetch failures and highlight\n\t\t\t\t* them for the user.\n\t\t\t\t*\n\t\t\t\t* We also use this opportunity to log the causing error, as code higher\n\t\t\t\t* up the stack will likely abstract this.\n\t\t\t\t*/\n\t\t\t\tif (!(err instanceof Error) || !err.message?.startsWith(\"fetch failed\")) {\n\t\t\t\t\tconsole.warn(\"A request failed when using a custom fetch implementation; this may be a misconfiguration. Make sure that your fetch client is correctly bound to the global scope.\");\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t}\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t* Mark the custom fetch implementation so that we can identify it later, in\n\t\t* addition to adding some runtime properties to it to make it seem as much\n\t\t* like the original fetch as possible.\n\t\t*/\n\t\tObject.defineProperties(customFetch, {\n\t\t\t[CUSTOM_FETCH_MARKER]: {},\n\t\t\tname: { value: givenFetch.name },\n\t\t\tlength: { value: givenFetch.length }\n\t\t});\n\t\treturn customFetch;\n\t}\n\t/**\n\t* Browser or Node 18+\n\t*/\n\ttry {\n\t\tif (typeof globalThis !== \"undefined\" && \"fetch\" in globalThis) return fetch.bind(globalThis);\n\t} catch (_err) {}\n\t/**\n\t* Existing polyfilled fetch\n\t*/\n\tif (typeof fetch !== \"undefined\") return fetch;\n\t/**\n\t* Environments where fetch cannot be found and must be polyfilled\n\t*/\n\treturn (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_3__.__require)(\"cross-fetch\");\n};\n/**\n* If `Response` isn't included in this environment, it's probably an earlier\n* Node env that isn't already polyfilling. This function returns either the\n* native `Response` or a polyfilled one.\n*/\nconst getResponse = () => {\n\tif (typeof Response !== \"undefined\") return Response;\n\treturn (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_3__.__require)(\"cross-fetch\").Response;\n};\n/**\n* Given an unknown value, try to parse it as a `boolean`. Useful for parsing\n* environment variables that could be a selection of different values such as\n* `\"true\"`, `\"1\"`.\n*\n* If the value could not be confidently parsed as a `boolean` or was seen to be\n* `undefined`, this function returns `undefined`.\n*/\nconst parseAsBoolean = (value) => {\n\tif (typeof value === \"boolean\") return value;\n\tif (typeof value === \"number\") return Boolean(value);\n\tif (typeof value === \"string\") {\n\t\tconst trimmed = value.trim().toLowerCase();\n\t\tif (trimmed === \"undefined\") return;\n\t\tif ([\"true\", \"1\"].includes(trimmed)) return true;\n\t\treturn false;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=env.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/errors.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/errors.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrCode: () => (/* binding */ ErrCode),\n/* harmony export */   deserializeError: () => (/* binding */ deserializeError$1),\n/* harmony export */   errors_exports: () => (/* binding */ errors_exports),\n/* harmony export */   fixEventKeyMissingSteps: () => (/* binding */ fixEventKeyMissingSteps),\n/* harmony export */   functionStoppedRunningErr: () => (/* binding */ functionStoppedRunningErr),\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   minifyPrettyError: () => (/* binding */ minifyPrettyError),\n/* harmony export */   prettyError: () => (/* binding */ prettyError),\n/* harmony export */   rethrowError: () => (/* binding */ rethrowError),\n/* harmony export */   serializeError: () => (/* binding */ serializeError$1)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var _components_NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chalk */ \"(rsc)/./node_modules/chalk/source/index.js\");\n/* harmony import */ var json_stringify_safe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! json-stringify-safe */ \"(rsc)/./node_modules/json-stringify-safe/stringify.js\");\n/* harmony import */ var serialize_error_cjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! serialize-error-cjs */ \"(rsc)/./node_modules/serialize-error-cjs/dist/index.js\");\n/* harmony import */ var strip_ansi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! strip-ansi */ \"(rsc)/./node_modules/inngest/node_modules/strip-ansi/index.js\");\n\n\n\n\n\n\n\n\n//#region src/helpers/errors.ts\nvar errors_exports = /* @__PURE__ */ (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_5__.__export)({\n\tErrCode: () => ErrCode,\n\tOutgoingResultError: () => OutgoingResultError,\n\tdeserializeError: () => deserializeError$1,\n\tfixEventKeyMissingSteps: () => fixEventKeyMissingSteps,\n\tfunctionStoppedRunningErr: () => functionStoppedRunningErr,\n\tgetErrorMessage: () => getErrorMessage,\n\tisSerializedError: () => isSerializedError,\n\tminifyPrettyError: () => minifyPrettyError,\n\tprettyError: () => prettyError,\n\tprettyErrorSplitter: () => prettyErrorSplitter,\n\trethrowError: () => rethrowError,\n\tserializeError: () => serializeError$1\n});\nconst SERIALIZED_KEY = \"__serialized\";\nconst SERIALIZED_VALUE = true;\n/**\n* Add first-class support for certain errors that we control, in addition to\n* built-in errors such as `TypeError`.\n*\n* Adding these allows these non-standard errors to be correctly serialized,\n* sent to Inngest, then deserialized back into the correct error type for users\n* to react to correctly.\n*\n* Note that these errors only support `message?: string | undefined` as the\n* input; more custom errors are not supported with this current strategy.\n*/\nserialize_error_cjs__WEBPACK_IMPORTED_MODULE_3__.errorConstructors.set(\"NonRetriableError\", _components_NonRetriableError_js__WEBPACK_IMPORTED_MODULE_6__.NonRetriableError);\n/**\n* Serialise an error to a serialized JSON string.\n*\n* Errors do not serialise nicely to JSON, so we use this function to convert\n* them to a serialized JSON string. Doing this is also non-trivial for some\n* errors, so we use the `serialize-error` package to do it for us.\n*\n* See {@link https://www.npmjs.com/package/serialize-error}\n*\n* This function is a small wrapper around that package to also add a `type`\n* property to the serialised error, so that we can distinguish between\n* serialised errors and other objects.\n*\n* Will not reserialise existing serialised errors.\n*/\nconst serializeError$1 = (subject, allowUnknown = false) => {\n\ttry {\n\t\tconst existingSerializedError = isSerializedError(subject);\n\t\tif (existingSerializedError) return existingSerializedError;\n\t\tif (typeof subject === \"object\" && subject !== null) {\n\t\t\tconst serializedErr = (0,serialize_error_cjs__WEBPACK_IMPORTED_MODULE_3__.serializeError)(subject);\n\t\t\tif (!serializedErr.name && allowUnknown) return subject;\n\t\t\tconst ret = {\n\t\t\t\t...serializedErr,\n\t\t\t\tname: serializedErr.name || \"Error\",\n\t\t\t\tmessage: serializedErr.message || json_stringify_safe__WEBPACK_IMPORTED_MODULE_2__(subject) || \"Unknown error; error serialization could not find a message.\",\n\t\t\t\tstack: serializedErr.stack || \"\",\n\t\t\t\t[SERIALIZED_KEY]: SERIALIZED_VALUE\n\t\t\t};\n\t\t\tlet target = ret;\n\t\t\tconst maxDepth = 5;\n\t\t\tfor (let i = 0; i < maxDepth; i++) {\n\t\t\t\tif (typeof target === \"object\" && target !== null && \"cause\" in target && target.cause) {\n\t\t\t\t\ttarget = target.cause = serializeError$1(target.cause, true);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t\tthrow new Error(\"Error is not an object; strange throw value.\");\n\t} catch {\n\t\tif (allowUnknown) return subject;\n\t\ttry {\n\t\t\treturn {\n\t\t\t\t...serializeError$1(new Error(typeof subject === \"string\" ? subject : json_stringify_safe__WEBPACK_IMPORTED_MODULE_2__(subject)), false),\n\t\t\t\tstack: \"\",\n\t\t\t\t[SERIALIZED_KEY]: SERIALIZED_VALUE\n\t\t\t};\n\t\t} catch {\n\t\t\treturn {\n\t\t\t\tname: \"Could not serialize source error\",\n\t\t\t\tmessage: \"Serializing the source error failed.\",\n\t\t\t\tstack: \"\",\n\t\t\t\t[SERIALIZED_KEY]: SERIALIZED_VALUE\n\t\t\t};\n\t\t}\n\t}\n};\n/**\n* Check if an object or a string is a serialised error created by\n* {@link serializeError}.\n*/\nconst isSerializedError = (value) => {\n\ttry {\n\t\tif (typeof value === \"string\") {\n\t\t\tconst parsed = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t[SERIALIZED_KEY]: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(SERIALIZED_VALUE),\n\t\t\t\tname: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([...Array.from(serialize_error_cjs__WEBPACK_IMPORTED_MODULE_3__.errorConstructors.keys())]),\n\t\t\t\tmessage: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\t\t\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string()\n\t\t\t}).passthrough().safeParse(JSON.parse(value));\n\t\t\tif (parsed.success) return parsed.data;\n\t\t}\n\t\tif (typeof value === \"object\" && value !== null) {\n\t\t\tif (Object.hasOwn(value, SERIALIZED_KEY) && value[SERIALIZED_KEY] === SERIALIZED_VALUE) return value;\n\t\t}\n\t} catch {}\n};\n/**\n* Deserialise an error created by {@link serializeError}.\n*\n* Ensures we only deserialise errors that meet a minimum level of\n* applicability, inclusive of error handling to ensure that badly serialized\n* errors are still handled.\n*/\nconst deserializeError$1 = (subject, allowUnknown = false) => {\n\tconst requiredFields = [\"name\", \"message\"];\n\ttry {\n\t\tif (!requiredFields.every((field) => {\n\t\t\treturn Object.hasOwn(subject, field);\n\t\t})) throw new Error();\n\t\tconst deserializedErr = (0,serialize_error_cjs__WEBPACK_IMPORTED_MODULE_3__.deserializeError)(subject);\n\t\tif (\"cause\" in deserializedErr) deserializedErr.cause = deserializeError$1(deserializedErr.cause, true);\n\t\treturn deserializedErr;\n\t} catch {\n\t\tif (allowUnknown) return subject;\n\t\tconst err = /* @__PURE__ */ new Error(\"Unknown error; could not reserialize\");\n\t\t/**\n\t\t* Remove the stack so that it's not misleadingly shown as the Inngest\n\t\t* internals.\n\t\t*/\n\t\terr.stack = void 0;\n\t\treturn err;\n\t}\n};\nlet ErrCode = /* @__PURE__ */ function(ErrCode$1) {\n\tErrCode$1[\"NESTING_STEPS\"] = \"NESTING_STEPS\";\n\t/**\n\t* Legacy v0 execution error code for when a function has changed and no\n\t* longer matches its in-progress state.\n\t*\n\t* @deprecated Not for use in latest execution method.\n\t*/\n\tErrCode$1[\"NON_DETERMINISTIC_FUNCTION\"] = \"NON_DETERMINISTIC_FUNCTION\";\n\t/**\n\t* Legacy v0 execution error code for when a function is found to be using\n\t* async actions after memoziation has occurred, which v0 doesn't support.\n\t*\n\t* @deprecated Not for use in latest execution method.\n\t*/\n\tErrCode$1[\"ASYNC_DETECTED_AFTER_MEMOIZATION\"] = \"ASYNC_DETECTED_AFTER_MEMOIZATION\";\n\t/**\n\t* Legacy v0 execution error code for when a function is found to be using\n\t* steps after a non-step async action has occurred.\n\t*\n\t* @deprecated Not for use in latest execution method.\n\t*/\n\tErrCode$1[\"STEP_USED_AFTER_ASYNC\"] = \"STEP_USED_AFTER_ASYNC\";\n\tErrCode$1[\"AUTOMATIC_PARALLEL_INDEXING\"] = \"AUTOMATIC_PARALLEL_INDEXING\";\n\treturn ErrCode$1;\n}({});\nconst prettyErrorSplitter = \"=================================================\";\n/**\n* Given an unknown `err`, mutate it to minify any pretty errors that it\n* contains.\n*/\nconst minifyPrettyError = (err) => {\n\ttry {\n\t\tif (!isError(err)) return err;\n\t\tif (!err.message.includes(prettyErrorSplitter)) return err;\n\t\tconst sanitizedMessage = strip_ansi__WEBPACK_IMPORTED_MODULE_4__(err.message);\n\t\tconst message = sanitizedMessage.split(\"  \")[1]?.split(\"\\n\")[0]?.trim() || err.message;\n\t\terr.message = [sanitizedMessage.split(\"\\n\\nCode: \")[1]?.split(\"\\n\\n\")[0]?.trim() || void 0, message].filter(Boolean).join(\" - \");\n\t\tif (err.stack) {\n\t\t\tconst stackRest = strip_ansi__WEBPACK_IMPORTED_MODULE_4__(err.stack).split(`${prettyErrorSplitter}\\n`).slice(2).join(\"\\n\");\n\t\t\terr.stack = `${err.name}: ${err.message}\\n${stackRest}`;\n\t\t}\n\t\treturn err;\n\t} catch (_noopErr) {\n\t\treturn err;\n\t}\n};\n/**\n* Given an `err`, return a boolean representing whether it is in the shape of\n* an `Error` or not.\n*/\nconst isError = (err) => {\n\ttry {\n\t\tif (err instanceof Error) return true;\n\t\tif (typeof err !== \"object\" || err === null) return false;\n\t\treturn Object.hasOwn(err, \"name\") && Object.hasOwn(err, \"message\");\n\t} catch (_noopErr) {\n\t\treturn false;\n\t}\n};\n/**\n* Given an `unknown` object, retrieve the `message` property from it, or fall\n* back to the `fallback` string if it doesn't exist or is empty.\n*/\nconst getErrorMessage = (err, fallback) => {\n\tconst { message } = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ message: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1) }).catch({ message: fallback }).parse(err);\n\treturn message;\n};\n/**\n* Given a {@link PrettyError}, return a nicely-formatted string ready to log\n* or throw.\n*\n* Useful for ensuring that errors are logged in a consistent, helpful format\n* across the SDK by prompting for key pieces of information.\n*/\nconst prettyError = ({ type = \"error\", whatHappened, otherwise, reassurance, toFixNow, why, consequences, stack, code }) => {\n\tconst { icon, colorFn } = {\n\t\terror: {\n\t\t\ticon: \"❌\",\n\t\t\tcolorFn: chalk__WEBPACK_IMPORTED_MODULE_1__.red\n\t\t},\n\t\twarn: {\n\t\t\ticon: \"⚠️\",\n\t\t\tcolorFn: chalk__WEBPACK_IMPORTED_MODULE_1__.yellow\n\t\t}\n\t}[type];\n\tlet header = `${icon}  ${chalk__WEBPACK_IMPORTED_MODULE_1__.bold.underline(whatHappened.trim())}`;\n\tif (stack) header += \"\\n\" + [...(/* @__PURE__ */ new Error()).stack?.split(\"\\n\").slice(1).filter(Boolean) || []].join(\"\\n\");\n\tlet toFixNowStr = (Array.isArray(toFixNow) ? toFixNow.map((s) => s.trim()).filter(Boolean).map((s, i) => `\\t${i + 1}. ${s}`).join(\"\\n\") : toFixNow?.trim()) ?? \"\";\n\tif (Array.isArray(toFixNow) && toFixNowStr) toFixNowStr = `To fix this, you can take one of the following courses of action:\\n\\n${toFixNowStr}`;\n\tlet body = [\n\t\treassurance?.trim(),\n\t\twhy?.trim(),\n\t\tconsequences?.trim()\n\t].filter(Boolean).join(\" \");\n\tbody += body ? `\\n\\n${toFixNowStr}` : toFixNowStr;\n\tconst trailer = [otherwise?.trim()].filter(Boolean).join(\" \");\n\tconst message = [\n\t\tprettyErrorSplitter,\n\t\theader,\n\t\tbody,\n\t\ttrailer,\n\t\tcode ? `Code: ${code}` : \"\",\n\t\tprettyErrorSplitter\n\t].filter(Boolean).join(\"\\n\\n\");\n\treturn colorFn(message);\n};\nconst fixEventKeyMissingSteps = [\n\t\"Set the `INNGEST_EVENT_KEY` environment variable\",\n\t`Pass a key to the \\`new Inngest()\\` constructor using the \\`eventKey\\` option`,\n\t`Use \\`inngest.setEventKey()\\` at runtime`\n];\n/**\n* An error that, when thrown, indicates internally that an outgoing operation\n* contains an error.\n*\n* We use this because serialized `data` sent back to Inngest may differ from\n* the error instance itself due to middleware.\n*\n* @internal\n*/\nvar OutgoingResultError = class extends Error {\n\tresult;\n\tconstructor(result) {\n\t\tsuper(\"OutgoingOpError\");\n\t\tthis.result = result;\n\t}\n};\n/**\n* Create a function that will rethrow an error with a prefix added to the\n* message.\n*\n* Useful for adding context to errors that are rethrown.\n*\n* @example\n* ```ts\n* await doSomeAction().catch(rethrowError(\"Failed to do some action\"));\n* ```\n*/\nconst rethrowError = (prefix) => {\n\treturn (err) => {\n\t\ttry {\n\t\t\terr.message &&= `${prefix}; ${err.message}`;\n\t\t} catch (_noopErr) {} finally {\n\t\t\tthrow err;\n\t\t}\n\t};\n};\n/**\n* Legacy v0 execution error for functions that don't support mixing steps and\n* regular async actions.\n*/\nconst functionStoppedRunningErr = (code) => {\n\treturn prettyError({\n\t\twhatHappened: \"Your function was stopped from running\",\n\t\twhy: \"We detected a mix of asynchronous logic, some using step tooling and some not.\",\n\t\tconsequences: \"This can cause unexpected behaviour when a function is paused and resumed and is therefore strongly discouraged; we stopped your function to ensure nothing unexpected happened!\",\n\t\tstack: true,\n\t\ttoFixNow: \"Ensure that your function is either entirely step-based or entirely non-step-based, by either wrapping all asynchronous logic in `step.run()` calls or by removing all `step.*()` calls.\",\n\t\totherwise: \"For more information on why step functions work in this manner, see https://www.inngest.com/docs/functions/multi-step#gotchas\",\n\t\tcode\n\t});\n};\n\n//#endregion\n\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/functions.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/helpers/functions.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheFn: () => (/* binding */ cacheFn),\n/* harmony export */   fetchAllFnData: () => (/* binding */ fetchAllFnData),\n/* harmony export */   parseFnData: () => (/* binding */ parseFnData),\n/* harmony export */   undefinedToNull: () => (/* binding */ undefinedToNull),\n/* harmony export */   waterfall: () => (/* binding */ waterfall)\n/* harmony export */ });\n/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/* harmony import */ var _api_schema_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/schema.js */ \"(rsc)/./node_modules/inngest/api/schema.js\");\n/* harmony import */ var _components_execution_InngestExecution_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n\n\n\n\n\n\n\n//#region src/helpers/functions.ts\n/**\n* Wraps a function with a cache. When the returned function is run, it will\n* cache the result and return it on subsequent calls.\n*/\nconst cacheFn = (fn) => {\n\tconst key = \"value\";\n\tconst cache = /* @__PURE__ */ new Map();\n\treturn ((...args) => {\n\t\tif (!cache.has(key)) cache.set(key, fn(...args));\n\t\treturn cache.get(key);\n\t});\n};\n/**\n* Given an array of functions, return a new function that will run each\n* function in series and return the result of the final function. Regardless of\n* if the functions are synchronous or asynchronous, they'll be made into an\n* async promise chain.\n*\n* If an error is thrown, the waterfall will stop and return the error.\n*\n* Because this needs to support both sync and async functions, it only allows\n* functions that accept a single argument.\n*/\nconst waterfall = (fns, transform) => {\n\treturn (...args) => {\n\t\treturn fns.reduce(async (acc, fn) => {\n\t\t\tconst prev = await acc;\n\t\t\tconst output = await fn(prev);\n\t\t\tif (transform) return await transform(prev, output);\n\t\t\tif (typeof output === \"undefined\") return prev;\n\t\t\treturn output;\n\t\t}, Promise.resolve(args[0]));\n\t};\n};\n/**\n* Given a value `v`, return `v` if it's not undefined, otherwise return `null`.\n*/\nconst undefinedToNull = (v) => {\n\treturn typeof v === \"undefined\" ? null : v;\n};\nconst fnDataVersionSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({ version: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(-1).or(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(0)).or(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(1)).or(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(2)).optional().transform((v) => {\n\tif (typeof v === \"undefined\") {\n\t\tconsole.debug(`No request version specified by executor; defaulting to v${_components_execution_InngestExecution_js__WEBPACK_IMPORTED_MODULE_1__.PREFERRED_EXECUTION_VERSION}`);\n\t\treturn _components_execution_InngestExecution_js__WEBPACK_IMPORTED_MODULE_1__.PREFERRED_EXECUTION_VERSION;\n\t}\n\treturn v === -1 ? _components_execution_InngestExecution_js__WEBPACK_IMPORTED_MODULE_1__.PREFERRED_EXECUTION_VERSION : v;\n}) });\nconst parseFnData = (data) => {\n\tlet version;\n\ttry {\n\t\t({version} = fnDataVersionSchema.parse(data));\n\t\treturn {\n\t\t\t[_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V0]: () => ({\n\t\t\t\tversion: _consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V0,\n\t\t\t\t...zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\tevent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n\t\t\t\t\tevents: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any())).default([]),\n\t\t\t\t\tsteps: _api_schema_js__WEBPACK_IMPORTED_MODULE_3__.stepsSchemas[_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V0],\n\t\t\t\t\tctx: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\t\trun_id: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\t\t\t\t\tattempt: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().default(0),\n\t\t\t\t\t\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\t\t\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullable().transform((v) => Array.isArray(v) ? v : []),\n\t\t\t\t\t\t\tcurrent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number()\n\t\t\t\t\t\t}).passthrough().optional().nullable()\n\t\t\t\t\t}).optional().nullable(),\n\t\t\t\t\tuse_api: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false)\n\t\t\t\t}).parse(data)\n\t\t\t}),\n\t\t\t[_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V1]: () => ({\n\t\t\t\tversion: _consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V1,\n\t\t\t\t...zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\tevent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n\t\t\t\t\tevents: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any())).default([]),\n\t\t\t\t\tsteps: _api_schema_js__WEBPACK_IMPORTED_MODULE_3__.stepsSchemas[_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V1],\n\t\t\t\t\tctx: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\t\trun_id: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\t\t\t\t\tattempt: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().default(0),\n\t\t\t\t\t\tdisable_immediate_execution: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n\t\t\t\t\t\tuse_api: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n\t\t\t\t\t\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\t\t\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullable().transform((v) => Array.isArray(v) ? v : []),\n\t\t\t\t\t\t\tcurrent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number()\n\t\t\t\t\t\t}).passthrough().optional().nullable()\n\t\t\t\t\t}).optional().nullable()\n\t\t\t\t}).parse(data)\n\t\t\t}),\n\t\t\t[_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V2]: () => ({\n\t\t\t\tversion: _consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V2,\n\t\t\t\t...zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\tevent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n\t\t\t\t\tevents: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any())).default([]),\n\t\t\t\t\tsteps: _api_schema_js__WEBPACK_IMPORTED_MODULE_3__.stepsSchemas[_consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V2],\n\t\t\t\t\tctx: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\t\trun_id: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\t\t\t\t\tattempt: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().default(0),\n\t\t\t\t\t\tdisable_immediate_execution: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n\t\t\t\t\t\tuse_api: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n\t\t\t\t\t\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\t\t\t\t\t\t\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string()).nullable().transform((v) => Array.isArray(v) ? v : []),\n\t\t\t\t\t\t\tcurrent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number()\n\t\t\t\t\t\t}).passthrough().optional().nullable()\n\t\t\t\t\t}).optional().nullable()\n\t\t\t\t}).parse(data)\n\t\t\t})\n\t\t}[version]();\n\t} catch (err$1) {\n\t\tthrow new Error(parseFailureErr(err$1));\n\t}\n};\nconst fetchAllFnData = async ({ data, api, version }) => {\n\tconst result = { ...data };\n\ttry {\n\t\tif (result.version === _consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V0 && result.use_api || result.version === _consts_js__WEBPACK_IMPORTED_MODULE_2__.ExecutionVersion.V1 && result.ctx?.use_api) {\n\t\t\tif (!result.ctx?.run_id) return (0,_types_js__WEBPACK_IMPORTED_MODULE_4__.err)((0,_errors_js__WEBPACK_IMPORTED_MODULE_5__.prettyError)({\n\t\t\t\twhatHappened: \"failed to attempt retrieving data from API\",\n\t\t\t\tconsequences: \"function execution can't continue\",\n\t\t\t\twhy: \"run_id is missing from context\",\n\t\t\t\tstack: true\n\t\t\t}));\n\t\t\tconst [evtResp, stepResp] = await Promise.all([api.getRunBatch(result.ctx.run_id), api.getRunSteps(result.ctx.run_id, version)]);\n\t\t\tif (evtResp.ok) result.events = evtResp.value;\n\t\t\telse return (0,_types_js__WEBPACK_IMPORTED_MODULE_4__.err)((0,_errors_js__WEBPACK_IMPORTED_MODULE_5__.prettyError)({\n\t\t\t\twhatHappened: \"failed to retrieve list of events\",\n\t\t\t\tconsequences: \"function execution can't continue\",\n\t\t\t\twhy: evtResp.error?.error,\n\t\t\t\tstack: true\n\t\t\t}));\n\t\t\tif (stepResp.ok) result.steps = stepResp.value;\n\t\t\telse return (0,_types_js__WEBPACK_IMPORTED_MODULE_4__.err)((0,_errors_js__WEBPACK_IMPORTED_MODULE_5__.prettyError)({\n\t\t\t\twhatHappened: \"failed to retrieve steps for function run\",\n\t\t\t\tconsequences: \"function execution can't continue\",\n\t\t\t\twhy: stepResp.error?.error,\n\t\t\t\tstack: true\n\t\t\t}));\n\t\t}\n\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_4__.ok)(result);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn (0,_types_js__WEBPACK_IMPORTED_MODULE_4__.err)(parseFailureErr(error));\n\t}\n};\nconst parseFailureErr = (err$1) => {\n\tlet why;\n\tif (err$1 instanceof zod_v3__WEBPACK_IMPORTED_MODULE_0__.ZodError) why = err$1.toString();\n\treturn (0,_errors_js__WEBPACK_IMPORTED_MODULE_5__.prettyError)({\n\t\twhatHappened: \"Failed to parse data from executor.\",\n\t\tconsequences: \"Function execution can't continue.\",\n\t\ttoFixNow: \"Make sure that your API is set up to parse incoming request bodies as JSON, like body-parser for Express (https://expressjs.com/en/resources/middleware/body-parser.html).\",\n\t\tstack: true,\n\t\twhy\n\t});\n};\n\n//#endregion\n\n//# sourceMappingURL=functions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/net.js":
/*!*********************************************!*\
  !*** ./node_modules/inngest/helpers/net.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchWithAuthFallback: () => (/* binding */ fetchWithAuthFallback),\n/* harmony export */   signDataWithKey: () => (/* binding */ signDataWithKey)\n/* harmony export */ });\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var canonicalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! canonicalize */ \"(rsc)/./node_modules/canonicalize/lib/canonicalize.js\");\n\n\n\n//#region src/helpers/net.ts\nconst { hmac, sha256 } = hash_js__WEBPACK_IMPORTED_MODULE_0__;\n/**\n* Send an HTTP request with the given signing key. If the response is a 401 or\n* 403, then try again with the fallback signing key\n*/\nasync function fetchWithAuthFallback({ authToken, authTokenFallback, fetch, options, url }) {\n\tlet res = await fetch(url, {\n\t\t...options,\n\t\theaders: {\n\t\t\t...options?.headers,\n\t\t\tAuthorization: `Bearer ${authToken}`\n\t\t}\n\t});\n\tif ([401, 403].includes(res.status) && authTokenFallback) res = await fetch(url, {\n\t\t...options,\n\t\theaders: {\n\t\t\t...options?.headers,\n\t\t\tAuthorization: `Bearer ${authTokenFallback}`\n\t\t}\n\t});\n\treturn res;\n}\nfunction signDataWithKey(data, signingKey, ts) {\n\tconst encoded = typeof data === \"string\" ? data : canonicalize__WEBPACK_IMPORTED_MODULE_1__(data);\n\tconst key = signingKey.replace(/signkey-\\w+-/, \"\");\n\treturn hmac(sha256, key).update(encoded).update(ts).digest(\"hex\");\n}\n\n//#endregion\n\n//# sourceMappingURL=net.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL25ldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZCO0FBQ1c7O0FBRXhDO0FBQ0EsUUFBUSxlQUFlLEVBQUUsb0NBQU07QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsbURBQW1EO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCx5Q0FBWTtBQUMvRDtBQUNBO0FBQ0E7O0FBRUE7QUFDa0Q7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL25ldC5qcz9mNzU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBoYXNoanMgZnJvbSBcImhhc2guanNcIjtcbmltcG9ydCBjYW5vbmljYWxpemUgZnJvbSBcImNhbm9uaWNhbGl6ZVwiO1xuXG4vLyNyZWdpb24gc3JjL2hlbHBlcnMvbmV0LnRzXG5jb25zdCB7IGhtYWMsIHNoYTI1NiB9ID0gaGFzaGpzO1xuLyoqXG4qIFNlbmQgYW4gSFRUUCByZXF1ZXN0IHdpdGggdGhlIGdpdmVuIHNpZ25pbmcga2V5LiBJZiB0aGUgcmVzcG9uc2UgaXMgYSA0MDEgb3JcbiogNDAzLCB0aGVuIHRyeSBhZ2FpbiB3aXRoIHRoZSBmYWxsYmFjayBzaWduaW5nIGtleVxuKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoV2l0aEF1dGhGYWxsYmFjayh7IGF1dGhUb2tlbiwgYXV0aFRva2VuRmFsbGJhY2ssIGZldGNoLCBvcHRpb25zLCB1cmwgfSkge1xuXHRsZXQgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7XG5cdFx0Li4ub3B0aW9ucyxcblx0XHRoZWFkZXJzOiB7XG5cdFx0XHQuLi5vcHRpb25zPy5oZWFkZXJzLFxuXHRcdFx0QXV0aG9yaXphdGlvbjogYEJlYXJlciAke2F1dGhUb2tlbn1gXG5cdFx0fVxuXHR9KTtcblx0aWYgKFs0MDEsIDQwM10uaW5jbHVkZXMocmVzLnN0YXR1cykgJiYgYXV0aFRva2VuRmFsbGJhY2spIHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuXHRcdC4uLm9wdGlvbnMsXG5cdFx0aGVhZGVyczoge1xuXHRcdFx0Li4ub3B0aW9ucz8uaGVhZGVycyxcblx0XHRcdEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthdXRoVG9rZW5GYWxsYmFja31gXG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHNpZ25EYXRhV2l0aEtleShkYXRhLCBzaWduaW5nS2V5LCB0cykge1xuXHRjb25zdCBlbmNvZGVkID0gdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyBkYXRhIDogY2Fub25pY2FsaXplKGRhdGEpO1xuXHRjb25zdCBrZXkgPSBzaWduaW5nS2V5LnJlcGxhY2UoL3NpZ25rZXktXFx3Ky0vLCBcIlwiKTtcblx0cmV0dXJuIGhtYWMoc2hhMjU2LCBrZXkpLnVwZGF0ZShlbmNvZGVkKS51cGRhdGUodHMpLmRpZ2VzdChcImhleFwiKTtcbn1cblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBmZXRjaFdpdGhBdXRoRmFsbGJhY2ssIHNpZ25EYXRhV2l0aEtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/net.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/promises.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/helpers/promises.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeferredPromise: () => (/* binding */ createDeferredPromise),\n/* harmony export */   createDeferredPromiseWithStack: () => (/* binding */ createDeferredPromiseWithStack),\n/* harmony export */   createTimeoutPromise: () => (/* binding */ createTimeoutPromise),\n/* harmony export */   resolveAfterPending: () => (/* binding */ resolveAfterPending),\n/* harmony export */   resolveNextTick: () => (/* binding */ resolveNextTick),\n/* harmony export */   retryWithBackoff: () => (/* binding */ retryWithBackoff),\n/* harmony export */   runAsPromise: () => (/* binding */ runAsPromise)\n/* harmony export */ });\n//#region src/helpers/promises.ts\n/**\n* Some environments don't allow access to the global queueMicrotask(). While we\n* had assumed this was only true for those powered by earlier versions of Node\n* (<14) that we don't officially support, Vercel's Edge Functions also obscure\n* the function in dev, even though the platform it's based on (Cloudflare\n* Workers) appropriately exposes it. Even worse, production Vercel Edge\n* Functions can see the function, but it immediately blows up the function when\n* used.\n*\n* Therefore, we can fall back to a reasonable alternative of\n* `Promise.resolve().then(fn)` instead. This _may_ be slightly slower in modern\n* environments, but at least we can still work in these environments.\n*/\nconst shimQueueMicrotask = (callback) => {\n\tPromise.resolve().then(callback);\n};\n/**\n* Returns a Promise that resolves after the current event loop's microtasks\n* have finished, but before the next event loop tick.\n*/\nconst resolveAfterPending = (count = 100) => {\n\t/**\n\t* This uses a brute force implementation that will continue to enqueue\n\t* microtasks 10 times before resolving. This is to ensure that the microtask\n\t* queue is drained, even if the microtask queue is being manipulated by other\n\t* code.\n\t*\n\t* While this still doesn't guarantee that the microtask queue is drained,\n\t* it's our best bet for giving other non-controlled promises a chance to\n\t* resolve before we continue without resorting to falling in to the next\n\t* tick.\n\t*/\n\treturn new Promise((resolve) => {\n\t\tlet i = 0;\n\t\tconst iterate = () => {\n\t\t\tshimQueueMicrotask(() => {\n\t\t\t\tif (i++ > count) return resolve();\n\t\t\t\titerate();\n\t\t\t});\n\t\t};\n\t\titerate();\n\t});\n};\n/**\n* Creates and returns Promise that can be resolved or rejected with the\n* returned `resolve` and `reject` functions.\n*\n* Resolving or rejecting the function will return a new set of Promise control\n* functions. These can be ignored if the original Promise is all that's needed.\n*/\nconst createDeferredPromise = () => {\n\tlet resolve;\n\tlet reject;\n\treturn {\n\t\tpromise: new Promise((_resolve, _reject) => {\n\t\t\tresolve = (value) => {\n\t\t\t\t_resolve(value);\n\t\t\t\treturn createDeferredPromise();\n\t\t\t};\n\t\t\treject = (reason) => {\n\t\t\t\t_reject(reason);\n\t\t\t\treturn createDeferredPromise();\n\t\t\t};\n\t\t}),\n\t\tresolve,\n\t\treject\n\t};\n};\n/**\n* Creates and returns a deferred Promise that can be resolved or rejected with\n* the returned `resolve` and `reject` functions.\n*\n* For each Promise resolved or rejected this way, this will also keep a stack\n* of all unhandled Promises, resolved or rejected.\n*\n* Once a Promise is read, it is removed from the stack.\n*/\nconst createDeferredPromiseWithStack = () => {\n\tconst settledPromises = [];\n\tlet rotateQueue = () => {};\n\tconst results = (async function* () {\n\t\twhile (true) {\n\t\t\tconst next = settledPromises.shift();\n\t\t\tif (next) yield next;\n\t\t\telse await new Promise((resolve) => {\n\t\t\t\trotateQueue = resolve;\n\t\t\t});\n\t\t}\n\t})();\n\tconst shimDeferredPromise = (deferred) => {\n\t\tconst originalResolve = deferred.resolve;\n\t\tconst originalReject = deferred.reject;\n\t\tdeferred.resolve = (value) => {\n\t\t\tsettledPromises.push(deferred.promise);\n\t\t\trotateQueue();\n\t\t\treturn shimDeferredPromise(originalResolve(value));\n\t\t};\n\t\tdeferred.reject = (reason) => {\n\t\t\tsettledPromises.push(deferred.promise);\n\t\t\trotateQueue();\n\t\t\treturn shimDeferredPromise(originalReject(reason));\n\t\t};\n\t\treturn deferred;\n\t};\n\treturn {\n\t\tdeferred: shimDeferredPromise(createDeferredPromise()),\n\t\tresults\n\t};\n};\n/**\n* Creates a Promise that will resolve after the given duration, along with\n* methods to start, clear, and reset the timeout.\n*/\nconst createTimeoutPromise = (duration) => {\n\tconst { promise, resolve } = createDeferredPromise();\n\tlet timeout;\n\tlet ret;\n\tconst start = () => {\n\t\tif (timeout) return ret;\n\t\ttimeout = setTimeout(() => {\n\t\t\tresolve();\n\t\t}, duration);\n\t\treturn ret;\n\t};\n\tconst clear = () => {\n\t\tclearTimeout(timeout);\n\t\ttimeout = void 0;\n\t};\n\tconst reset = () => {\n\t\tclear();\n\t\treturn start();\n\t};\n\tret = Object.assign(promise, {\n\t\tstart,\n\t\tclear,\n\t\treset\n\t});\n\treturn ret;\n};\n/**\n* Take any function and safely promisify such that both synchronous and\n* asynchronous errors are caught and returned as a rejected Promise.\n*\n* The passed `fn` can be undefined to support functions that may conditionally\n* be defined.\n*/\nconst runAsPromise = (fn) => {\n\treturn Promise.resolve().then(fn);\n};\n/**\n* Returns a Promise that resolve after the current event loop tick.\n*/\nconst resolveNextTick = () => {\n\treturn new Promise((resolve) => setTimeout(resolve));\n};\nconst retryWithBackoff = async (fn, opts) => {\n\tconst maxAttempts = opts?.maxAttempts || 5;\n\tconst baseDelay = opts?.baseDelay ?? 100;\n\tfor (let attempt = 1; attempt <= maxAttempts; attempt++) try {\n\t\treturn await fn();\n\t} catch (err) {\n\t\tif (attempt >= maxAttempts) throw err;\n\t\tconst jitter = Math.random() * baseDelay;\n\t\tconst delay = baseDelay * Math.pow(2, attempt - 1) + jitter;\n\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t}\n\tthrow new Error(\"Max retries reached; this should be unreachable.\");\n};\n\n//#endregion\n\n//# sourceMappingURL=promises.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/stream.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/stream.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStream: () => (/* binding */ createStream)\n/* harmony export */ });\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n\n\n//#region src/helpers/stream.ts\n/**\n* Creates a {@link ReadableStream} that sends a `value` every `interval`\n* milliseconds as a heartbeat, intended to keep a stream open.\n*\n* Returns the `stream` itself and a `finalize` function that can be used to\n* close the stream and send a final value.\n*/\nconst createStream = (opts) => {\n\t/**\n\t* We need to resolve this promise with both the stream and the `finalize`\n\t* function, but having them both instantiated synchronously is difficult, as\n\t* we need access to the stream's internals too.\n\t*\n\t* We create this cheeky deferred promise to grab the internal `finalize`\n\t* value. Be warned that simpler solutions may appear to compile, but fail at\n\t* runtime due to variables not being assigned; make sure to test your code!\n\t*/\n\tlet passFinalize;\n\tconst finalizeP = new Promise((resolve) => {\n\t\tpassFinalize = resolve;\n\t});\n\tconst interval = opts?.interval ?? 3e3;\n\tconst value = opts?.value ?? \" \";\n\treturn new Promise(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst stream = new ReadableStream({ start(controller) {\n\t\t\t\tconst encoder = new TextEncoder();\n\t\t\t\tconst heartbeat = setInterval(() => {\n\t\t\t\t\tcontroller.enqueue(encoder.encode(value));\n\t\t\t\t}, interval);\n\t\t\t\tconst finalize = (data) => {\n\t\t\t\t\tclearInterval(heartbeat);\n\t\t\t\t\tPromise.resolve(data).then((resolvedData) => {\n\t\t\t\t\t\tcontroller.enqueue(encoder.encode((0,_strings_js__WEBPACK_IMPORTED_MODULE_0__.stringify)(resolvedData)));\n\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tpassFinalize(finalize);\n\t\t\t} });\n\t\t\tresolve({\n\t\t\t\tstream,\n\t\t\t\tfinalize: await finalizeP\n\t\t\t});\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\t});\n};\n\n//#endregion\n\n//# sourceMappingURL=stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5Qzs7QUFFekM7QUFDQTtBQUNBLGFBQWEsc0JBQXNCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msc0RBQVM7QUFDakQ7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osSUFBSTtBQUNKO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmVhbS5qcz80N2ZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gXCIuL3N0cmluZ3MuanNcIjtcblxuLy8jcmVnaW9uIHNyYy9oZWxwZXJzL3N0cmVhbS50c1xuLyoqXG4qIENyZWF0ZXMgYSB7QGxpbmsgUmVhZGFibGVTdHJlYW19IHRoYXQgc2VuZHMgYSBgdmFsdWVgIGV2ZXJ5IGBpbnRlcnZhbGBcbiogbWlsbGlzZWNvbmRzIGFzIGEgaGVhcnRiZWF0LCBpbnRlbmRlZCB0byBrZWVwIGEgc3RyZWFtIG9wZW4uXG4qXG4qIFJldHVybnMgdGhlIGBzdHJlYW1gIGl0c2VsZiBhbmQgYSBgZmluYWxpemVgIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG9cbiogY2xvc2UgdGhlIHN0cmVhbSBhbmQgc2VuZCBhIGZpbmFsIHZhbHVlLlxuKi9cbmNvbnN0IGNyZWF0ZVN0cmVhbSA9IChvcHRzKSA9PiB7XG5cdC8qKlxuXHQqIFdlIG5lZWQgdG8gcmVzb2x2ZSB0aGlzIHByb21pc2Ugd2l0aCBib3RoIHRoZSBzdHJlYW0gYW5kIHRoZSBgZmluYWxpemVgXG5cdCogZnVuY3Rpb24sIGJ1dCBoYXZpbmcgdGhlbSBib3RoIGluc3RhbnRpYXRlZCBzeW5jaHJvbm91c2x5IGlzIGRpZmZpY3VsdCwgYXNcblx0KiB3ZSBuZWVkIGFjY2VzcyB0byB0aGUgc3RyZWFtJ3MgaW50ZXJuYWxzIHRvby5cblx0KlxuXHQqIFdlIGNyZWF0ZSB0aGlzIGNoZWVreSBkZWZlcnJlZCBwcm9taXNlIHRvIGdyYWIgdGhlIGludGVybmFsIGBmaW5hbGl6ZWBcblx0KiB2YWx1ZS4gQmUgd2FybmVkIHRoYXQgc2ltcGxlciBzb2x1dGlvbnMgbWF5IGFwcGVhciB0byBjb21waWxlLCBidXQgZmFpbCBhdFxuXHQqIHJ1bnRpbWUgZHVlIHRvIHZhcmlhYmxlcyBub3QgYmVpbmcgYXNzaWduZWQ7IG1ha2Ugc3VyZSB0byB0ZXN0IHlvdXIgY29kZSFcblx0Ki9cblx0bGV0IHBhc3NGaW5hbGl6ZTtcblx0Y29uc3QgZmluYWxpemVQID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRwYXNzRmluYWxpemUgPSByZXNvbHZlO1xuXHR9KTtcblx0Y29uc3QgaW50ZXJ2YWwgPSBvcHRzPy5pbnRlcnZhbCA/PyAzZTM7XG5cdGNvbnN0IHZhbHVlID0gb3B0cz8udmFsdWUgPz8gXCIgXCI7XG5cdHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHN0cmVhbSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7IHN0YXJ0KGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXHRcdFx0XHRjb25zdCBoZWFydGJlYXQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG5cdFx0XHRcdFx0Y29udHJvbGxlci5lbnF1ZXVlKGVuY29kZXIuZW5jb2RlKHZhbHVlKSk7XG5cdFx0XHRcdH0sIGludGVydmFsKTtcblx0XHRcdFx0Y29uc3QgZmluYWxpemUgPSAoZGF0YSkgPT4ge1xuXHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoaGVhcnRiZWF0KTtcblx0XHRcdFx0XHRQcm9taXNlLnJlc29sdmUoZGF0YSkudGhlbigocmVzb2x2ZWREYXRhKSA9PiB7XG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmVucXVldWUoZW5jb2Rlci5lbmNvZGUoc3RyaW5naWZ5KHJlc29sdmVkRGF0YSkpKTtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuY2xvc2UoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fTtcblx0XHRcdFx0cGFzc0ZpbmFsaXplKGZpbmFsaXplKTtcblx0XHRcdH0gfSk7XG5cdFx0XHRyZXNvbHZlKHtcblx0XHRcdFx0c3RyZWFtLFxuXHRcdFx0XHRmaW5hbGl6ZTogYXdhaXQgZmluYWxpemVQXG5cdFx0XHR9KTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHJlamVjdChlcnIpO1xuXHRcdH1cblx0fSk7XG59O1xuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGNyZWF0ZVN0cmVhbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/strings.js":
/*!*************************************************!*\
  !*** ./node_modules/inngest/helpers/strings.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashEventKey: () => (/* binding */ hashEventKey),\n/* harmony export */   hashSigningKey: () => (/* binding */ hashSigningKey),\n/* harmony export */   slugify: () => (/* binding */ slugify),\n/* harmony export */   stringify: () => (/* binding */ stringify$1),\n/* harmony export */   stringifyUnknown: () => (/* binding */ stringifyUnknown),\n/* harmony export */   timeStr: () => (/* binding */ timeStr)\n/* harmony export */ });\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var json_stringify_safe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! json-stringify-safe */ \"(rsc)/./node_modules/json-stringify-safe/stringify.js\");\n/* harmony import */ var ms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ms */ \"(rsc)/./node_modules/ms/index.js\");\n\n\n\n\n//#region src/helpers/strings.ts\nconst { sha256 } = hash_js__WEBPACK_IMPORTED_MODULE_0__;\n/**\n* Safely `JSON.stringify()` an `input`, handling circular refernences and\n* removing `BigInt` values.\n*/\nconst stringify$1 = (input) => {\n\treturn json_stringify_safe__WEBPACK_IMPORTED_MODULE_1__(input, (_key, value) => {\n\t\tif (typeof value !== \"bigint\") return value;\n\t});\n};\n/**\n* Returns a slugified string used to generate consistent IDs.\n*\n* This can be used to generate a consistent ID for a function when migrating\n* from v2 to v3 of the SDK.\n*\n* @public\n*/\nconst slugify = (str) => {\n\tconst join = \"-\";\n\treturn str.toLowerCase().replace(/[^a-z0-9-]+/g, join).replace(/-+/g, join).split(join).filter(Boolean).join(join);\n};\nconst second = 1 * 1e3;\nconst minute = second * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\n/**\n* A collection of periods in milliseconds and their suffixes used when creating\n* time strings.\n*/\nconst periods = [\n\t[\"w\", day * 7],\n\t[\"d\", day],\n\t[\"h\", hour],\n\t[\"m\", minute],\n\t[\"s\", second]\n];\n/**\n* Convert a given `Date`, `number`, or `ms`-compatible `string` to a\n* Inngest sleep-compatible time string (e.g. `\"1d\"` or `\"2h3010s\"`).\n*\n* Can optionally provide a `now` date to use as the base for the calculation,\n* otherwise a new date will be created on invocation.\n*/\nconst timeStr = (input) => {\n\tif (input instanceof Date) return input.toISOString();\n\tconst milliseconds = typeof input === \"string\" ? ms__WEBPACK_IMPORTED_MODULE_2__(input) : input;\n\tconst [, timeStr$1] = periods.reduce(([num, str], [suffix, period]) => {\n\t\tconst numPeriods = Math.floor(num / period);\n\t\tif (numPeriods > 0) return [num % period, `${str}${numPeriods}${suffix}`];\n\t\treturn [num, str];\n\t}, [milliseconds, \"\"]);\n\treturn timeStr$1;\n};\n/**\n* Given an unknown input, stringify it if it's a boolean, a number, or a\n* string, else return `undefined`.\n*/\nconst stringifyUnknown = (input) => {\n\tif (typeof input === \"boolean\" || typeof input === \"number\" || typeof input === \"string\") return input.toString();\n};\nconst hashEventKey = (eventKey) => {\n\treturn sha256().update(eventKey).digest(\"hex\");\n};\nconst hashSigningKey = (signingKey) => {\n\tif (!signingKey) return \"\";\n\tconst prefix = signingKey.match(/^signkey-[\\w]+-/)?.shift() || \"\";\n\tconst key = signingKey.replace(/^signkey-[\\w]+-/, \"\");\n\treturn `${prefix}${sha256().update(key, \"hex\").digest(\"hex\")}`;\n};\n\n//#endregion\n\n//# sourceMappingURL=strings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQ2U7QUFDeEI7O0FBRXBCO0FBQ0EsUUFBUSxTQUFTLEVBQUUsb0NBQU07QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsZ0RBQVM7QUFDakI7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsK0JBQUU7QUFDcEQ7QUFDQTtBQUNBLCtDQUErQyxJQUFJLEVBQUUsV0FBVyxFQUFFLE9BQU87QUFDekU7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU8sRUFBRSwwQ0FBMEM7QUFDOUQ7O0FBRUE7QUFDc0c7QUFDdEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmluZ3MuanM/ZjAzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaGFzaGpzIGZyb20gXCJoYXNoLmpzXCI7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gXCJqc29uLXN0cmluZ2lmeS1zYWZlXCI7XG5pbXBvcnQgbXMgZnJvbSBcIm1zXCI7XG5cbi8vI3JlZ2lvbiBzcmMvaGVscGVycy9zdHJpbmdzLnRzXG5jb25zdCB7IHNoYTI1NiB9ID0gaGFzaGpzO1xuLyoqXG4qIFNhZmVseSBgSlNPTi5zdHJpbmdpZnkoKWAgYW4gYGlucHV0YCwgaGFuZGxpbmcgY2lyY3VsYXIgcmVmZXJuZW5jZXMgYW5kXG4qIHJlbW92aW5nIGBCaWdJbnRgIHZhbHVlcy5cbiovXG5jb25zdCBzdHJpbmdpZnkkMSA9IChpbnB1dCkgPT4ge1xuXHRyZXR1cm4gc3RyaW5naWZ5KGlucHV0LCAoX2tleSwgdmFsdWUpID0+IHtcblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSBcImJpZ2ludFwiKSByZXR1cm4gdmFsdWU7XG5cdH0pO1xufTtcbi8qKlxuKiBSZXR1cm5zIGEgc2x1Z2lmaWVkIHN0cmluZyB1c2VkIHRvIGdlbmVyYXRlIGNvbnNpc3RlbnQgSURzLlxuKlxuKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIGEgY29uc2lzdGVudCBJRCBmb3IgYSBmdW5jdGlvbiB3aGVuIG1pZ3JhdGluZ1xuKiBmcm9tIHYyIHRvIHYzIG9mIHRoZSBTREsuXG4qXG4qIEBwdWJsaWNcbiovXG5jb25zdCBzbHVnaWZ5ID0gKHN0cikgPT4ge1xuXHRjb25zdCBqb2luID0gXCItXCI7XG5cdHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOS1dKy9nLCBqb2luKS5yZXBsYWNlKC8tKy9nLCBqb2luKS5zcGxpdChqb2luKS5maWx0ZXIoQm9vbGVhbikuam9pbihqb2luKTtcbn07XG5jb25zdCBzZWNvbmQgPSAxICogMWUzO1xuY29uc3QgbWludXRlID0gc2Vjb25kICogNjA7XG5jb25zdCBob3VyID0gbWludXRlICogNjA7XG5jb25zdCBkYXkgPSBob3VyICogMjQ7XG4vKipcbiogQSBjb2xsZWN0aW9uIG9mIHBlcmlvZHMgaW4gbWlsbGlzZWNvbmRzIGFuZCB0aGVpciBzdWZmaXhlcyB1c2VkIHdoZW4gY3JlYXRpbmdcbiogdGltZSBzdHJpbmdzLlxuKi9cbmNvbnN0IHBlcmlvZHMgPSBbXG5cdFtcIndcIiwgZGF5ICogN10sXG5cdFtcImRcIiwgZGF5XSxcblx0W1wiaFwiLCBob3VyXSxcblx0W1wibVwiLCBtaW51dGVdLFxuXHRbXCJzXCIsIHNlY29uZF1cbl07XG4vKipcbiogQ29udmVydCBhIGdpdmVuIGBEYXRlYCwgYG51bWJlcmAsIG9yIGBtc2AtY29tcGF0aWJsZSBgc3RyaW5nYCB0byBhXG4qIElubmdlc3Qgc2xlZXAtY29tcGF0aWJsZSB0aW1lIHN0cmluZyAoZS5nLiBgXCIxZFwiYCBvciBgXCIyaDMwMTBzXCJgKS5cbipcbiogQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhIGBub3dgIGRhdGUgdG8gdXNlIGFzIHRoZSBiYXNlIGZvciB0aGUgY2FsY3VsYXRpb24sXG4qIG90aGVyd2lzZSBhIG5ldyBkYXRlIHdpbGwgYmUgY3JlYXRlZCBvbiBpbnZvY2F0aW9uLlxuKi9cbmNvbnN0IHRpbWVTdHIgPSAoaW5wdXQpID0+IHtcblx0aWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIGlucHV0LnRvSVNPU3RyaW5nKCk7XG5cdGNvbnN0IG1pbGxpc2Vjb25kcyA9IHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIiA/IG1zKGlucHV0KSA6IGlucHV0O1xuXHRjb25zdCBbLCB0aW1lU3RyJDFdID0gcGVyaW9kcy5yZWR1Y2UoKFtudW0sIHN0cl0sIFtzdWZmaXgsIHBlcmlvZF0pID0+IHtcblx0XHRjb25zdCBudW1QZXJpb2RzID0gTWF0aC5mbG9vcihudW0gLyBwZXJpb2QpO1xuXHRcdGlmIChudW1QZXJpb2RzID4gMCkgcmV0dXJuIFtudW0gJSBwZXJpb2QsIGAke3N0cn0ke251bVBlcmlvZHN9JHtzdWZmaXh9YF07XG5cdFx0cmV0dXJuIFtudW0sIHN0cl07XG5cdH0sIFttaWxsaXNlY29uZHMsIFwiXCJdKTtcblx0cmV0dXJuIHRpbWVTdHIkMTtcbn07XG4vKipcbiogR2l2ZW4gYW4gdW5rbm93biBpbnB1dCwgc3RyaW5naWZ5IGl0IGlmIGl0J3MgYSBib29sZWFuLCBhIG51bWJlciwgb3IgYVxuKiBzdHJpbmcsIGVsc2UgcmV0dXJuIGB1bmRlZmluZWRgLlxuKi9cbmNvbnN0IHN0cmluZ2lmeVVua25vd24gPSAoaW5wdXQpID0+IHtcblx0aWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJib29sZWFuXCIgfHwgdHlwZW9mIGlucHV0ID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGlucHV0LnRvU3RyaW5nKCk7XG59O1xuY29uc3QgaGFzaEV2ZW50S2V5ID0gKGV2ZW50S2V5KSA9PiB7XG5cdHJldHVybiBzaGEyNTYoKS51cGRhdGUoZXZlbnRLZXkpLmRpZ2VzdChcImhleFwiKTtcbn07XG5jb25zdCBoYXNoU2lnbmluZ0tleSA9IChzaWduaW5nS2V5KSA9PiB7XG5cdGlmICghc2lnbmluZ0tleSkgcmV0dXJuIFwiXCI7XG5cdGNvbnN0IHByZWZpeCA9IHNpZ25pbmdLZXkubWF0Y2goL15zaWdua2V5LVtcXHddKy0vKT8uc2hpZnQoKSB8fCBcIlwiO1xuXHRjb25zdCBrZXkgPSBzaWduaW5nS2V5LnJlcGxhY2UoL15zaWdua2V5LVtcXHddKy0vLCBcIlwiKTtcblx0cmV0dXJuIGAke3ByZWZpeH0ke3NoYTI1NigpLnVwZGF0ZShrZXksIFwiaGV4XCIpLmRpZ2VzdChcImhleFwiKX1gO1xufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBoYXNoRXZlbnRLZXksIGhhc2hTaWduaW5nS2V5LCBzbHVnaWZ5LCBzdHJpbmdpZnkkMSBhcyBzdHJpbmdpZnksIHN0cmluZ2lmeVVua25vd24sIHRpbWVTdHIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/strings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/temporal.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/helpers/temporal.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getISOString: () => (/* binding */ getISOString),\n/* harmony export */   isTemporalDuration: () => (/* binding */ isTemporalDuration)\n/* harmony export */ });\n//#region src/helpers/temporal.ts\n/**\n* Asserts that the given `input` is a `Temporal.Duration` object.\n*/\nconst isTemporalDuration = (input) => {\n\ttry {\n\t\treturn input[Symbol.toStringTag] === \"Temporal.Duration\";\n\t} catch {\n\t\treturn false;\n\t}\n};\n/**\n* Asserts that the given `input` is a `Temporal.TimeZone` object.\n*/\nconst isTemporalInstant = (input) => {\n\ttry {\n\t\treturn input[Symbol.toStringTag] === \"Temporal.Instant\";\n\t} catch {\n\t\treturn false;\n\t}\n};\n/**\n* Asserts that the given `input` is a `Temporal.ZonedDateTime` object.\n*/\nconst isTemporalZonedDateTime = (input) => {\n\ttry {\n\t\treturn input[Symbol.toStringTag] === \"Temporal.ZonedDateTime\";\n\t} catch {\n\t\treturn false;\n\t}\n};\n/**\n* Converts a given `Date`, `string`, `Temporal.Instant`, or\n* `Temporal.ZonedDateTime` to an ISO 8601 string.\n*/\nconst getISOString = (time) => {\n\tif (typeof time === \"string\") return new Date(time).toISOString();\n\tif (time instanceof Date) return time.toISOString();\n\tif (isTemporalZonedDateTime(time)) return time.toInstant().toString();\n\tif (isTemporalInstant(time)) return time.toString();\n\tthrow new TypeError(\"Invalid date input\");\n};\n\n//#endregion\n\n//# sourceMappingURL=temporal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3RlbXBvcmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQzRDO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy90ZW1wb3JhbC5qcz9iMmJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvaGVscGVycy90ZW1wb3JhbC50c1xuLyoqXG4qIEFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYGlucHV0YCBpcyBhIGBUZW1wb3JhbC5EdXJhdGlvbmAgb2JqZWN0LlxuKi9cbmNvbnN0IGlzVGVtcG9yYWxEdXJhdGlvbiA9IChpbnB1dCkgPT4ge1xuXHR0cnkge1xuXHRcdHJldHVybiBpbnB1dFtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIlRlbXBvcmFsLkR1cmF0aW9uXCI7XG5cdH0gY2F0Y2gge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbi8qKlxuKiBBc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGBpbnB1dGAgaXMgYSBgVGVtcG9yYWwuVGltZVpvbmVgIG9iamVjdC5cbiovXG5jb25zdCBpc1RlbXBvcmFsSW5zdGFudCA9IChpbnB1dCkgPT4ge1xuXHR0cnkge1xuXHRcdHJldHVybiBpbnB1dFtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIlRlbXBvcmFsLkluc3RhbnRcIjtcblx0fSBjYXRjaCB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuLyoqXG4qIEFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYGlucHV0YCBpcyBhIGBUZW1wb3JhbC5ab25lZERhdGVUaW1lYCBvYmplY3QuXG4qL1xuY29uc3QgaXNUZW1wb3JhbFpvbmVkRGF0ZVRpbWUgPSAoaW5wdXQpID0+IHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gaW5wdXRbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJUZW1wb3JhbC5ab25lZERhdGVUaW1lXCI7XG5cdH0gY2F0Y2gge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbi8qKlxuKiBDb252ZXJ0cyBhIGdpdmVuIGBEYXRlYCwgYHN0cmluZ2AsIGBUZW1wb3JhbC5JbnN0YW50YCwgb3JcbiogYFRlbXBvcmFsLlpvbmVkRGF0ZVRpbWVgIHRvIGFuIElTTyA4NjAxIHN0cmluZy5cbiovXG5jb25zdCBnZXRJU09TdHJpbmcgPSAodGltZSkgPT4ge1xuXHRpZiAodHlwZW9mIHRpbWUgPT09IFwic3RyaW5nXCIpIHJldHVybiBuZXcgRGF0ZSh0aW1lKS50b0lTT1N0cmluZygpO1xuXHRpZiAodGltZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0aW1lLnRvSVNPU3RyaW5nKCk7XG5cdGlmIChpc1RlbXBvcmFsWm9uZWREYXRlVGltZSh0aW1lKSkgcmV0dXJuIHRpbWUudG9JbnN0YW50KCkudG9TdHJpbmcoKTtcblx0aWYgKGlzVGVtcG9yYWxJbnN0YW50KHRpbWUpKSByZXR1cm4gdGltZS50b1N0cmluZygpO1xuXHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBkYXRlIGlucHV0XCIpO1xufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBnZXRJU09TdHJpbmcsIGlzVGVtcG9yYWxEdXJhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVtcG9yYWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/temporal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/middleware/logger.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/middleware/logger.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLogger: () => (/* binding */ DefaultLogger),\n/* harmony export */   ProxyLogger: () => (/* binding */ ProxyLogger)\n/* harmony export */ });\n//#region src/middleware/logger.ts\nvar DefaultLogger = class {\n\tinfo(...args) {\n\t\tconsole.info(...args);\n\t}\n\twarn(...args) {\n\t\tconsole.warn(...args);\n\t}\n\terror(...args) {\n\t\tconsole.error(...args);\n\t}\n\tdebug(...args) {\n\t\tconsole.debug(...args);\n\t}\n};\n/**\n* ProxyLogger aims to provide a thin wrapper on user's provided logger.\n* It's expected to be turned on and off based on the function execution\n* context, so it doesn't result in duplicated logging.\n*\n* And also attempt to allow enough time for the logger to flush all logs.\n*\n* @public\n*/\nvar ProxyLogger = class {\n\tlogger;\n\tenabled = false;\n\tconstructor(logger) {\n\t\tthis.logger = logger;\n\t\treturn new Proxy(this, { get(target, prop, receiver) {\n\t\t\tif (prop in target) return Reflect.get(target, prop, receiver);\n\t\t\treturn Reflect.get(target.logger, prop, receiver);\n\t\t} });\n\t}\n\tinfo(...args) {\n\t\tif (!this.enabled) return;\n\t\tthis.logger.info(...args);\n\t}\n\twarn(...args) {\n\t\tif (!this.enabled) return;\n\t\tthis.logger.warn(...args);\n\t}\n\terror(...args) {\n\t\tif (!this.enabled) return;\n\t\tthis.logger.error(...args);\n\t}\n\tdebug(...args) {\n\t\tif (!this.enabled || !(typeof this.logger.debug === \"function\")) return;\n\t\tthis.logger.debug(...args);\n\t}\n\tenable() {\n\t\tthis.enabled = true;\n\t}\n\tdisable() {\n\t\tthis.enabled = false;\n\t}\n\tasync flush() {\n\t\tif (this.logger.constructor.name !== DefaultLogger.name) await new Promise((resolve) => {\n\t\t\tsetTimeout(() => resolve(null), 1e3);\n\t\t});\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9taWRkbGV3YXJlL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDc0M7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9taWRkbGV3YXJlL2xvZ2dlci5qcz9mNjQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvbWlkZGxld2FyZS9sb2dnZXIudHNcbnZhciBEZWZhdWx0TG9nZ2VyID0gY2xhc3Mge1xuXHRpbmZvKC4uLmFyZ3MpIHtcblx0XHRjb25zb2xlLmluZm8oLi4uYXJncyk7XG5cdH1cblx0d2FybiguLi5hcmdzKSB7XG5cdFx0Y29uc29sZS53YXJuKC4uLmFyZ3MpO1xuXHR9XG5cdGVycm9yKC4uLmFyZ3MpIHtcblx0XHRjb25zb2xlLmVycm9yKC4uLmFyZ3MpO1xuXHR9XG5cdGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRjb25zb2xlLmRlYnVnKC4uLmFyZ3MpO1xuXHR9XG59O1xuLyoqXG4qIFByb3h5TG9nZ2VyIGFpbXMgdG8gcHJvdmlkZSBhIHRoaW4gd3JhcHBlciBvbiB1c2VyJ3MgcHJvdmlkZWQgbG9nZ2VyLlxuKiBJdCdzIGV4cGVjdGVkIHRvIGJlIHR1cm5lZCBvbiBhbmQgb2ZmIGJhc2VkIG9uIHRoZSBmdW5jdGlvbiBleGVjdXRpb25cbiogY29udGV4dCwgc28gaXQgZG9lc24ndCByZXN1bHQgaW4gZHVwbGljYXRlZCBsb2dnaW5nLlxuKlxuKiBBbmQgYWxzbyBhdHRlbXB0IHRvIGFsbG93IGVub3VnaCB0aW1lIGZvciB0aGUgbG9nZ2VyIHRvIGZsdXNoIGFsbCBsb2dzLlxuKlxuKiBAcHVibGljXG4qL1xudmFyIFByb3h5TG9nZ2VyID0gY2xhc3Mge1xuXHRsb2dnZXI7XG5cdGVuYWJsZWQgPSBmYWxzZTtcblx0Y29uc3RydWN0b3IobG9nZ2VyKSB7XG5cdFx0dGhpcy5sb2dnZXIgPSBsb2dnZXI7XG5cdFx0cmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7IGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG5cdFx0XHRpZiAocHJvcCBpbiB0YXJnZXQpIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcblx0XHRcdHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQubG9nZ2VyLCBwcm9wLCByZWNlaXZlcik7XG5cdFx0fSB9KTtcblx0fVxuXHRpbmZvKC4uLmFyZ3MpIHtcblx0XHRpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xuXHRcdHRoaXMubG9nZ2VyLmluZm8oLi4uYXJncyk7XG5cdH1cblx0d2FybiguLi5hcmdzKSB7XG5cdFx0aWYgKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcblx0XHR0aGlzLmxvZ2dlci53YXJuKC4uLmFyZ3MpO1xuXHR9XG5cdGVycm9yKC4uLmFyZ3MpIHtcblx0XHRpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xuXHRcdHRoaXMubG9nZ2VyLmVycm9yKC4uLmFyZ3MpO1xuXHR9XG5cdGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRpZiAoIXRoaXMuZW5hYmxlZCB8fCAhKHR5cGVvZiB0aGlzLmxvZ2dlci5kZWJ1ZyA9PT0gXCJmdW5jdGlvblwiKSkgcmV0dXJuO1xuXHRcdHRoaXMubG9nZ2VyLmRlYnVnKC4uLmFyZ3MpO1xuXHR9XG5cdGVuYWJsZSgpIHtcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXHR9XG5cdGRpc2FibGUoKSB7XG5cdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cdH1cblx0YXN5bmMgZmx1c2goKSB7XG5cdFx0aWYgKHRoaXMubG9nZ2VyLmNvbnN0cnVjdG9yLm5hbWUgIT09IERlZmF1bHRMb2dnZXIubmFtZSkgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZShudWxsKSwgMWUzKTtcblx0XHR9KTtcblx0fVxufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBEZWZhdWx0TG9nZ2VyLCBQcm94eUxvZ2dlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/middleware/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/next.js":
/*!**************************************!*\
  !*** ./node_modules/inngest/next.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   frameworkName: () => (/* binding */ frameworkName),\n/* harmony export */   serve: () => (/* binding */ serve)\n/* harmony export */ });\n/* harmony import */ var _helpers_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n/* harmony import */ var _components_InngestCommHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/InngestCommHandler.js */ \"(rsc)/./node_modules/inngest/components/InngestCommHandler.js\");\n\n\n\n//#region src/next.ts\n/**\n* The name of the framework, used to identify the framework in Inngest\n* dashboards and during testing.\n*/\nconst frameworkName = \"nextjs\";\nconst isRecord = (val) => {\n\treturn typeof val === \"object\" && val !== null;\n};\nconst isFunction = (val) => {\n\treturn typeof val === \"function\";\n};\nconst isNext12ApiResponse = (val) => {\n\treturn isRecord(val) && isFunction(val.setHeader) && isFunction(val.status) && isFunction(val.send);\n};\n/**\n* In Next.js, serve and register any declared functions with Inngest, making\n* them available to be triggered by events.\n*\n* Supports Next.js 12+, both serverless and edge.\n*\n* @example Next.js <=12 or the pages router can export the handler directly\n* ```ts\n* export default serve({ client: inngest, functions: [fn1, fn2] });\n* ```\n*\n* @example Next.js >=13 with the `app` dir must export individual methods\n* ```ts\n* export const { GET, POST, PUT } = serve({\n*            client: inngest,\n*            functions: [fn1, fn2],\n* });\n* ```\n*\n* @public\n*/\nconst serve = (options) => {\n\t/**\n\t* Next.js 13 uses\n\t* {@link https://beta.nextjs.org/docs/routing/route-handlers Route Handlers}\n\t* to declare API routes instead of a generic catch-all method that was\n\t* available using the `pages/api` directory.\n\t*\n\t* This means that users must now export a function for each method supported\n\t* by the endpoint. For us, this means requiring a user explicitly exports\n\t* `GET`, `POST`, and `PUT` functions.\n\t*\n\t* Because of this, we'll add circular references to those property names of\n\t* the returned handler, meaning we can write some succinct code to export\n\t* them. Thanks, @goodoldneon.\n\t*\n\t* @example\n\t* ```ts\n\t* export const { GET, POST, PUT } = serve(...);\n\t* ```\n\t*\n\t* See {@link https://beta.nextjs.org/docs/routing/route-handlers}\n\t*/\n\tconst baseFn = new _components_InngestCommHandler_js__WEBPACK_IMPORTED_MODULE_0__.InngestCommHandler({\n\t\tframeworkName,\n\t\t...options,\n\t\thandler: (reqMethod, ...args) => {\n\t\t\tconst [expectedReq, res] = args;\n\t\t\tconst req = expectedReq;\n\t\t\tconst getHeader = (key) => {\n\t\t\t\tconst header = typeof req.headers.get === \"function\" ? req.headers.get(key) : req.headers[key];\n\t\t\t\treturn Array.isArray(header) ? header[0] : header;\n\t\t\t};\n\t\t\treturn {\n\t\t\t\tbody: () => typeof req.json === \"function\" ? req.json() : req.body,\n\t\t\t\theaders: getHeader,\n\t\t\t\tmethod: () => {\n\t\t\t\t\treturn reqMethod || req.method || \"\";\n\t\t\t\t},\n\t\t\t\tisProduction: () => {\n\t\t\t\t\t/**\n\t\t\t\t\t* Vercel Edge Functions do not allow dynamic access to environment\n\t\t\t\t\t* variables, so we'll manage production checks directly here.\n\t\t\t\t\t*\n\t\t\t\t\t* We try/catch to avoid situations where Next.js is being used in\n\t\t\t\t\t* environments where `process.env` is not accessible or polyfilled.\n\t\t\t\t\t*/\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn \"development\" === \"production\";\n\t\t\t\t\t} catch (_err) {}\n\t\t\t\t},\n\t\t\t\tqueryString: (key, url) => {\n\t\t\t\t\tconst qs = req.query?.[key] || url.searchParams.get(key);\n\t\t\t\t\treturn Array.isArray(qs) ? qs[0] : qs;\n\t\t\t\t},\n\t\t\t\turl: () => {\n\t\t\t\t\tlet absoluteUrl;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tabsoluteUrl = new URL(req.url);\n\t\t\t\t\t} catch {}\n\t\t\t\t\tif (absoluteUrl) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t* `req.url` here should may be the full URL, including query string.\n\t\t\t\t\t\t* There are some caveats, however, where Next.js will obfuscate\n\t\t\t\t\t\t* the host. For example, in the case of `host.docker.internal`,\n\t\t\t\t\t\t* Next.js will instead set the host here to `localhost`.\n\t\t\t\t\t\t*\n\t\t\t\t\t\t* To avoid this, we'll try to parse the URL from `req.url`, but\n\t\t\t\t\t\t* also use the `host` header if it's available.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tconst host$1 = options.serveHost || getHeader(\"host\");\n\t\t\t\t\t\tif (host$1) {\n\t\t\t\t\t\t\tconst hostWithProtocol = new URL(host$1.includes(\"://\") ? host$1 : `${absoluteUrl.protocol}//${host$1}`);\n\t\t\t\t\t\t\tabsoluteUrl.protocol = hostWithProtocol.protocol;\n\t\t\t\t\t\t\tabsoluteUrl.host = hostWithProtocol.host;\n\t\t\t\t\t\t\tabsoluteUrl.port = hostWithProtocol.port;\n\t\t\t\t\t\t\tabsoluteUrl.username = hostWithProtocol.username;\n\t\t\t\t\t\t\tabsoluteUrl.password = hostWithProtocol.password;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn absoluteUrl;\n\t\t\t\t\t}\n\t\t\t\t\tlet scheme = \"https\";\n\t\t\t\t\tconst host = options.serveHost || getHeader(\"host\") || \"\";\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (true) scheme = \"http\";\n\t\t\t\t\t} catch (_err) {}\n\t\t\t\t\treturn new URL(req.url, `${scheme}://${host}`);\n\t\t\t\t},\n\t\t\t\ttransformResponse: ({ body, headers, status }) => {\n\t\t\t\t\t/**\n\t\t\t\t\t* Carefully attempt to set headers and data on the response object\n\t\t\t\t\t* for Next.js 12 support.\n\t\t\t\t\t*\n\t\t\t\t\t* This also assumes that we're not using Next.js 15, where the `res`\n\t\t\t\t\t* object is repopulated as a `RouteContext` object. We expect these\n\t\t\t\t\t* methods to NOT be defined in Next.js 15.\n\t\t\t\t\t*\n\t\t\t\t\t* We could likely use `instanceof ServerResponse` to better check the\n\t\t\t\t\t* type of this, though Next.js 12 had issues with this due to not\n\t\t\t\t\t* instantiating the response correctly.\n\t\t\t\t\t*/\n\t\t\t\t\tif (isNext12ApiResponse(res)) {\n\t\t\t\t\t\tfor (const [key, value] of Object.entries(headers)) res.setHeader(key, value);\n\t\t\t\t\t\tres.status(status);\n\t\t\t\t\t\tres.send(body);\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t* If we're here, we're in a serverless endpoint (not edge), so\n\t\t\t\t\t\t* we've correctly sent the response and can return `undefined`.\n\t\t\t\t\t\t*\n\t\t\t\t\t\t* Next.js 13 edge requires that the return value is typed as\n\t\t\t\t\t\t* `Response`, so we still enforce that as we cannot dynamically\n\t\t\t\t\t\t* adjust typing based on the environment.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn new ((0,_helpers_env_js__WEBPACK_IMPORTED_MODULE_1__.getResponse)())(body, {\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\theaders\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\ttransformStreamingResponse: ({ body, headers, status }) => {\n\t\t\t\t\treturn new Response(body, {\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\theaders\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}).createHandler();\n\tconst fn = baseFn.bind(null, void 0);\n\t/**\n\t* Ensure we have a non-variadic length to avoid issues with forced type\n\t* checking.\n\t*/\n\tObject.defineProperty(fn, \"length\", { value: 1 });\n\treturn Object.defineProperties(fn, {\n\t\tGET: { value: baseFn.bind(null, \"GET\") },\n\t\tPOST: { value: baseFn.bind(null, \"POST\") },\n\t\tPUT: { value: baseFn.bind(null, \"PUT\") }\n\t});\n};\n\n//#endregion\n\n//# sourceMappingURL=next.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9uZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0M7QUFDeUI7O0FBRXhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsd0NBQXdDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0Esb0JBQW9CLGlGQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsYUFBb0I7QUFDakMsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLHFCQUFxQixJQUFJLE9BQU87QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsSUFBc0M7QUFDaEQsT0FBTztBQUNQLGdDQUFnQyxPQUFPLEtBQUssS0FBSztBQUNqRCxLQUFLO0FBQ0wsMEJBQTBCLHVCQUF1QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDREQUFXO0FBQzVCO0FBQ0E7QUFDQSxNQUFNO0FBQ04sS0FBSztBQUNMLG1DQUFtQyx1QkFBdUI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFVBQVU7QUFDakQ7QUFDQSxTQUFTLGlDQUFpQztBQUMxQyxVQUFVLGtDQUFrQztBQUM1QyxTQUFTO0FBQ1QsRUFBRTtBQUNGOztBQUVBO0FBQ2dDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3QvbmV4dC5qcz9iZTFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFJlc3BvbnNlIH0gZnJvbSBcIi4vaGVscGVycy9lbnYuanNcIjtcbmltcG9ydCB7IElubmdlc3RDb21tSGFuZGxlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvSW5uZ2VzdENvbW1IYW5kbGVyLmpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvbmV4dC50c1xuLyoqXG4qIFRoZSBuYW1lIG9mIHRoZSBmcmFtZXdvcmssIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGZyYW1ld29yayBpbiBJbm5nZXN0XG4qIGRhc2hib2FyZHMgYW5kIGR1cmluZyB0ZXN0aW5nLlxuKi9cbmNvbnN0IGZyYW1ld29ya05hbWUgPSBcIm5leHRqc1wiO1xuY29uc3QgaXNSZWNvcmQgPSAodmFsKSA9PiB7XG5cdHJldHVybiB0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmIHZhbCAhPT0gbnVsbDtcbn07XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbCkgPT4ge1xuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiO1xufTtcbmNvbnN0IGlzTmV4dDEyQXBpUmVzcG9uc2UgPSAodmFsKSA9PiB7XG5cdHJldHVybiBpc1JlY29yZCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnNldEhlYWRlcikgJiYgaXNGdW5jdGlvbih2YWwuc3RhdHVzKSAmJiBpc0Z1bmN0aW9uKHZhbC5zZW5kKTtcbn07XG4vKipcbiogSW4gTmV4dC5qcywgc2VydmUgYW5kIHJlZ2lzdGVyIGFueSBkZWNsYXJlZCBmdW5jdGlvbnMgd2l0aCBJbm5nZXN0LCBtYWtpbmdcbiogdGhlbSBhdmFpbGFibGUgdG8gYmUgdHJpZ2dlcmVkIGJ5IGV2ZW50cy5cbipcbiogU3VwcG9ydHMgTmV4dC5qcyAxMissIGJvdGggc2VydmVybGVzcyBhbmQgZWRnZS5cbipcbiogQGV4YW1wbGUgTmV4dC5qcyA8PTEyIG9yIHRoZSBwYWdlcyByb3V0ZXIgY2FuIGV4cG9ydCB0aGUgaGFuZGxlciBkaXJlY3RseVxuKiBgYGB0c1xuKiBleHBvcnQgZGVmYXVsdCBzZXJ2ZSh7IGNsaWVudDogaW5uZ2VzdCwgZnVuY3Rpb25zOiBbZm4xLCBmbjJdIH0pO1xuKiBgYGBcbipcbiogQGV4YW1wbGUgTmV4dC5qcyA+PTEzIHdpdGggdGhlIGBhcHBgIGRpciBtdXN0IGV4cG9ydCBpbmRpdmlkdWFsIG1ldGhvZHNcbiogYGBgdHNcbiogZXhwb3J0IGNvbnN0IHsgR0VULCBQT1NULCBQVVQgfSA9IHNlcnZlKHtcbiogICAgICAgICAgICBjbGllbnQ6IGlubmdlc3QsXG4qICAgICAgICAgICAgZnVuY3Rpb25zOiBbZm4xLCBmbjJdLFxuKiB9KTtcbiogYGBgXG4qXG4qIEBwdWJsaWNcbiovXG5jb25zdCBzZXJ2ZSA9IChvcHRpb25zKSA9PiB7XG5cdC8qKlxuXHQqIE5leHQuanMgMTMgdXNlc1xuXHQqIHtAbGluayBodHRwczovL2JldGEubmV4dGpzLm9yZy9kb2NzL3JvdXRpbmcvcm91dGUtaGFuZGxlcnMgUm91dGUgSGFuZGxlcnN9XG5cdCogdG8gZGVjbGFyZSBBUEkgcm91dGVzIGluc3RlYWQgb2YgYSBnZW5lcmljIGNhdGNoLWFsbCBtZXRob2QgdGhhdCB3YXNcblx0KiBhdmFpbGFibGUgdXNpbmcgdGhlIGBwYWdlcy9hcGlgIGRpcmVjdG9yeS5cblx0KlxuXHQqIFRoaXMgbWVhbnMgdGhhdCB1c2VycyBtdXN0IG5vdyBleHBvcnQgYSBmdW5jdGlvbiBmb3IgZWFjaCBtZXRob2Qgc3VwcG9ydGVkXG5cdCogYnkgdGhlIGVuZHBvaW50LiBGb3IgdXMsIHRoaXMgbWVhbnMgcmVxdWlyaW5nIGEgdXNlciBleHBsaWNpdGx5IGV4cG9ydHNcblx0KiBgR0VUYCwgYFBPU1RgLCBhbmQgYFBVVGAgZnVuY3Rpb25zLlxuXHQqXG5cdCogQmVjYXVzZSBvZiB0aGlzLCB3ZSdsbCBhZGQgY2lyY3VsYXIgcmVmZXJlbmNlcyB0byB0aG9zZSBwcm9wZXJ0eSBuYW1lcyBvZlxuXHQqIHRoZSByZXR1cm5lZCBoYW5kbGVyLCBtZWFuaW5nIHdlIGNhbiB3cml0ZSBzb21lIHN1Y2NpbmN0IGNvZGUgdG8gZXhwb3J0XG5cdCogdGhlbS4gVGhhbmtzLCBAZ29vZG9sZG5lb24uXG5cdCpcblx0KiBAZXhhbXBsZVxuXHQqIGBgYHRzXG5cdCogZXhwb3J0IGNvbnN0IHsgR0VULCBQT1NULCBQVVQgfSA9IHNlcnZlKC4uLik7XG5cdCogYGBgXG5cdCpcblx0KiBTZWUge0BsaW5rIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3Mvcm91dGluZy9yb3V0ZS1oYW5kbGVyc31cblx0Ki9cblx0Y29uc3QgYmFzZUZuID0gbmV3IElubmdlc3RDb21tSGFuZGxlcih7XG5cdFx0ZnJhbWV3b3JrTmFtZSxcblx0XHQuLi5vcHRpb25zLFxuXHRcdGhhbmRsZXI6IChyZXFNZXRob2QsIC4uLmFyZ3MpID0+IHtcblx0XHRcdGNvbnN0IFtleHBlY3RlZFJlcSwgcmVzXSA9IGFyZ3M7XG5cdFx0XHRjb25zdCByZXEgPSBleHBlY3RlZFJlcTtcblx0XHRcdGNvbnN0IGdldEhlYWRlciA9IChrZXkpID0+IHtcblx0XHRcdFx0Y29uc3QgaGVhZGVyID0gdHlwZW9mIHJlcS5oZWFkZXJzLmdldCA9PT0gXCJmdW5jdGlvblwiID8gcmVxLmhlYWRlcnMuZ2V0KGtleSkgOiByZXEuaGVhZGVyc1trZXldO1xuXHRcdFx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyWzBdIDogaGVhZGVyO1xuXHRcdFx0fTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGJvZHk6ICgpID0+IHR5cGVvZiByZXEuanNvbiA9PT0gXCJmdW5jdGlvblwiID8gcmVxLmpzb24oKSA6IHJlcS5ib2R5LFxuXHRcdFx0XHRoZWFkZXJzOiBnZXRIZWFkZXIsXG5cdFx0XHRcdG1ldGhvZDogKCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiByZXFNZXRob2QgfHwgcmVxLm1ldGhvZCB8fCBcIlwiO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRpc1Byb2R1Y3Rpb246ICgpID0+IHtcblx0XHRcdFx0XHQvKipcblx0XHRcdFx0XHQqIFZlcmNlbCBFZGdlIEZ1bmN0aW9ucyBkbyBub3QgYWxsb3cgZHluYW1pYyBhY2Nlc3MgdG8gZW52aXJvbm1lbnRcblx0XHRcdFx0XHQqIHZhcmlhYmxlcywgc28gd2UnbGwgbWFuYWdlIHByb2R1Y3Rpb24gY2hlY2tzIGRpcmVjdGx5IGhlcmUuXG5cdFx0XHRcdFx0KlxuXHRcdFx0XHRcdCogV2UgdHJ5L2NhdGNoIHRvIGF2b2lkIHNpdHVhdGlvbnMgd2hlcmUgTmV4dC5qcyBpcyBiZWluZyB1c2VkIGluXG5cdFx0XHRcdFx0KiBlbnZpcm9ubWVudHMgd2hlcmUgYHByb2Nlc3MuZW52YCBpcyBub3QgYWNjZXNzaWJsZSBvciBwb2x5ZmlsbGVkLlxuXHRcdFx0XHRcdCovXG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XG5cdFx0XHRcdFx0fSBjYXRjaCAoX2Vycikge31cblx0XHRcdFx0fSxcblx0XHRcdFx0cXVlcnlTdHJpbmc6IChrZXksIHVybCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHFzID0gcmVxLnF1ZXJ5Py5ba2V5XSB8fCB1cmwuc2VhcmNoUGFyYW1zLmdldChrZXkpO1xuXHRcdFx0XHRcdHJldHVybiBBcnJheS5pc0FycmF5KHFzKSA/IHFzWzBdIDogcXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHVybDogKCkgPT4ge1xuXHRcdFx0XHRcdGxldCBhYnNvbHV0ZVVybDtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0YWJzb2x1dGVVcmwgPSBuZXcgVVJMKHJlcS51cmwpO1xuXHRcdFx0XHRcdH0gY2F0Y2gge31cblx0XHRcdFx0XHRpZiAoYWJzb2x1dGVVcmwpIHtcblx0XHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdFx0KiBgcmVxLnVybGAgaGVyZSBzaG91bGQgbWF5IGJlIHRoZSBmdWxsIFVSTCwgaW5jbHVkaW5nIHF1ZXJ5IHN0cmluZy5cblx0XHRcdFx0XHRcdCogVGhlcmUgYXJlIHNvbWUgY2F2ZWF0cywgaG93ZXZlciwgd2hlcmUgTmV4dC5qcyB3aWxsIG9iZnVzY2F0ZVxuXHRcdFx0XHRcdFx0KiB0aGUgaG9zdC4gRm9yIGV4YW1wbGUsIGluIHRoZSBjYXNlIG9mIGBob3N0LmRvY2tlci5pbnRlcm5hbGAsXG5cdFx0XHRcdFx0XHQqIE5leHQuanMgd2lsbCBpbnN0ZWFkIHNldCB0aGUgaG9zdCBoZXJlIHRvIGBsb2NhbGhvc3RgLlxuXHRcdFx0XHRcdFx0KlxuXHRcdFx0XHRcdFx0KiBUbyBhdm9pZCB0aGlzLCB3ZSdsbCB0cnkgdG8gcGFyc2UgdGhlIFVSTCBmcm9tIGByZXEudXJsYCwgYnV0XG5cdFx0XHRcdFx0XHQqIGFsc28gdXNlIHRoZSBgaG9zdGAgaGVhZGVyIGlmIGl0J3MgYXZhaWxhYmxlLlxuXHRcdFx0XHRcdFx0Ki9cblx0XHRcdFx0XHRcdGNvbnN0IGhvc3QkMSA9IG9wdGlvbnMuc2VydmVIb3N0IHx8IGdldEhlYWRlcihcImhvc3RcIik7XG5cdFx0XHRcdFx0XHRpZiAoaG9zdCQxKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGhvc3RXaXRoUHJvdG9jb2wgPSBuZXcgVVJMKGhvc3QkMS5pbmNsdWRlcyhcIjovL1wiKSA/IGhvc3QkMSA6IGAke2Fic29sdXRlVXJsLnByb3RvY29sfS8vJHtob3N0JDF9YCk7XG5cdFx0XHRcdFx0XHRcdGFic29sdXRlVXJsLnByb3RvY29sID0gaG9zdFdpdGhQcm90b2NvbC5wcm90b2NvbDtcblx0XHRcdFx0XHRcdFx0YWJzb2x1dGVVcmwuaG9zdCA9IGhvc3RXaXRoUHJvdG9jb2wuaG9zdDtcblx0XHRcdFx0XHRcdFx0YWJzb2x1dGVVcmwucG9ydCA9IGhvc3RXaXRoUHJvdG9jb2wucG9ydDtcblx0XHRcdFx0XHRcdFx0YWJzb2x1dGVVcmwudXNlcm5hbWUgPSBob3N0V2l0aFByb3RvY29sLnVzZXJuYW1lO1xuXHRcdFx0XHRcdFx0XHRhYnNvbHV0ZVVybC5wYXNzd29yZCA9IGhvc3RXaXRoUHJvdG9jb2wucGFzc3dvcmQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gYWJzb2x1dGVVcmw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxldCBzY2hlbWUgPSBcImh0dHBzXCI7XG5cdFx0XHRcdFx0Y29uc3QgaG9zdCA9IG9wdGlvbnMuc2VydmVIb3N0IHx8IGdldEhlYWRlcihcImhvc3RcIikgfHwgXCJcIjtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0aWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHNjaGVtZSA9IFwiaHR0cFwiO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKF9lcnIpIHt9XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBVUkwocmVxLnVybCwgYCR7c2NoZW1lfTovLyR7aG9zdH1gKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dHJhbnNmb3JtUmVzcG9uc2U6ICh7IGJvZHksIGhlYWRlcnMsIHN0YXR1cyB9KSA9PiB7XG5cdFx0XHRcdFx0LyoqXG5cdFx0XHRcdFx0KiBDYXJlZnVsbHkgYXR0ZW1wdCB0byBzZXQgaGVhZGVycyBhbmQgZGF0YSBvbiB0aGUgcmVzcG9uc2Ugb2JqZWN0XG5cdFx0XHRcdFx0KiBmb3IgTmV4dC5qcyAxMiBzdXBwb3J0LlxuXHRcdFx0XHRcdCpcblx0XHRcdFx0XHQqIFRoaXMgYWxzbyBhc3N1bWVzIHRoYXQgd2UncmUgbm90IHVzaW5nIE5leHQuanMgMTUsIHdoZXJlIHRoZSBgcmVzYFxuXHRcdFx0XHRcdCogb2JqZWN0IGlzIHJlcG9wdWxhdGVkIGFzIGEgYFJvdXRlQ29udGV4dGAgb2JqZWN0LiBXZSBleHBlY3QgdGhlc2Vcblx0XHRcdFx0XHQqIG1ldGhvZHMgdG8gTk9UIGJlIGRlZmluZWQgaW4gTmV4dC5qcyAxNS5cblx0XHRcdFx0XHQqXG5cdFx0XHRcdFx0KiBXZSBjb3VsZCBsaWtlbHkgdXNlIGBpbnN0YW5jZW9mIFNlcnZlclJlc3BvbnNlYCB0byBiZXR0ZXIgY2hlY2sgdGhlXG5cdFx0XHRcdFx0KiB0eXBlIG9mIHRoaXMsIHRob3VnaCBOZXh0LmpzIDEyIGhhZCBpc3N1ZXMgd2l0aCB0aGlzIGR1ZSB0byBub3Rcblx0XHRcdFx0XHQqIGluc3RhbnRpYXRpbmcgdGhlIHJlc3BvbnNlIGNvcnJlY3RseS5cblx0XHRcdFx0XHQqL1xuXHRcdFx0XHRcdGlmIChpc05leHQxMkFwaVJlc3BvbnNlKHJlcykpIHtcblx0XHRcdFx0XHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSByZXMuc2V0SGVhZGVyKGtleSwgdmFsdWUpO1xuXHRcdFx0XHRcdFx0cmVzLnN0YXR1cyhzdGF0dXMpO1xuXHRcdFx0XHRcdFx0cmVzLnNlbmQoYm9keSk7XG5cdFx0XHRcdFx0XHQvKipcblx0XHRcdFx0XHRcdCogSWYgd2UncmUgaGVyZSwgd2UncmUgaW4gYSBzZXJ2ZXJsZXNzIGVuZHBvaW50IChub3QgZWRnZSksIHNvXG5cdFx0XHRcdFx0XHQqIHdlJ3ZlIGNvcnJlY3RseSBzZW50IHRoZSByZXNwb25zZSBhbmQgY2FuIHJldHVybiBgdW5kZWZpbmVkYC5cblx0XHRcdFx0XHRcdCpcblx0XHRcdFx0XHRcdCogTmV4dC5qcyAxMyBlZGdlIHJlcXVpcmVzIHRoYXQgdGhlIHJldHVybiB2YWx1ZSBpcyB0eXBlZCBhc1xuXHRcdFx0XHRcdFx0KiBgUmVzcG9uc2VgLCBzbyB3ZSBzdGlsbCBlbmZvcmNlIHRoYXQgYXMgd2UgY2Fubm90IGR5bmFtaWNhbGx5XG5cdFx0XHRcdFx0XHQqIGFkanVzdCB0eXBpbmcgYmFzZWQgb24gdGhlIGVudmlyb25tZW50LlxuXHRcdFx0XHRcdFx0Ki9cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyAoZ2V0UmVzcG9uc2UoKSkoYm9keSwge1xuXHRcdFx0XHRcdFx0c3RhdHVzLFxuXHRcdFx0XHRcdFx0aGVhZGVyc1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0cmFuc2Zvcm1TdHJlYW1pbmdSZXNwb25zZTogKHsgYm9keSwgaGVhZGVycywgc3RhdHVzIH0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gbmV3IFJlc3BvbnNlKGJvZHksIHtcblx0XHRcdFx0XHRcdHN0YXR1cyxcblx0XHRcdFx0XHRcdGhlYWRlcnNcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pLmNyZWF0ZUhhbmRsZXIoKTtcblx0Y29uc3QgZm4gPSBiYXNlRm4uYmluZChudWxsLCB2b2lkIDApO1xuXHQvKipcblx0KiBFbnN1cmUgd2UgaGF2ZSBhIG5vbi12YXJpYWRpYyBsZW5ndGggdG8gYXZvaWQgaXNzdWVzIHdpdGggZm9yY2VkIHR5cGVcblx0KiBjaGVja2luZy5cblx0Ki9cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBcImxlbmd0aFwiLCB7IHZhbHVlOiAxIH0pO1xuXHRyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZm4sIHtcblx0XHRHRVQ6IHsgdmFsdWU6IGJhc2VGbi5iaW5kKG51bGwsIFwiR0VUXCIpIH0sXG5cdFx0UE9TVDogeyB2YWx1ZTogYmFzZUZuLmJpbmQobnVsbCwgXCJQT1NUXCIpIH0sXG5cdFx0UFVUOiB7IHZhbHVlOiBiYXNlRm4uYmluZChudWxsLCBcIlBVVFwiKSB9XG5cdH0pO1xufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBmcmFtZXdvcmtOYW1lLCBzZXJ2ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/next.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/ZodError.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/ZodError.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson)\n/* harmony export */ });\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/util.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/util.js\");\n\nconst ZodIssueCode = _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL1pvZEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDbEMscUJBQXFCLGtEQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0EsMERBQTBEO0FBQzFELGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsTUFBTTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsa0RBQUk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oeWxvMDAvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL1pvZEVycm9yLmpzPzlmOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXRpbCB9IGZyb20gXCIuL2hlbHBlcnMvdXRpbC5qc1wiO1xuZXhwb3J0IGNvbnN0IFpvZElzc3VlQ29kZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwiaW52YWxpZF90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2xpdGVyYWxcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW52YWxpZF91bmlvblwiLFxuICAgIFwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yXCIsXG4gICAgXCJpbnZhbGlkX2VudW1fdmFsdWVcIixcbiAgICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gICAgXCJpbnZhbGlkX2FyZ3VtZW50c1wiLFxuICAgIFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiLFxuICAgIFwiaW52YWxpZF9kYXRlXCIsXG4gICAgXCJpbnZhbGlkX3N0cmluZ1wiLFxuICAgIFwidG9vX3NtYWxsXCIsXG4gICAgXCJ0b29fYmlnXCIsXG4gICAgXCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlc1wiLFxuICAgIFwibm90X211bHRpcGxlX29mXCIsXG4gICAgXCJub3RfZmluaXRlXCIsXG5dKTtcbmV4cG9ydCBjb25zdCBxdW90ZWxlc3NKc29uID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICAgIHJldHVybiBqc29uLnJlcGxhY2UoL1wiKFteXCJdKylcIjovZywgXCIkMTpcIik7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGdldCBlcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzc3VlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gW107XG4gICAgICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZXMgPSAoc3VicyA9IFtdKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3VlcywgLi4uc3Vic107XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFjdHVhbFByb3RvID0gbmV3LnRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYW4vYmFuXG4gICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBhY3R1YWxQcm90bztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gaXNzdWVzO1xuICAgIH1cbiAgICBmb3JtYXQoX21hcHBlcikge1xuICAgICAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoaXNzdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0geyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF91bmlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfcmV0dXJuX3R5cGVcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUucmV0dXJuVHlwZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5hcmd1bWVudHNFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyID0gZmllbGRFcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBpc3N1ZS5wYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBpc3N1ZS5wYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBpID09PSBpc3N1ZS5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IGVycm9yQXJyYXk6IGFueSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZXJyb3JBcnJheS5fZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IGVycm9yQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0uX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnJbZWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgICAgIHJldHVybiBmaWVsZEVycm9ycztcbiAgICB9XG4gICAgc3RhdGljIGFzc2VydCh2YWx1ZSkge1xuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFpvZEVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYSBab2RFcnJvcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmlzc3VlcywgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIsIDIpO1xuICAgIH1cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZmxhdHRlbihtYXBwZXIgPSAoaXNzdWUpID0+IGlzc3VlLm1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcbiAgICAgICAgY29uc3QgZm9ybUVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLmlzc3Vlcykge1xuICAgICAgICAgICAgaWYgKHN1Yi5wYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdEVsID0gc3ViLnBhdGhbMF07XG4gICAgICAgICAgICAgICAgZmllbGRFcnJvcnNbZmlyc3RFbF0gPSBmaWVsZEVycm9yc1tmaXJzdEVsXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tmaXJzdEVsXS5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1FcnJvcnMucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZm9ybUVycm9ycywgZmllbGRFcnJvcnMgfTtcbiAgICB9XG4gICAgZ2V0IGZvcm1FcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsYXR0ZW4oKTtcbiAgICB9XG59XG5ab2RFcnJvci5jcmVhdGUgPSAoaXNzdWVzKSA9PiB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoaXNzdWVzKTtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/ZodError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/errors.js":
/*!************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/errors.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultErrorMap: () => (/* reexport safe */ _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap)\n/* harmony export */ });\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales/en.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/locales/en.js\");\n\nlet overrideErrorMap = _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBQzlDLHVCQUF1QixzREFBZTtBQUNYO0FBQ3BCO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L25vZGVfbW9kdWxlcy96b2QvdjMvZXJyb3JzLmpzP2I3OWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi9sb2NhbGVzL2VuLmpzXCI7XG5sZXQgb3ZlcnJpZGVFcnJvck1hcCA9IGRlZmF1bHRFcnJvck1hcDtcbmV4cG9ydCB7IGRlZmF1bHRFcnJvck1hcCB9O1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yTWFwKG1hcCkge1xuICAgIG92ZXJyaWRlRXJyb3JNYXAgPSBtYXA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JNYXAoKSB7XG4gICAgcmV0dXJuIG92ZXJyaWRlRXJyb3JNYXA7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/external.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/external.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.BRAND),\n/* harmony export */   DIRTY: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.INVALID),\n/* harmony export */   NEVER: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.NEVER),\n/* harmony export */   OK: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.OK),\n/* harmony export */   ParseStatus: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.ParseStatus),\n/* harmony export */   Schema: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.Schema),\n/* harmony export */   ZodAny: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodAny),\n/* harmony export */   ZodArray: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodArray),\n/* harmony export */   ZodBigInt: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodBranded),\n/* harmony export */   ZodCatch: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodCatch),\n/* harmony export */   ZodDate: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodDate),\n/* harmony export */   ZodDefault: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodEffects),\n/* harmony export */   ZodEnum: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodEnum),\n/* harmony export */   ZodError: () => (/* reexport safe */ _ZodError_js__WEBPACK_IMPORTED_MODULE_5__.ZodError),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodIntersection),\n/* harmony export */   ZodIssueCode: () => (/* reexport safe */ _ZodError_js__WEBPACK_IMPORTED_MODULE_5__.ZodIssueCode),\n/* harmony export */   ZodLazy: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodLiteral),\n/* harmony export */   ZodMap: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodMap),\n/* harmony export */   ZodNaN: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodNever),\n/* harmony export */   ZodNull: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodNull),\n/* harmony export */   ZodNullable: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodNullable),\n/* harmony export */   ZodNumber: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodNumber),\n/* harmony export */   ZodObject: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodObject),\n/* harmony export */   ZodOptional: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodOptional),\n/* harmony export */   ZodParsedType: () => (/* reexport safe */ _helpers_util_js__WEBPACK_IMPORTED_MODULE_3__.ZodParsedType),\n/* harmony export */   ZodPipeline: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodRecord),\n/* harmony export */   ZodSchema: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodSchema),\n/* harmony export */   ZodSet: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodSet),\n/* harmony export */   ZodString: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodString),\n/* harmony export */   ZodSymbol: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodTransformer),\n/* harmony export */   ZodTuple: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodTuple),\n/* harmony export */   ZodType: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodType),\n/* harmony export */   ZodUndefined: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ZodVoid),\n/* harmony export */   addIssueToContext: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.addIssueToContext),\n/* harmony export */   any: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.any),\n/* harmony export */   array: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.array),\n/* harmony export */   bigint: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.bigint),\n/* harmony export */   boolean: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.boolean),\n/* harmony export */   coerce: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.coerce),\n/* harmony export */   custom: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.custom),\n/* harmony export */   date: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.date),\n/* harmony export */   datetimeRegex: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.datetimeRegex),\n/* harmony export */   defaultErrorMap: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_0__.defaultErrorMap),\n/* harmony export */   discriminatedUnion: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.discriminatedUnion),\n/* harmony export */   effect: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.effect),\n/* harmony export */   \"enum\": () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__[\"enum\"]),\n/* harmony export */   \"function\": () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__[\"function\"]),\n/* harmony export */   getErrorMap: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_0__.getErrorMap),\n/* harmony export */   getParsedType: () => (/* reexport safe */ _helpers_util_js__WEBPACK_IMPORTED_MODULE_3__.getParsedType),\n/* harmony export */   \"instanceof\": () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__[\"instanceof\"]),\n/* harmony export */   intersection: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.intersection),\n/* harmony export */   isAborted: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.isAborted),\n/* harmony export */   isAsync: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.isAsync),\n/* harmony export */   isDirty: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.isDirty),\n/* harmony export */   isValid: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.isValid),\n/* harmony export */   late: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.late),\n/* harmony export */   lazy: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.lazy),\n/* harmony export */   literal: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.literal),\n/* harmony export */   makeIssue: () => (/* reexport safe */ _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__.makeIssue),\n/* harmony export */   map: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.map),\n/* harmony export */   nan: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.nan),\n/* harmony export */   nativeEnum: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.nativeEnum),\n/* harmony export */   never: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.never),\n/* harmony export */   \"null\": () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__[\"null\"]),\n/* harmony export */   nullable: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.nullable),\n/* harmony export */   number: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.number),\n/* harmony export */   object: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.object),\n/* harmony export */   objectUtil: () => (/* reexport safe */ _helpers_util_js__WEBPACK_IMPORTED_MODULE_3__.objectUtil),\n/* harmony export */   oboolean: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.oboolean),\n/* harmony export */   onumber: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.onumber),\n/* harmony export */   optional: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.optional),\n/* harmony export */   ostring: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ostring),\n/* harmony export */   pipeline: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.pipeline),\n/* harmony export */   preprocess: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.preprocess),\n/* harmony export */   promise: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.promise),\n/* harmony export */   quotelessJson: () => (/* reexport safe */ _ZodError_js__WEBPACK_IMPORTED_MODULE_5__.quotelessJson),\n/* harmony export */   record: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.record),\n/* harmony export */   set: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.set),\n/* harmony export */   setErrorMap: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_0__.setErrorMap),\n/* harmony export */   strictObject: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.strictObject),\n/* harmony export */   string: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.string),\n/* harmony export */   symbol: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.symbol),\n/* harmony export */   transformer: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.transformer),\n/* harmony export */   tuple: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.tuple),\n/* harmony export */   undefined: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.undefined),\n/* harmony export */   union: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.union),\n/* harmony export */   unknown: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.unknown),\n/* harmony export */   util: () => (/* reexport safe */ _helpers_util_js__WEBPACK_IMPORTED_MODULE_3__.util),\n/* harmony export */   \"void\": () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__[\"void\"])\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/parseUtil.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/parseUtil.js\");\n/* harmony import */ var _helpers_typeAliases_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/typeAliases.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/typeAliases.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/util.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/util.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/types.js\");\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ZodError.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/ZodError.js\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL2V4dGVybmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ1c7QUFDRTtBQUNQO0FBQ1A7QUFDRyIsInNvdXJjZXMiOlsid2VicGFjazovL2h5bG8wMC8uL25vZGVfbW9kdWxlcy9pbm5nZXN0L25vZGVfbW9kdWxlcy96b2QvdjMvZXh0ZXJuYWwuanM/ZmE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2hlbHBlcnMvcGFyc2VVdGlsLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9oZWxwZXJzL3R5cGVBbGlhc2VzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9oZWxwZXJzL3V0aWwuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ab2RFcnJvci5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/external.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/errorUtil.js":
/*!***********************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/helpers/errorUtil.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorUtil: () => (/* binding */ errorUtil)\n/* harmony export */ });\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0Esc0VBQXNFLFVBQVU7QUFDaEY7QUFDQTtBQUNBLENBQUMsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3Qvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL2Vycm9yVXRpbC5qcz9jYjViIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gICAgLy8gYmlvbWUtaWdub3JlIGxpbnQ6XG4gICAgZXJyb3JVdGlsLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2U/Lm1lc3NhZ2U7XG59KShlcnJvclV0aWwgfHwgKGVycm9yVXRpbCA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/errorUtil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/parseUtil.js":
/*!***********************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/helpers/parseUtil.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locales/en.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/locales/en.js\");\n\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.getErrorMap)();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? undefined : _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvcGFyc2VVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDSTtBQUN4QztBQUNQLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxrQ0FBa0M7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1Asd0JBQXdCLHVEQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0RBQWUsZUFBZSxzREFBZTtBQUN6RTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNPO0FBQ1A7QUFDQSxDQUFDO0FBQ00sNEJBQTRCLHdCQUF3QjtBQUNwRCx5QkFBeUIsd0JBQXdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3Qvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3BhcnNlVXRpbC5qcz9hYWZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVycm9yTWFwIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi4vbG9jYWxlcy9lbi5qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VJc3N1ZSA9IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCB7IGRhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uKGlzc3VlRGF0YS5wYXRoIHx8IFtdKV07XG4gICAgY29uc3QgZnVsbElzc3VlID0ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgIH07XG4gICAgaWYgKGlzc3VlRGF0YS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICAgICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICAgIGNvbnN0IG1hcHMgPSBlcnJvck1hcHNcbiAgICAgICAgLmZpbHRlcigobSkgPT4gISFtKVxuICAgICAgICAuc2xpY2UoKVxuICAgICAgICAucmV2ZXJzZSgpO1xuICAgIGZvciAoY29uc3QgbWFwIG9mIG1hcHMpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gbWFwKGZ1bGxJc3N1ZSwgeyBkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZSB9KS5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgRU1QVFlfUEFUSCA9IFtdO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgaXNzdWVEYXRhKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVNYXAgPSBnZXRFcnJvck1hcCgpO1xuICAgIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICAgICAgaXNzdWVEYXRhOiBpc3N1ZURhdGEsXG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCwgLy8gY29udGV4dHVhbCBlcnJvciBtYXAgaXMgZmlyc3QgcHJpb3JpdHlcbiAgICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCwgLy8gdGhlbiBzY2hlbWEtYm91bmQgbWFwIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAsIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAgPT09IGRlZmF1bHRFcnJvck1hcCA/IHVuZGVmaW5lZCA6IGRlZmF1bHRFcnJvck1hcCwgLy8gdGhlbiBnbG9iYWwgZGVmYXVsdCBtYXBcbiAgICAgICAgXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgfSk7XG4gICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaChpc3N1ZSk7XG59XG5leHBvcnQgY2xhc3MgUGFyc2VTdGF0dXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gXCJ2YWxpZFwiO1xuICAgIH1cbiAgICBkaXJ0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gICAgfVxuICAgIGFib3J0KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJhYm9ydGVkXCI7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBhcnJheVZhbHVlLnB1c2gocy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBhcnJheVZhbHVlIH07XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBmaW5hbE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcGFpcjtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmIChrZXkudmFsdWUgIT09IFwiX19wcm90b19fXCIgJiYgKHR5cGVvZiB2YWx1ZS52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiB8fCBwYWlyLmFsd2F5c1NldCkpIHtcbiAgICAgICAgICAgICAgICBmaW5hbE9iamVjdFtrZXkudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE9iamVjdCB9O1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJTlZBTElEID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgc3RhdHVzOiBcImFib3J0ZWRcIixcbn0pO1xuZXhwb3J0IGNvbnN0IERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XG5leHBvcnQgY29uc3QgT0sgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZSB9KTtcbmV4cG9ydCBjb25zdCBpc0Fib3J0ZWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xuZXhwb3J0IGNvbnN0IGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcbmV4cG9ydCBjb25zdCBpc1ZhbGlkID0gKHgpID0+IHguc3RhdHVzID09PSBcInZhbGlkXCI7XG5leHBvcnQgY29uc3QgaXNBc3luYyA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB4IGluc3RhbmNlb2YgUHJvbWlzZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/parseUtil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/typeAliases.js":
/*!*************************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/helpers/typeAliases.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvdHlwZUFsaWFzZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3Qvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3R5cGVBbGlhc2VzLmpzPzQwMTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/typeAliases.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/util.js":
/*!******************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/helpers/util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   util: () => (/* binding */ util)\n/* harmony export */ });\nvar util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsSUFBSTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0I7QUFDZDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDMUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3Qvbm9kZV9tb2R1bGVzL3pvZC92My9oZWxwZXJzL3V0aWwuanM/NWMxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHV0aWw7XG4oZnVuY3Rpb24gKHV0aWwpIHtcbiAgICB1dGlsLmFzc2VydEVxdWFsID0gKF8pID0+IHsgfTtcbiAgICBmdW5jdGlvbiBhc3NlcnRJcyhfYXJnKSB7IH1cbiAgICB1dGlsLmFzc2VydElzID0gYXNzZXJ0SXM7XG4gICAgZnVuY3Rpb24gYXNzZXJ0TmV2ZXIoX3gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICAgIHV0aWwuYXNzZXJ0TmV2ZXIgPSBhc3NlcnROZXZlcjtcbiAgICB1dGlsLmFycmF5VG9FbnVtID0gKGl0ZW1zKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgIG9ialtpdGVtXSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICAgIHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzID0gKG9iaikgPT4ge1xuICAgICAgICBjb25zdCB2YWxpZEtleXMgPSB1dGlsLm9iamVjdEtleXMob2JqKS5maWx0ZXIoKGspID0+IHR5cGVvZiBvYmpbb2JqW2tdXSAhPT0gXCJudW1iZXJcIik7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0ge307XG4gICAgICAgIGZvciAoY29uc3QgayBvZiB2YWxpZEtleXMpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkW2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGlsLm9iamVjdFZhbHVlcyhmaWx0ZXJlZCk7XG4gICAgfTtcbiAgICB1dGlsLm9iamVjdFZhbHVlcyA9IChvYmopID0+IHtcbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0S2V5cyhvYmopLm1hcChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtlXTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB1dGlsLm9iamVjdEtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09IFwiZnVuY3Rpb25cIiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgPyAob2JqKSA9PiBPYmplY3Qua2V5cyhvYmopIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA6IChvYmplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICB9O1xuICAgIHV0aWwuZmluZCA9IChhcnIsIGNoZWNrZXIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgICAgICAgaWYgKGNoZWNrZXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHV0aWwuaXNJbnRlZ2VyID0gdHlwZW9mIE51bWJlci5pc0ludGVnZXIgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/ICh2YWwpID0+IE51bWJlci5pc0ludGVnZXIodmFsKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgOiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc0Zpbml0ZSh2YWwpICYmIE1hdGguZmxvb3IodmFsKSA9PT0gdmFsO1xuICAgIGZ1bmN0aW9uIGpvaW5WYWx1ZXMoYXJyYXksIHNlcGFyYXRvciA9IFwiIHwgXCIpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCgodmFsKSA9PiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IGAnJHt2YWx9J2AgOiB2YWwpKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfVxuICAgIHV0aWwuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XG4gICAgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIgPSAoXywgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59KSh1dGlsIHx8ICh1dGlsID0ge30pKTtcbmV4cG9ydCB2YXIgb2JqZWN0VXRpbDtcbihmdW5jdGlvbiAob2JqZWN0VXRpbCkge1xuICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXMgPSAoZmlyc3QsIHNlY29uZCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZmlyc3QsXG4gICAgICAgICAgICAuLi5zZWNvbmQsIC8vIHNlY29uZCBvdmVyd3JpdGVzIGZpcnN0XG4gICAgICAgIH07XG4gICAgfTtcbn0pKG9iamVjdFV0aWwgfHwgKG9iamVjdFV0aWwgPSB7fSkpO1xuZXhwb3J0IGNvbnN0IFpvZFBhcnNlZFR5cGUgPSB1dGlsLmFycmF5VG9FbnVtKFtcbiAgICBcInN0cmluZ1wiLFxuICAgIFwibmFuXCIsXG4gICAgXCJudW1iZXJcIixcbiAgICBcImludGVnZXJcIixcbiAgICBcImZsb2F0XCIsXG4gICAgXCJib29sZWFuXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJiaWdpbnRcIixcbiAgICBcInN5bWJvbFwiLFxuICAgIFwiZnVuY3Rpb25cIixcbiAgICBcInVuZGVmaW5lZFwiLFxuICAgIFwibnVsbFwiLFxuICAgIFwiYXJyYXlcIixcbiAgICBcIm9iamVjdFwiLFxuICAgIFwidW5rbm93blwiLFxuICAgIFwicHJvbWlzZVwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwibmV2ZXJcIixcbiAgICBcIm1hcFwiLFxuICAgIFwic2V0XCIsXG5dKTtcbmV4cG9ydCBjb25zdCBnZXRQYXJzZWRUeXBlID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCB0ID0gdHlwZW9mIGRhdGE7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZDtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3RyaW5nO1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKGRhdGEpID8gWm9kUGFyc2VkVHlwZS5uYW4gOiBab2RQYXJzZWRUeXBlLm51bWJlcjtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJvb2xlYW47XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuZnVuY3Rpb247XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJpZ2ludDtcbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3ltYm9sO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5udWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEudGhlbiAmJiB0eXBlb2YgZGF0YS50aGVuID09PSBcImZ1bmN0aW9uXCIgJiYgZGF0YS5jYXRjaCAmJiB0eXBlb2YgZGF0YS5jYXRjaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5tYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIFNldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBEYXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuZGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm9iamVjdDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVua25vd247XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.BRAND),\n/* harmony export */   DIRTY: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.INVALID),\n/* harmony export */   NEVER: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.NEVER),\n/* harmony export */   OK: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.OK),\n/* harmony export */   ParseStatus: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus),\n/* harmony export */   Schema: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.Schema),\n/* harmony export */   ZodAny: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodAny),\n/* harmony export */   ZodArray: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodArray),\n/* harmony export */   ZodBigInt: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodBranded),\n/* harmony export */   ZodCatch: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodCatch),\n/* harmony export */   ZodDate: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodDate),\n/* harmony export */   ZodDefault: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodEffects),\n/* harmony export */   ZodEnum: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodEnum),\n/* harmony export */   ZodError: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodError),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodIntersection),\n/* harmony export */   ZodIssueCode: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode),\n/* harmony export */   ZodLazy: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodLiteral),\n/* harmony export */   ZodMap: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodMap),\n/* harmony export */   ZodNaN: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodNever),\n/* harmony export */   ZodNull: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodNull),\n/* harmony export */   ZodNullable: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodNullable),\n/* harmony export */   ZodNumber: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodNumber),\n/* harmony export */   ZodObject: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodObject),\n/* harmony export */   ZodOptional: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodOptional),\n/* harmony export */   ZodParsedType: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodParsedType),\n/* harmony export */   ZodPipeline: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodRecord),\n/* harmony export */   ZodSchema: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodSchema),\n/* harmony export */   ZodSet: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodSet),\n/* harmony export */   ZodString: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodString),\n/* harmony export */   ZodSymbol: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodTransformer),\n/* harmony export */   ZodTuple: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodTuple),\n/* harmony export */   ZodType: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodType),\n/* harmony export */   ZodUndefined: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ZodVoid),\n/* harmony export */   addIssueToContext: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext),\n/* harmony export */   any: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.any),\n/* harmony export */   array: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.array),\n/* harmony export */   bigint: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.bigint),\n/* harmony export */   boolean: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.boolean),\n/* harmony export */   coerce: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.coerce),\n/* harmony export */   custom: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.custom),\n/* harmony export */   date: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.date),\n/* harmony export */   datetimeRegex: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.datetimeRegex),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultErrorMap: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.defaultErrorMap),\n/* harmony export */   discriminatedUnion: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion),\n/* harmony export */   effect: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.effect),\n/* harmony export */   \"enum\": () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]),\n/* harmony export */   \"function\": () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__[\"function\"]),\n/* harmony export */   getErrorMap: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.getErrorMap),\n/* harmony export */   getParsedType: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.getParsedType),\n/* harmony export */   \"instanceof\": () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__[\"instanceof\"]),\n/* harmony export */   intersection: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.intersection),\n/* harmony export */   isAborted: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.isAborted),\n/* harmony export */   isAsync: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.isAsync),\n/* harmony export */   isDirty: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.isDirty),\n/* harmony export */   isValid: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.isValid),\n/* harmony export */   late: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.late),\n/* harmony export */   lazy: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.lazy),\n/* harmony export */   literal: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.literal),\n/* harmony export */   makeIssue: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue),\n/* harmony export */   map: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.map),\n/* harmony export */   nan: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.nan),\n/* harmony export */   nativeEnum: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.nativeEnum),\n/* harmony export */   never: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.never),\n/* harmony export */   \"null\": () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__[\"null\"]),\n/* harmony export */   nullable: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.nullable),\n/* harmony export */   number: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.number),\n/* harmony export */   object: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.object),\n/* harmony export */   objectUtil: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.objectUtil),\n/* harmony export */   oboolean: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.oboolean),\n/* harmony export */   onumber: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.onumber),\n/* harmony export */   optional: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.optional),\n/* harmony export */   ostring: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.ostring),\n/* harmony export */   pipeline: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.pipeline),\n/* harmony export */   preprocess: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.preprocess),\n/* harmony export */   promise: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.promise),\n/* harmony export */   quotelessJson: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.quotelessJson),\n/* harmony export */   record: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.record),\n/* harmony export */   set: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.set),\n/* harmony export */   setErrorMap: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.setErrorMap),\n/* harmony export */   strictObject: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.strictObject),\n/* harmony export */   string: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.string),\n/* harmony export */   symbol: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.symbol),\n/* harmony export */   transformer: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.transformer),\n/* harmony export */   tuple: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.tuple),\n/* harmony export */   undefined: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.undefined),\n/* harmony export */   union: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.union),\n/* harmony export */   unknown: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.unknown),\n/* harmony export */   util: () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__.util),\n/* harmony export */   \"void\": () => (/* reexport safe */ _external_js__WEBPACK_IMPORTED_MODULE_0__[\"void\"]),\n/* harmony export */   z: () => (/* reexport module object */ _external_js__WEBPACK_IMPORTED_MODULE_0__)\n/* harmony export */ });\n/* harmony import */ var _external_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./external.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/external.js\");\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_external_js__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvem9kL3YzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ0w7QUFDakI7QUFDYixpRUFBZSx5Q0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3Qvbm9kZV9tb2R1bGVzL3pvZC92My9pbmRleC5qcz82ODlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHogZnJvbSBcIi4vZXh0ZXJuYWwuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2V4dGVybmFsLmpzXCI7XG5leHBvcnQgeyB6IH07XG5leHBvcnQgZGVmYXVsdCB6O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/locales/en.js":
/*!****************************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/locales/en.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ZodError.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/util.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/util.js\");\n\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type:\n            if (issue.received === _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.jsonStringifyReplacer)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.keys, \", \")}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue);\n    }\n    return { message };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (errorMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/locales/en.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/zod/v3/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/inngest/node_modules/zod/v3/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   \"void\": () => (/* binding */ voidType)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ZodError.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/errors.js\");\n/* harmony import */ var _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/errorUtil.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/errorUtil.js\");\n/* harmony import */ var _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/parseUtil.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/parseUtil.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/util.js */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/helpers/util.js\");\n\n\n\n\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isValid)(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isAsync)(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isValid)(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isValid)(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        // @ts-ignore\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"email\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"emoji\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"uuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"nanoid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"cuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"cuid2\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"ulid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    // @ts-ignore\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"regex\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"duration\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"ip\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"jwt\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"cidr\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"base64\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        validation: \"base64url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_date,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                    code: tooBig ? _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big : _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError(result.ctx.common.issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError(issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(a);\n    const bType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.getParsedType)(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object) {\n        const bKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(b);\n        const sharedKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.array && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.date && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isAborted)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isAborted)(parsedRight)) {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_intersection_types,\n                });\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n            }\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isDirty)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isDirty)(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.map) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.set) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_2__.errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.function) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.makeIssue)({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_1__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_1__.defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.makeIssue)({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_1__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_1__.defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(async function (...args) {\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.string && ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.number) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(_helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.promise && ctx.common.async === false) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        const promisified = ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                    if (result.status === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY)(result.value);\n                    if (status.value === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY)(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                if (result.status === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY)(result.value);\n                if (status.value === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY)(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isValid)(base))\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isValid)(base))\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\n\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.undefined) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.null) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.OK)(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isAsync)(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_4__.ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.DIRTY)(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isValid)(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\n\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\n\nconst NEVER = _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_3__.INVALID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/zod/v3/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/types.js":
/*!***************************************!*\
  !*** ./node_modules/inngest/types.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StepOpCode: () => (/* binding */ StepOpCode),\n/* harmony export */   err: () => (/* binding */ err),\n/* harmony export */   functionConfigSchema: () => (/* binding */ functionConfigSchema),\n/* harmony export */   inBandSyncRequestBodySchema: () => (/* binding */ inBandSyncRequestBodySchema),\n/* harmony export */   incomingOpSchema: () => (/* binding */ incomingOpSchema),\n/* harmony export */   jsonErrorSchema: () => (/* binding */ jsonErrorSchema),\n/* harmony export */   logLevels: () => (/* binding */ logLevels),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   sendEventResponseSchema: () => (/* binding */ sendEventResponseSchema),\n/* harmony export */   types_exports: () => (/* binding */ types_exports)\n/* harmony export */ });\n/* harmony import */ var _virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/rolldown_runtime.js */ \"(rsc)/./node_modules/inngest/_virtual/rolldown_runtime.js\");\n/* harmony import */ var zod_v3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/inngest/node_modules/zod/v3/index.js\");\n\n\n\n//#region src/types.ts\nvar types_exports = /* @__PURE__ */ (0,_virtual_rolldown_runtime_js__WEBPACK_IMPORTED_MODULE_1__.__export)({\n\tStepOpCode: () => StepOpCode,\n\terr: () => err,\n\tfunctionConfigSchema: () => functionConfigSchema,\n\tinBandSyncRequestBodySchema: () => inBandSyncRequestBodySchema,\n\tincomingOpSchema: () => incomingOpSchema,\n\tjsonErrorSchema: () => jsonErrorSchema,\n\tlogLevels: () => logLevels,\n\tok: () => ok,\n\tsendEventResponseSchema: () => sendEventResponseSchema\n});\nconst baseJsonErrorSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\tname: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().trim().optional(),\n\terror: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().trim().optional(),\n\tmessage: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().trim().optional(),\n\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().trim().optional()\n});\nconst maybeJsonErrorSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.lazy(() => zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\tname: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().trim(),\n\tmessage: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().trim(),\n\tstack: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().trim().optional(),\n\tcause: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.union([maybeJsonErrorSchema, zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.unknown()]).optional()\n}));\nconst jsonErrorSchema = baseJsonErrorSchema.extend({ cause: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.union([maybeJsonErrorSchema, zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.unknown()]).optional() }).passthrough().catch({}).transform((val) => {\n\treturn {\n\t\t...val,\n\t\tname: val.name || \"Error\",\n\t\tmessage: val.message || val.error || \"Unknown error\",\n\t\tstack: val.stack\n\t};\n});\n/**\n* Unique codes for the different types of operation that can be sent to Inngest\n* from SDK step functions.\n*/\nlet StepOpCode = /* @__PURE__ */ function(StepOpCode$1) {\n\tStepOpCode$1[\"WaitForSignal\"] = \"WaitForSignal\";\n\tStepOpCode$1[\"WaitForEvent\"] = \"WaitForEvent\";\n\t/**\n\t* Legacy equivalent to `\"StepRun\"`. Has mixed data wrapping (e.g. `data` or\n\t* `data.data` depending on SDK version), so this is phased out in favour of\n\t* `\"StepRun\"`, which never wraps.\n\t*\n\t* Note that it is still used for v0 executions for backwards compatibility.\n\t*\n\t* @deprecated Only used for v0 executions; use `\"StepRun\"` instead.\n\t*/\n\tStepOpCode$1[\"Step\"] = \"Step\";\n\tStepOpCode$1[\"StepRun\"] = \"StepRun\";\n\tStepOpCode$1[\"StepError\"] = \"StepError\";\n\tStepOpCode$1[\"StepPlanned\"] = \"StepPlanned\";\n\tStepOpCode$1[\"Sleep\"] = \"Sleep\";\n\t/**\n\t* Used to signify that the executor has requested that a step run, but we\n\t* could not find that step.\n\t*\n\t* This is likely indicative that a step was renamed or removed from the\n\t* function.\n\t*/\n\tStepOpCode$1[\"StepNotFound\"] = \"StepNotFound\";\n\tStepOpCode$1[\"InvokeFunction\"] = \"InvokeFunction\";\n\tStepOpCode$1[\"AiGateway\"] = \"AIGateway\";\n\tStepOpCode$1[\"Gateway\"] = \"Gateway\";\n\treturn StepOpCode$1;\n}({});\nconst incomingOpSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\tid: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1),\n\tdata: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n\terror: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n\tinput: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.any().optional()\n});\nconst sendEventResponseSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.object({\n\tids: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string()).default([]),\n\tstatus: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().default(0),\n\terror: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n/**\n* A set of log levels that can be used to control the amount of logging output\n* from various parts of the Inngest library.\n*\n* @public\n*/\nconst logLevels = [\n\t\"fatal\",\n\t\"error\",\n\t\"warn\",\n\t\"info\",\n\t\"debug\",\n\t\"silent\"\n];\n/**\n* This schema is used internally to share the shape of a concurrency option\n* when validating config. We cannot add comments to Zod fields, so we just use\n* an extra type check to ensure it matches our exported expectations.\n*/\nconst concurrencyOptionSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\tlimit: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n\tkey: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\tscope: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n\t\t\"fn\",\n\t\t\"env\",\n\t\t\"account\"\n\t]).optional()\n});\n/**\n* The schema used to represent an individual function being synced with\n* Inngest.\n*\n* Note that this should only be used to validate the shape of a config object\n* and not used for feature compatibility, such as feature X being exclusive\n* with feature Y; these should be handled on the Inngest side.\n*/\nconst functionConfigSchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\tname: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\tid: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\ttriggers: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tevent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\texpression: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n\t}), zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({ cron: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string() })])),\n\tsteps: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.record(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tid: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\tname: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\truntime: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\t\ttype: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.union([zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"http\"), zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"ws\")]),\n\t\t\turl: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string()\n\t\t}),\n\t\tretries: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({ attempts: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional() }).optional()\n\t})),\n\tidempotency: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\tbatchEvents: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tmaxSize: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n\t\ttimeout: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\tkey: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\t\tif: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n\t}).optional(),\n\trateLimit: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tkey: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\t\tlimit: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n\t\tperiod: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((x) => x)\n\t}).optional(),\n\tthrottle: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tkey: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\t\tlimit: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n\t\tperiod: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((x) => x),\n\t\tburst: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n\t}).optional(),\n\tsingleton: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tkey: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\t\tmode: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"skip\", \"cancel\"])\n\t}).optional(),\n\tcancel: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tevent: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n\t\tif: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\t\ttimeout: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n\t})).optional(),\n\tdebounce: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tkey: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n\t\tperiod: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((x) => x),\n\t\ttimeout: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((x) => x).optional()\n\t}).optional(),\n\ttimeouts: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({\n\t\tstart: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((x) => x).optional(),\n\t\tfinish: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((x) => x).optional()\n\t}).optional(),\n\tpriority: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({ run: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string().optional() }).optional(),\n\tconcurrency: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.union([\n\t\tzod_v3__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n\t\tconcurrencyOptionSchema.transform((x) => x),\n\t\tzod_v3__WEBPACK_IMPORTED_MODULE_0__.z.array(concurrencyOptionSchema.transform((x) => x)).min(1).max(2)\n\t]).optional()\n});\nconst ok = (data) => {\n\treturn {\n\t\tok: true,\n\t\tvalue: data\n\t};\n};\nconst err = (error) => {\n\treturn {\n\t\tok: false,\n\t\terror\n\t};\n};\nconst inBandSyncRequestBodySchema = zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.strictObject({ url: zod_v3__WEBPACK_IMPORTED_MODULE_0__.z.string() });\n\n//#endregion\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/version.js":
/*!*****************************************!*\
  !*** ./node_modules/inngest/version.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n//#region src/version.ts\nconst version = \"3.43.1\";\n\n//#endregion\n\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBOztBQUVBO0FBQ21CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHlsbzAwLy4vbm9kZV9tb2R1bGVzL2lubmdlc3QvdmVyc2lvbi5qcz83MmM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vI3JlZ2lvbiBzcmMvdmVyc2lvbi50c1xuY29uc3QgdmVyc2lvbiA9IFwiMy40My4xXCI7XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgdmVyc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/version.js\n");

/***/ })

};
;